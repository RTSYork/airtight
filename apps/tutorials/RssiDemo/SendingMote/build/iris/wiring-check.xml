<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="46:SendingMoteAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f00c90fc780"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f00c9e779a0"/></to>
    </wire>
    <wire loc="72:../../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f00c9e779a0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f00c9e76dc0"/></to>
    </wire>
    <wire loc="47:SendingMoteAppC.nc">
      <from><interface-ref name="SendTimer" scoped="" ref="0x7f00c90fb020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f00c910dce0"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f00c910dce0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f00c95cf2e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:SendingMoteAppC.nc">
      <from><interface-ref name="RssiMsgSend" scoped="" ref="0x7f00c90f6540"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f00c91131b0"/></to>
    </wire>
    <wire loc="64:../../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f00c91131b0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f00c8a2d540"/></to>
    </wire>
    <wire loc="50:SendingMoteAppC.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0x7f00c90f53f0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f00c9faa080"/></to>
    </wire>
    <wire loc="65:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f00c9faa080"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f00c9f2a610"/></to>
    </wire>
    <wire loc="75:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f00c9f2a610"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f00c9f02300"/></to>
    </wire>
    <wire loc="70:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9f6a8b0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9f24020"/></to>
    </wire>
    <wire loc="80:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9f24020"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9efcd60"/></to>
    </wire>
    <wire loc="72:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f00c9f61180"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f00c9f24630"/></to>
    </wire>
    <wire loc="82:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f00c9f24630"/></from>
      <to><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f00c9efaba0"/></to>
    </wire>
    <wire loc="67:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f00c9fa94f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f00c9f27640"/></to>
    </wire>
    <wire loc="77:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f00c9f27640"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f00c9eff320"/></to>
    </wire>
    <wire loc="69:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f00c9f701d0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f00c9f25430"/></to>
    </wire>
    <wire loc="79:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f00c9f25430"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f00c9efc1d0"/></to>
    </wire>
    <wire loc="76:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c9f45dd0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c9f204b0"/></to>
    </wire>
    <wire loc="86:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c9f204b0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c9ee0320"/></to>
    </wire>
    <wire loc="68:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f00c9f73470"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f00c9f26810"/></to>
    </wire>
    <wire loc="78:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f00c9f26810"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f00c9efd510"/></to>
    </wire>
    <wire loc="75:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9f494c0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9f21990"/></to>
    </wire>
    <wire loc="85:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9f21990"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9ee9800"/></to>
    </wire>
    <wire loc="77:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f00c9f48020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f00c9f1f020"/></to>
    </wire>
    <wire loc="87:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f00c9f1f020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f00c9ee0e10"/></to>
    </wire>
    <wire loc="73:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f00c9f501e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f00c9f222d0"/></to>
    </wire>
    <wire loc="83:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f00c9f222d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f00c9efb430"/></to>
    </wire>
    <wire loc="78:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f00c9f39d40"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f00c9f1fcb0"/></to>
    </wire>
    <wire loc="88:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f00c9f1fcb0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f00c9edead0"/></to>
    </wire>
    <wire loc="81:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7f00c9f36d70"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c9f0ec50"/></to>
    </wire>
    <wire loc="97:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c9f0ec50"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c9ed1270"/></to>
    </wire>
    <wire loc="80:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c9f2fe60"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c9f07ce0"/></to>
    </wire>
    <wire loc="96:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c9f07ce0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c9ecd3f0"/></to>
    </wire>
    <wire loc="254:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f00c9f02300"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f00c992a880"/></to>
    </wire>
    <wire loc="92:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f00c9f14c40"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f00c9ed71c0"/></to>
    </wire>
    <wire loc="345:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f00c9ed71c0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f00c95783b0"/></to>
    </wire>
    <wire loc="139:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9efcd60"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9b103a0"/></to>
    </wire>
    <wire loc="141:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f00c9efaba0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f00c9b13720"/></to>
    </wire>
    <wire loc="136:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f00c9eff320"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f00c9b12530"/></to>
    </wire>
    <wire loc="138:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f00c9efc1d0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f00c9b11b00"/></to>
    </wire>
    <wire loc="91:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f00c9f16660"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f00c9edbc90"/></to>
    </wire>
    <wire loc="343:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f00c9edbc90"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f00c957ce80"/></to>
    </wire>
    <wire loc="255:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c9ee0320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c9913270"/></to>
    </wire>
    <wire loc="137:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f00c9efd510"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f00c9b113a0"/></to>
    </wire>
    <wire loc="309:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c9ed1270"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c95c2020"/></to>
    </wire>
    <wire loc="95:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c9f0a740"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c9ed4d70"/></to>
    </wire>
    <wire loc="347:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c9ed4d70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c956fa40"/></to>
    </wire>
    <wire loc="90:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f00c9f1d110"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f00c9edd6d0"/></to>
    </wire>
    <wire loc="344:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f00c9edd6d0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f00c9573e70"/></to>
    </wire>
    <wire loc="288:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9ee9800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9811560"/></to>
    </wire>
    <wire loc="226:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f00c9ee0e10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f00c9935d60"/></to>
    </wire>
    <wire loc="140:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f00c9efb430"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f00c9b14020"/></to>
    </wire>
    <wire loc="264:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f00c9edead0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f00c989d5f0"/></to>
    </wire>
    <wire loc="93:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f00c9f0c800"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f00c9ed4510"/></to>
    </wire>
    <wire loc="346:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f00c9ed4510"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f00c956f1e0"/></to>
    </wire>
    <wire loc="310:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c9ecd3f0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c95c6020"/></to>
    </wire>
    <wire loc="57:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f00c992a880"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f00c9913d90"/></to>
    </wire>
    <wire loc="89:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f00c95783b0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f00c9552a40"/></to>
    </wire>
    <wire loc="172:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Notifier" scoped="" ref="0x7f00c9ef7020"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9a5ed30"/></to>
    </wire>
    <wire loc="160:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendResource" scoped="" ref="0x7f00c9ef02c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f00c9a93390"/></to>
    </wire>
    <wire loc="98:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f00c9a93390"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f00c8cf39d0"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9b103a0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f00c8d473a0"/></to>
    </wire>
    <wire loc="58:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c95c6020"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c8b75360"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f00c9b12530"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f00c8d4a530"/></to>
    </wire>
    <wire loc="65:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f00c9b11b00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f00c8d49b00"/></to>
    </wire>
    <wire loc="173:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7f00c9ee13c0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f00c9980dd0"/></to>
    </wire>
    <wire loc="58:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7f00c9980dd0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f00c8c862e0"/></to>
    </wire>
    <wire loc="174:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7f00c9eea890"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f00c9a8ee00"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c9913270"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c8c0a640"/></to>
    </wire>
    <wire loc="86:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f00c957ce80"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f00c9554550"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f00c9b113a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f00c8d493a0"/></to>
    </wire>
    <wire loc="62:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f00c9b13720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f00c8d4b720"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c95c2020"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c8b722a0"/></to>
    </wire>
    <wire loc="82:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c956fa40"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c944f020"/></to>
    </wire>
    <wire loc="95:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f00c9573e70"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f00c954a560"/></to>
    </wire>
    <wire loc="170:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Send" scoped="" ref="0x7f00c9ef1a60"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7f00c9a60a50"/></to>
    </wire>
    <wire loc="117:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f00c9935d60"/></from>
      <to><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7f00c9930100"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f00c9b14020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f00c8d4c020"/></to>
    </wire>
    <wire loc="171:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Receive" scoped="" ref="0x7f00c9ef8840"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7f00c9a5e760"/></to>
    </wire>
    <wire loc="62:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f00c989d5f0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f00c8c00d00"/></to>
    </wire>
    <wire loc="97:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f00c956f1e0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f00c95488b0"/></to>
    </wire>
    <wire loc="116:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f00c9c59470"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f00c9983e00"/></to>
    </wire>
    <wire loc="57:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f00c9983e00"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f00c8c89020"/></to>
    </wire>
    <wire loc="117:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9c52400"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9bbe020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="118:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f00c9c56ab0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c95c2020"/></to>
    </wire>
    <wire loc="119:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RF230Packet" scoped="" ref="0x7f00c9c4c960"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f00c957dd90"/></to>
    </wire>
    <wire loc="80:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f00c957dd90"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f00c9555470"/></to>
    </wire>
    <wire loc="124:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f00c9bbdb60"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f00c956edd0"/></to>
    </wire>
    <wire loc="101:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f00c956edd0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f00c9454ac0"/></to>
    </wire>
    <wire loc="125:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f00c9bbecb0"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f00c9ec8e50"/></to>
    </wire>
    <wire loc="131:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f00c9b0d8c0"/></from>
      <to><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7f00c9c75b70"/></to>
    </wire>
    <wire loc="132:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c9b0e8f0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7f00c9b07880"/></to>
    </wire>
    <wire loc="133:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c9b0d2b0"/></from>
      <to><interface-ref name="TinyosReceive" scoped="" ref="0x7f00c9a1d020"/></to>
    </wire>
    <wire loc="134:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f00c9b10a30"/></from>
      <to><interface-ref name="TinyosPacket" scoped="" ref="0x7f00c9a1d630"/></to>
    </wire>
    <wire loc="149:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f00c9b06c00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f00c9a93390"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c9b06310"/></from>
      <to><interface-ref name="TinyosSend" scoped="" ref="0x7f00c9a1e5d0"/></to>
    </wire>
    <wire loc="165:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f00c9a5d390"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f00c9983e00"/></to>
    </wire>
    <wire loc="166:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c9a592b0"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7f00c9a527c0"/></to>
    </wire>
    <wire loc="167:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c9a59be0"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7f00c9a1f120"/></to>
    </wire>
    <wire loc="168:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f00c9a5a470"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f00c9a1f730"/></to>
    </wire>
    <wire loc="182:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c9a1c4a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f00c994a840"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f00c994a840"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f00c8c319b0"/></to>
    </wire>
    <wire loc="183:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c9a1cdd0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f00c997ee60"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f00c997ee60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f00c8c83440"/></to>
    </wire>
    <wire loc="184:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f00c9a1b410"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f00c997e080"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f00c997e080"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f00c8c85590"/></to>
    </wire>
    <wire loc="190:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f00c997d500"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f00c9934a10"/></to>
    </wire>
    <wire loc="115:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f00c9934a10"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f00c99328c0"/></to>
    </wire>
    <wire loc="194:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c997c440"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f00c9935790"/></to>
    </wire>
    <wire loc="114:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f00c9935790"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f00c99322b0"/></to>
    </wire>
    <wire loc="217:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f00c9947be0"/></from>
      <to><interface-ref name="UniqueConfig" scoped="" ref="0x7f00c9c8a750"/></to>
    </wire>
    <wire loc="218:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c9949a70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f00c9940e40"/></to>
    </wire>
    <wire loc="113:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f00c9940e40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f00c9933950"/></to>
    </wire>
    <wire loc="219:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f00c9946720"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f00c9ca3020"/></to>
    </wire>
    <wire loc="45:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f00c9ca3020"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f00c90b6650"/></to>
    </wire>
    <wire loc="220:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f00c9945400"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f00c9ca3da0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="230:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9931720"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9811560"/></to>
    </wire>
    <wire loc="232:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c9933950"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f00c9915440"/></to>
    </wire>
    <wire loc="58:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f00c9915440"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f00c99118c0"/></to>
    </wire>
    <wire loc="233:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c99322b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f00c9915d70"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f00c9915d70"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f00c99102b0"/></to>
    </wire>
    <wire loc="234:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f00c99328c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f00c99143d0"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f00c99143d0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f00c99108c0"/></to>
    </wire>
    <wire loc="250:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f00c9913d90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f00c989fa10"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f00c989fa10"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f00c8c03bf0"/></to>
    </wire>
    <wire loc="251:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c99118c0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f00c989e5d0"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f00c989e5d0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f00c8c01d70"/></to>
    </wire>
    <wire loc="252:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c99102b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f00c989d020"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f00c989d020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f00c8c00730"/></to>
    </wire>
    <wire loc="253:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f00c99108c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f00c95bfc20"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f00c95bfc20"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f00c8b6e020"/></to>
    </wire>
    <wire loc="260:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f00c989b8b0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f00c98441d0"/></to>
    </wire>
    <wire loc="56:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f00c98441d0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f00c8bc3660"/></to>
    </wire>
    <wire loc="261:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f00c989a270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f00c9949270"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f00c9949270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f00c8c30400"/></to>
    </wire>
    <wire loc="262:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f00c989caa0"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f00c9591b60"/></to>
    </wire>
    <wire loc="70:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f00c9591b60"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7f00c958a410"/></to>
    </wire>
    <wire loc="263:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f00c989c020"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f00c9ec8e50"/></to>
    </wire>
    <wire loc="268:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c9947440"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f00c9844ac0"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f00c9844ac0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f00c8bc2020"/></to>
    </wire>
    <wire loc="277:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f00c98410a0"/></from>
      <to><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7f00c9c88020"/></to>
    </wire>
    <wire loc="278:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c9843310"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f00c983c470"/></to>
    </wire>
    <wire loc="279:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c9843c40"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f00c983cd60"/></to>
    </wire>
    <wire loc="280:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9842400"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9bbe020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="286:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AckReceivedFlag" scoped="" ref="0x7f00c980de60"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f00c95b79b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="287:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c980f0e0"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9bbe020"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f00c980fd30"/></from>
      <to><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7f00c9c8e380"/></to>
    </wire>
    <wire loc="293:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c9810020"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f00c97f1270"/></to>
    </wire>
    <wire loc="71:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f00c97f1270"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f00c97ebb00"/></to>
    </wire>
    <wire loc="294:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c9810950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f00c97f1b60"/></to>
    </wire>
    <wire loc="72:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f00c97f1b60"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f00c97ea450"/></to>
    </wire>
    <wire loc="299:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f00c97e82b0"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7f00c9c72860"/></to>
    </wire>
    <wire loc="300:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c97ebb00"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f00c9590a40"/></to>
    </wire>
    <wire loc="71:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f00c9590a40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f00c9589440"/></to>
    </wire>
    <wire loc="301:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c97ea450"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f00c958f400"/></to>
    </wire>
    <wire loc="72:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f00c958f400"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f00c9589d70"/></to>
    </wire>
    <wire loc="302:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioCCA" scoped="" ref="0x7f00c97eabf0"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7f00c957d5c0"/></to>
    </wire>
    <wire loc="79:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f00c957d5c0"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7f00c9556c40"/></to>
    </wire>
    <wire loc="307:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c95bec00"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c956fa40"/></to>
    </wire>
    <wire loc="308:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f00c95bdcd0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f00c95b6590"/></to>
    </wire>
    <wire loc="311:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7f00c95bcb00"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f00c95b79b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f00c95954a0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f00c957dd90"/></to>
    </wire>
    <wire loc="326:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f00c9587b40"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7f00c9c72860"/></to>
    </wire>
    <wire loc="327:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c9589440"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f00c957f460"/></to>
    </wire>
    <wire loc="77:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f00c957f460"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f00c9557aa0"/></to>
    </wire>
    <wire loc="328:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c9589d70"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f00c957fdd0"/></to>
    </wire>
    <wire loc="78:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f00c957fdd0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f00c9556480"/></to>
    </wire>
    <wire loc="329:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubState" scoped="" ref="0x7f00c958a410"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f00c9582610"/></to>
    </wire>
    <wire loc="76:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f00c9582610"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f00c9558c40"/></to>
    </wire>
    <wire loc="341:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f00c95681f0"/></from>
      <to><interface-ref name="RF230DriverConfig" scoped="" ref="0x7f00c9c981c0"/></to>
    </wire>
    <wire loc="342:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f00c95672e0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c95c2020"/></to>
    </wire>
    <wire loc="349:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f00c9563110"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f00c95b79b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="350:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7f00c9563ca0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f00c95b79b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="351:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f00c95628d0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f00c95b79b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="352:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9561470"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9bbe020"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="353:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f00c9560110"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f00c9ec8e50"/></to>
    </wire>
    <wire loc="46:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f00c9ca3da0"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f00c90b53b0"/></to>
    </wire>
    <wire loc="96:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9e790e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c8aaa850"/></to>
    </wire>
    <wire loc="120:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9e790e0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9558600"/></to>
    </wire>
    <wire loc="53:../../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9e790e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c9790b50"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9e790e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c9854080"/></to>
    </wire>
    <wire loc="57:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9e790e0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c8c01760"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9e790e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c8c30b60"/></to>
    </wire>
    <wire loc="96:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9e790e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c8cf5460"/></to>
    </wire>
    <wire loc="47:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9e790e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c90b6080"/></to>
    </wire>
    <wire loc="67:../../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f00c9cb1470"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f00ca0fb510"/></to>
    </wire>
    <wire loc="53:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f00ca0fb510"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f00ca02e8a0"/></to>
    </wire>
    <wire loc="78:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f00c9cb0020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f00c944b680"/></to>
    </wire>
    <wire loc="123:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f00c9cb0020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f00c955aa60"/></to>
    </wire>
    <wire loc="68:../../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f00c9cb0020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c9e75020"/></to>
    </wire>
    <wire loc="58:../../../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f00c9e75020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c9e6c380"/></to>
    </wire>
    <wire loc="71:../../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9cb0720"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9e790e0"/></to>
    </wire>
    <wire loc="26:../../../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f00c9e73020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c92a1b50"/></to>
    </wire>
    <wire loc="59:../../../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f00c9e6e1d0"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f00c9cd6960"/></to>
    </wire>
    <wire loc="61:../../../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x7f00c9e68180"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c9cd62f0"/></to>
    </wire>
    <wire loc="62:../../../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f00c9e6ca60"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f00c9e72af0"/></to>
    </wire>
    <wire loc="46:../../../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f00c9e72af0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f00c9e61660"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f00c9e641f0"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7f00c9e73020"/></to>
    </wire>
    <wire loc="48:../../../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x7f00c9e5ab90"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x7f00c9e4e060"/></to>
    </wire>
    <wire loc="141:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x7f00c9e4e060"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f00c9dc3da0"/></to>
    </wire>
    <wire loc="49:../../../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f00c9e60e60"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7f00c9e641f0"/></to>
    </wire>
    <wire loc="191:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x7f00c9e18cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c9d29160"/></to>
    </wire>
    <wire loc="165:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x7f00c9e344e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f00c9d972b0"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f00c9d972b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f20e20"/></to>
    </wire>
    <wire loc="176:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x7f00c9e28350"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f00c9d868f0"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f00c9d868f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8eae3f0"/></to>
    </wire>
    <wire loc="185:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x7f00c9e1fcb0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f00c9d77c10"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f00c9d77c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8e433f0"/></to>
    </wire>
    <wire loc="196:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG5" scoped="" ref="0x7f00c9e11060"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c9d0f6d0"/></to>
    </wire>
    <wire loc="143:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x7f00c9e4c670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f00c9dc02b0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f00c9dc02b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c9050e20"/></to>
    </wire>
    <wire loc="183:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x7f00c9e21670"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f00c9d798f0"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f00c9d798f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8e4ae20"/></to>
    </wire>
    <wire loc="146:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x7f00c9e4acb0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f00c9db8a20"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f00c9db8a20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8ff9c90"/></to>
    </wire>
    <wire loc="157:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x7f00c9e3ecb0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f00c9da6020"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f00c9da6020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f870a0"/></to>
    </wire>
    <wire loc="168:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x7f00c9e31e40"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f00c9d94760"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f00c9d94760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f166d0"/></to>
    </wire>
    <wire loc="179:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x7f00c9e25cb0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f00c9d83da0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f00c9d83da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8ea5e20"/></to>
    </wire>
    <wire loc="138:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x7f00c9e52800"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f00c9dc68f0"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f00c9dc68f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c9061e20"/></to>
    </wire>
    <wire loc="149:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x7f00c9e46670"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f00c9db4020"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f00c9db4020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8fef3f0"/></to>
    </wire>
    <wire loc="160:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x7f00c9e3a670"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f00c9da25d0"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f00c9da25d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f7e9b0"/></to>
    </wire>
    <wire loc="171:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x7f00c9e2d670"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f00c9d91c10"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f00c9d91c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f0c0a0"/></to>
    </wire>
    <wire loc="188:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x7f00c9e1a670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f00c9d732b0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f00c9d732b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8e3ae20"/></to>
    </wire>
    <wire loc="194:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x7f00c9e14b20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c9d19160"/></to>
    </wire>
    <wire loc="174:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x7f00c9e2bcb0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f00c9d885d0"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f00c9d885d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8eb5e20"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f00c9dc3da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c90576d0"/></to>
    </wire>
    <wire loc="152:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x7f00c9e42020"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f00c9db15d0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f00c9db15d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8fe6e20"/></to>
    </wire>
    <wire loc="192:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x7f00c9e164e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c9d24c90"/></to>
    </wire>
    <wire loc="155:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x7f00c9e40670"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f00c9da9d30"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f00c9da9d30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f8ec90"/></to>
    </wire>
    <wire loc="166:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x7f00c9e33800"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f00c9d96440"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f00c9d96440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f1c0a0"/></to>
    </wire>
    <wire loc="177:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x7f00c9e27670"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f00c9d85a80"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f00c9d85a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8eab6d0"/></to>
    </wire>
    <wire loc="186:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x7f00c9e1c020"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f00c9d76da0"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f00c9d76da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8e406d0"/></to>
    </wire>
    <wire loc="144:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x7f00c9e4b990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f00c9dbf440"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f00c9dbf440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c904c0a0"/></to>
    </wire>
    <wire loc="147:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x7f00c9e48020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f00c9db7c10"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f00c9db7c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8ff6e20"/></to>
    </wire>
    <wire loc="158:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x7f00c9e3c020"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f00c9da52b0"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f00c9da52b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f843f0"/></to>
    </wire>
    <wire loc="169:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x7f00c9e2f060"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f00c9d938f0"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f00c9d938f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f139b0"/></to>
    </wire>
    <wire loc="180:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x7f00c9e23020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f00c9d81020"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f00c9d81020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8ea10a0"/></to>
    </wire>
    <wire loc="139:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x7f00c9e51b20"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f00c9dc5a80"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f00c9dc5a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c905d0a0"/></to>
    </wire>
    <wire loc="150:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x7f00c9e45990"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f00c9db32b0"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f00c9db32b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8fec6d0"/></to>
    </wire>
    <wire loc="161:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x7f00c9e38990"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f00c9da1760"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f00c9da1760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f7be20"/></to>
    </wire>
    <wire loc="189:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x7f00c9e19990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f00c9d71440"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f00c9d71440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8e360a0"/></to>
    </wire>
    <wire loc="164:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x7f00c9e35020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f00c9d99020"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f00c9d99020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f23c90"/></to>
    </wire>
    <wire loc="175:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x7f00c9e29020"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f00c9d87760"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f00c9d87760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8eb10a0"/></to>
    </wire>
    <wire loc="184:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x7f00c9e20990"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f00c9d78a80"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f00c9d78a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8e460a0"/></to>
    </wire>
    <wire loc="195:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x7f00c9e13e40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c9d14c90"/></to>
    </wire>
    <wire loc="142:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x7f00c9e4d350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f00c9dc1020"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f00c9dc1020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c90549b0"/></to>
    </wire>
    <wire loc="153:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x7f00c9e41350"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f00c9daf760"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f00c9daf760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8fe10a0"/></to>
    </wire>
    <wire loc="182:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x7f00c9e22350"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f00c9d7a7a0"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f00c9d7a7a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8e4dc90"/></to>
    </wire>
    <wire loc="156:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x7f00c9e3f990"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f00c9da8e60"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f00c9da8e60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f8be20"/></to>
    </wire>
    <wire loc="167:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x7f00c9e32b20"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f00c9d955d0"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f00c9d955d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f193f0"/></to>
    </wire>
    <wire loc="178:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x7f00c9e26990"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f00c9d84c10"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f00c9d84c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8ea89b0"/></to>
    </wire>
    <wire loc="187:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x7f00c9e1b350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f00c9d74020"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f00c9d74020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8e3d9b0"/></to>
    </wire>
    <wire loc="137:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x7f00c9e62540"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f00c9dc76b0"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f00c9dc76b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c9064a20"/></to>
    </wire>
    <wire loc="148:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x7f00c9e47350"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f00c9db6da0"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f00c9db6da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8ff20a0"/></to>
    </wire>
    <wire loc="159:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x7f00c9e3b350"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f00c9da3440"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f00c9da3440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f816d0"/></to>
    </wire>
    <wire loc="170:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x7f00c9e2e350"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f00c9d92a80"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f00c9d92a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f10e20"/></to>
    </wire>
    <wire loc="193:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x7f00c9e15800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c9d1f6d0"/></to>
    </wire>
    <wire loc="173:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x7f00c9e2c990"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f00c9d893f0"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f00c9d893f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8eb8c90"/></to>
    </wire>
    <wire loc="162:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x7f00c9e37cb0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f00c9da08f0"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f00c9da08f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8f760a0"/></to>
    </wire>
    <wire loc="140:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x7f00c9e50e40"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f00c9dc4c10"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f00c9dc4c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c905a3f0"/></to>
    </wire>
    <wire loc="151:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x7f00c9e44cb0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f00c9db2440"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f00c9db2440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f00c8fe99b0"/></to>
    </wire>
    <wire loc="54:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca02d850"/></to>
    </wire>
    <wire loc="55:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f00ca028c90"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f00ca044140"/></to>
    </wire>
    <wire loc="92:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f00ca0099e0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f00c96cda70"/></to>
    </wire>
    <wire loc="55:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9bbe020"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c8d68020"/></to>
    </wire>
    <wire loc="56:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f00c8d67020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f00c9bbdb60"/></to>
    </wire>
    <wire loc="57:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f00c8d63150"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f00c9bbecb0"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f00c8d448b0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f00c9b2d260"/></to>
    </wire>
    <wire loc="68:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f00c8d47a30"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f00c9b10a30"/></to>
    </wire>
    <wire loc="69:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c8d468f0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f00c9b0e8f0"/></to>
    </wire>
    <wire loc="70:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c8d452b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f00c9b0d2b0"/></to>
    </wire>
    <wire loc="71:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f00c8d458c0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f00c9b0d8c0"/></to>
    </wire>
    <wire loc="99:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f00c9a92150"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f00c8cf2850"/></to>
    </wire>
    <wire loc="100:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f00c9a928d0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f00c8cf1020"/></to>
    </wire>
    <wire loc="101:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f00c8cf1910"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f00c9a911f0"/></to>
    </wire>
    <wire loc="103:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f00c8cef120"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f00c8cf5a70"/></to>
    </wire>
    <wire loc="68:../../../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f00c8cefc20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f00c8c83a70"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f00c9b2d260"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f00c8c825d0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f00c997d500"/></to>
    </wire>
    <wire loc="62:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c8c81440"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f00c997c440"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f00c8c2ee80"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f00c9946720"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f00c8c2dab0"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f00c9945400"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c8c2f310"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f00c9949a70"/></to>
    </wire>
    <wire loc="67:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c8c2fc40"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f00c9947440"/></to>
    </wire>
    <wire loc="68:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="UniqueConfig" scoped="" ref="0x7f00c8c2e400"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f00c9947be0"/></to>
    </wire>
    <wire loc="118:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7f00c9930d90"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9931720"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f00c8bfe590"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f00c989c020"/></to>
    </wire>
    <wire loc="65:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f00c8bff670"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f00c989caa0"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f00c8bfd060"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f00c989b8b0"/></to>
    </wire>
    <wire loc="67:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f00c8bfd950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f00c989a270"/></to>
    </wire>
    <wire loc="189:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0x7f00c8bfb940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="144:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="stateDoneTask" scoped="" ref="0x7f00c8bfa160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="deliverTask" scoped="" ref="0x7f00c8bfb160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f00c8bc2820"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f00c9843310"/></to>
    </wire>
    <wire loc="58:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f00c8bbf020"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f00c98410a0"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f00c8bc12b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f00c9843c40"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c8bc1a10"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9842400"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f00c8bc0720"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f00c985aa20"/></to>
    </wire>
    <wire loc="56:../../../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f00c985aa20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f00c9853a20"/></to>
    </wire>
    <wire loc="78:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <from><interface-ref name="calcNextRandom" scoped="" ref="0x7f00c8bbfb20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7f00c9857920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7f00c9854940"/></to>
    </wire>
    <wire loc="54:../../../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f00c985e9b0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c9854080"/></to>
    </wire>
    <wire loc="76:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f00c97f4ac0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f00c97ed120"/></to>
    </wire>
    <wire loc="73:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f00c97ef400"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7f00c97eabf0"/></to>
    </wire>
    <wire loc="70:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f00c97f2470"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7f00c97ecbe0"/></to>
    </wire>
    <wire loc="74:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f00c97efb60"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f00c97e9440"/></to>
    </wire>
    <wire loc="80:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f00c97eea80"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f00c97e82b0"/></to>
    </wire>
    <wire loc="78:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f00c97f3e80"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7f00c97ec5d0"/></to>
    </wire>
    <wire loc="77:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f00c97f3590"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7f00c97edbe0"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f00c8b6acd0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f00c95bdcd0"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c8b6da70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c95bec00"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f00c8b6cc40"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f00c9791080"/></to>
    </wire>
    <wire loc="26:../../../../tos/system/LocalTimeMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f00c9791080"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f00c977d7d0"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7f00c8b6ee60"/></from>
      <to><interface-ref name="TimeStampFlag" scoped="" ref="0x7f00c95bcb00"/></to>
    </wire>
    <wire loc="65:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f00c977d7d0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f00c95e2790"/></to>
    </wire>
    <wire loc="61:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f00c978c3f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f00c95f1150"/></to>
    </wire>
    <wire loc="59:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f00c9790b50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c9777020"/></to>
    </wire>
    <wire loc="35:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f00c9777020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c966f080"/></to>
    </wire>
    <wire loc="62:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f00c95eb640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f00c9640cf0"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f00c963a1d0"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x7f00c9777a10"/></to>
    </wire>
    <wire loc="36:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x7f00c9777a10"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f00c966f890"/></to>
    </wire>
    <wire loc="66:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f00c95e1a60"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x7f00c9772020"/></to>
    </wire>
    <wire loc="37:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x7f00c9772020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f00c966bbc0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f00c966bbc0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f00c8b448d0"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f00c966f080"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c8b49c20"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f00c966f890"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f00c8b484b0"/></to>
    </wire>
    <wire loc="74:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f00c8b41bc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f00c96e9c60"/></to>
    </wire>
    <wire loc="94:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f00c96e9c60"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f00c96d7020"/></to>
    </wire>
    <wire loc="75:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f00c8b3ce20"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f00c96e1020"/></to>
    </wire>
    <wire loc="95:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f00c96e1020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f00c96d22b0"/></to>
    </wire>
    <wire loc="76:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f00c8b3a0a0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f00c96e0520"/></to>
    </wire>
    <wire loc="96:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f00c96e0520"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f00c96d16b0"/></to>
    </wire>
    <wire loc="77:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7f00c8b36450"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7f00c96dda40"/></to>
    </wire>
    <wire loc="97:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7f00c96dda40"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7f00c96cc230"/></to>
    </wire>
    <wire loc="74:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f00c9636490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f00c95e6a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f00c95cf2e0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f00c978c3f0"/></to>
    </wire>
    <wire loc="76:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f00c95920e0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f00c958c920"/></to>
    </wire>
    <wire loc="73:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f00c958fb60"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7f00c95885a0"/></to>
    </wire>
    <wire loc="74:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f00c958e400"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f00c9588d40"/></to>
    </wire>
    <wire loc="80:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f00c958c2b0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f00c9587b40"/></to>
    </wire>
    <wire loc="78:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f00c9591590"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7f00c958bd70"/></to>
    </wire>
    <wire loc="77:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f00c9592b60"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7f00c958b440"/></to>
    </wire>
    <wire loc="75:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f00c9454ac0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f00c92576e0"/></to>
    </wire>
    <wire loc="92:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f00c9576940"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f00c954d020"/></to>
    </wire>
    <wire loc="81:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c944f020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f00c924f3a0"/></to>
    </wire>
    <wire loc="84:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f00c9535b50"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f00c95681f0"/></to>
    </wire>
    <wire loc="87:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f00c9534a10"/></from>
      <to><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f00c9563110"/></to>
    </wire>
    <wire loc="90:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7f00c95336a0"/></from>
      <to><interface-ref name="RSSIFlag" scoped="" ref="0x7f00c9563ca0"/></to>
    </wire>
    <wire loc="93:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f00c95323a0"/></from>
      <to><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f00c95628d0"/></to>
    </wire>
    <wire loc="96:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f00c9531200"/></from>
      <to><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f00c95672e0"/></to>
    </wire>
    <wire loc="99:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f00c953c9d0"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c944f020"/></to>
    </wire>
    <wire loc="102:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c952db70"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9561470"/></to>
    </wire>
    <wire loc="104:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7f00c9546020"/></from>
      <to><interface-ref name="SELN" scoped="" ref="0x7f00c945d940"/></to>
    </wire>
    <wire loc="69:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7f00c945d940"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7f00c9e4acb0"/></to>
    </wire>
    <wire loc="105:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f00c9545380"/></from>
      <to><interface-ref name="SpiResource" scoped="" ref="0x7f00c945ab50"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f00c945ab50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f00c942ca60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f00c953f270"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f00c9458920"/></to>
    </wire>
    <wire loc="64:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f00c9458920"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f00c942d020"/></to>
    </wire>
    <wire loc="108:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7f00c953fdd0"/></from>
      <to><interface-ref name="SLP_TR" scoped="" ref="0x7f00c94574e0"/></to>
    </wire>
    <wire loc="67:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7f00c94574e0"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x7f00c9e41350"/></to>
    </wire>
    <wire loc="109:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f00c9542020"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7f00c94567f0"/></to>
    </wire>
    <wire loc="68:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f00c94567f0"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x7f00c9e4c670"/></to>
    </wire>
    <wire loc="111:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7f00c9539b10"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7f00c9455b10"/></to>
    </wire>
    <wire loc="57:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7f00c9455b10"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7f00c944e9c0"/></to>
    </wire>
    <wire loc="112:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f00c952d080"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f00c9560110"/></to>
    </wire>
    <wire loc="113:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f00c95364d0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f00c91fd9a0"/></to>
    </wire>
    <wire loc="856:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <from><interface-ref name="releaseSpi" scoped="" ref="0x7f00c949ce40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:../../../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f00c92576e0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f00c8a68e10"/></to>
    </wire>
    <wire loc="95:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f00c942d020"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f00c941f480"/></to>
    </wire>
    <wire loc="48:../../../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f00c924f3a0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f00c9208b60"/></to>
    </wire>
    <wire loc="59:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortCLKM" scoped="" ref="0x7f00c943f3d0"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x7f00c9e2e350"/></to>
    </wire>
    <wire loc="60:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortIRQ" scoped="" ref="0x7f00c943e680"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x7f00c9e31e40"/></to>
    </wire>
    <wire loc="72:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f00c94427f0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f00c9350850"/></to>
    </wire>
    <wire loc="91:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f00c9350850"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f00c93369e0"/></to>
    </wire>
    <wire loc="96:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f00c9423c80"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f00c941e020"/></to>
    </wire>
    <wire loc="94:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f00c942b840"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f00c9420e00"/></to>
    </wire>
    <wire loc="92:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f00c942e1f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f00c94207e0"/></to>
    </wire>
    <wire loc="97:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f00c942ca60"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f00c9365900"/></to>
    </wire>
    <wire loc="98:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f00c9365900"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f00c8aa7d80"/></to>
    </wire>
    <wire loc="99:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f00c9362730"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f00c941ed70"/></to>
    </wire>
    <wire loc="100:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Spi" scoped="" ref="0x7f00c9402800"/></from>
      <to><interface-ref name="SpiBus" scoped="" ref="0x7f00c93c1710"/></to>
    </wire>
    <wire loc="83:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SpiBus" scoped="" ref="0x7f00c93c1710"/></from>
      <to><interface-ref name="SPI" scoped="" ref="0x7f00c93b96b0"/></to>
    </wire>
    <wire loc="101:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7f00c9400620"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f00ca00ba50"/></to>
    </wire>
    <wire loc="294:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <from><interface-ref name="zeroTask" scoped="" ref="0x7f00c93e0de0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="Mcu" scoped="" ref="0x7f00c93af060"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f00ca00ba50"/></to>
    </wire>
    <wire loc="86:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SS" scoped="" ref="0x7f00c93b56c0"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7f00c9e4acb0"/></to>
    </wire>
    <wire loc="87:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x7f00c93b4970"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x7f00c9e48020"/></to>
    </wire>
    <wire loc="88:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MOSI" scoped="" ref="0x7f00c93b2b20"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x7f00c9e47350"/></to>
    </wire>
    <wire loc="89:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MISO" scoped="" ref="0x7f00c93b1e30"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x7f00c9e46670"/></to>
    </wire>
    <wire loc="99:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f00c93646c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f00c8aa6b40"/></to>
    </wire>
    <wire loc="100:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f00c9364e40"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f00c8aa5400"/></to>
    </wire>
    <wire loc="101:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f00c8aa5cf0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f00c9362730"/></to>
    </wire>
    <wire loc="103:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f00c8aa4500"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f00c8aaae60"/></to>
    </wire>
    <wire loc="68:../../../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f00c8aa3060"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f00c9351020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f00c93372c0"/></to>
    </wire>
    <wire loc="89:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f00c935bbf0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f00c933c020"/></to>
    </wire>
    <wire loc="93:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f00c9345ad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7f00c93315a0"/></to>
    </wire>
    <wire loc="94:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f00c9345ad0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7f00c932dba0"/></to>
    </wire>
    <wire loc="95:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f00c9345ad0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7f00c9328120"/></to>
    </wire>
    <wire loc="43:../../../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f00c8a64140"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f00c935bbf0"/></to>
    </wire>
    <wire loc="44:../../../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f00c8a5f570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f00c9345ad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="27:../../../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f00c9294410"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f00c935bbf0"/></to>
    </wire>
    <wire loc="49:../../../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f00c9207e40"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f00c9229cf0"/></to>
    </wire>
    <wire loc="50:../../../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f00c920c0f0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f00c924b200"/></to>
    </wire>
    <wire loc="31:../../../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f00c924b200"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f00c9245020"/></to>
    </wire>
    <wire loc="32:../../../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f00c9232280"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f00c935bbf0"/></to>
    </wire>
    <wire loc="63:../../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f00c8a2d540"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f00c8a1f940"/></to>
    </wire>
    <wire loc="65:../../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f00c9113dc0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f00c8a2c270"/></to>
    </wire>
    <wire loc="64:../../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f00c8a2c270"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f00c9f61180"/></to>
    </wire>
    <wire loc="66:../../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f00c9112a10"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f00c8a2ce80"/></to>
    </wire>
    <wire loc="65:../../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f00c8a2ce80"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f00c9f501e0"/></to>
    </wire>
    <wire loc="67:../../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f00c9110120"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f00c8a295d0"/></to>
    </wire>
    <wire loc="66:../../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f00c8a295d0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9f494c0"/></to>
    </wire>
    <wire loc="60:../../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f00c8a1e5f0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f00c91732c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f00c8a1d270"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f00c9f501e0"/></to>
    </wire>
    <wire loc="53:../../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f00c91732c0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f00c9129b00"/></to>
    </wire>
    <wire loc="54:../../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f00c9128a40"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f00c9fa94f0"/></to>
    </wire>
    <wire loc="55:../../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f00c9127720"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f00c9f501e0"/></to>
    </wire>
    <wire loc="56:../../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f00c9126d60"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f00c9f61180"/></to>
    </wire>
    <wire loc="169:../../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f00c9125a90"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f00c91242f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="ActiveMessageC" loc="37:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <documentation loc="106:../../../../tos/platforms/iris/chips/rf230/RadioConfig.h">
        <short>&#10; The base two logarithm of the number of radio alarm ticks per one millisecond&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="RF230ActiveMessageC" loc="41:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC" loc="37:../../../../tos/chips/rf230/RF230RadioC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC.TaskletC" loc="42(RF230RadioC.TaskletC):../../../../tos/lib/rfxlink/util/TaskletC.nc">
      <instance number="0">
        <component-ref qname="TaskletC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC" loc="35(RF230RadioC.NeighborhoodC):../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC.NeighborhoodP" loc="37(RF230RadioC.NeighborhoodC.NeighborhoodP):../../../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MainC" loc="56:../../../../tos/system/MainC.nc">
      <documentation loc="1:../../../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:../../../../tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:../../../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:../../../../tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:../../../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../../tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:../../../../tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:../../../../tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:../../../../tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="40:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <documentation loc="34:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G5" loc="42(HplAtm128GeneralIOC.G5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="56:../../../../tos/platforms/iris/MeasureClockC.nc">
      <documentation loc="47:../../../../tos/platforms/iris/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="80:../../../../tos/chips/atm1281/McuSleepC.nc" safe="">
      <documentation loc="65:../../../../tos/chips/atm1281/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.6 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @date   October 30, 2007&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioP" loc="39:../../../../tos/chips/rf230/RF230RadioP.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC" loc="37(RF230RadioC.RadioAlarmC):../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC.RadioAlarmP" loc="50(RF230RadioC.RadioAlarmC.RadioAlarmP):../../../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC" loc="35(RF230RadioC.ActiveMessageLayerC):../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP" loc="38(RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP):../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.AutoResourceAcquireLayerC" loc="35(RF230RadioC.AutoResourceAcquireLayerC):../../../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <instance number="0">
        <component-ref qname="AutoResourceAcquireLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC" loc="83(RF230RadioC.SendResourceC):../../../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:RADIO_SEND_RESOURCE">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Queue" loc="42(RF230RadioC.SendResourceC.Queue):../../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Arbiter" loc="49(RF230RadioC.SendResourceC.Arbiter):../../../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154MessageLayerC" loc="35(RF230RadioC.Ieee154MessageLayerC):../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154MessageLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TinyosNetworkLayerC" loc="50(RF230RadioC.TinyosNetworkLayerC):../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <instance number="0">
        <component-ref qname="TinyosNetworkLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC" loc="35(RF230RadioC.Ieee154PacketLayerC):../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP" loc="37(RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP):../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC" loc="35(RF230RadioC.UniqueLayerC):../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC.UniqueLayerP" loc="37(RF230RadioC.UniqueLayerC.UniqueLayerP):../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.PacketLinkLayerC" loc="73(RF230RadioC.PacketLinkLayerC):../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <documentation loc="64:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketLinkLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC" loc="35(RF230RadioC.LowPowerListeningLayerC):../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP" loc="35(RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP):../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC" loc="35(RF230RadioC.MessageBufferLayerC):../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP" loc="39(RF230RadioC.MessageBufferLayerC.MessageBufferLayerP):../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC" loc="35(RF230RadioC.CollisionAvoidanceLayerC):../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP" loc="38(RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP):../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="43:../../../../tos/system/RandomC.nc">
      <documentation loc="33:../../../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.SoftwareAckLayerC" loc="38(RF230RadioC.SoftwareAckLayerC):../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <instance number="0">
        <component-ref qname="SoftwareAckLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CsmaLayerC" loc="35(RF230RadioC.CsmaLayerC):../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="0">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC" loc="37(RF230RadioC.TimeStampingLayerC):../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP" loc="38(RF230RadioC.TimeStampingLayerC.TimeStampingLayerP):../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMilliC" loc="19:../../../../tos/system/LocalTimeMilliC.nc">
      <documentation loc="11:../../../../tos/system/LocalTimeMilliC.nc">
        <short>&#10; Provide current time via the LocalTime&#60;TMilli> interface.</short>
        <long>&#10; Provide current time via the LocalTime&#60;TMilli> interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:../../../../tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC):../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="45:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP):../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <documentation loc="45:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm1281AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f00c9769070"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm1281Timer2AsyncC" loc="77:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <documentation loc="66:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer2AsyncP" loc="78:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc" safe="">
      <documentation loc="65:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
        <short>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 2 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MetadataFlagsLayerC" loc="38(RF230RadioC.MetadataFlagsLayerC):../../../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <instance number="0">
        <component-ref qname="MetadataFlagsLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TrafficMonitorLayerC" loc="35(RF230RadioC.TrafficMonitorLayerC):../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="1">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230DriverLayerC" loc="38:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <configuration/>
    </component>
    <component qname="RF230DriverLayerP" loc="42:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <module/>
    </component>
    <component qname="HplRF230C" loc="37:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <configuration/>
    </component>
    <component qname="HplRF230P" loc="35:../../../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <module/>
    </component>
    <component qname="Atm128SpiC" loc="80:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <documentation loc="66:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
        <short>&#10; The HAL of the SPI bus on the atm128.</short>
        <long>&#10; The HAL of the SPI bus on the atm128.&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiC.nc,v 1.7 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10; @author Joe Polastre&#10; @date   September 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128SpiP" loc="89:../../../../tos/chips/atm128/spi/Atm128SpiP.nc" safe="">
      <documentation loc="67:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
        <short>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.</short>
        <long>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.  This module assumes the bus has been reserved and&#10; checks that the bus owner is in fact the person using the bus.&#10; SpiPacket provides an asynchronous send interface where the&#10; transmit data length is equal to the receive data length, while&#10; SpiByte provides an interface for sending a single byte&#10; synchronously. SpiByte allows a component to send a few bytes&#10; in a simple fashion: if more than a handful need to be sent,&#10; SpiPacket should be used.&#10;&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiP.nc,v 1.12 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128SpiC" loc="75:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <documentation loc="63:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
        <short>&#10; Configuration encapsulating the basic SPI HPL for the atm128.</short>
        <long>&#10; Configuration encapsulating the basic SPI HPL for the atm128.&#10;&#10; &#60;pre>&#10; $Id: HplAtm128SpiC.nc,v 1.5 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128SpiP" loc="73:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc" safe="">
      <documentation loc="63:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
        <short>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.</short>
        <long>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter" loc="83(Atm128SpiC.Arbiter):../../../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128SpiC.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Queue" loc="42(Atm128SpiC.Arbiter.Queue):../../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Arbiter" loc="49(Atm128SpiC.Arbiter.Arbiter):../../../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer1C" loc="75:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <documentation loc="67:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer1P" loc="75:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc" safe="">
      <documentation loc="66:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC" loc="28(HplRF230C.AlarmC):../../../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="InitOneP.InitOne" loc="44(InitOneP.InitOne):../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC.NAlarm" loc="51(HplRF230C.AlarmC.NAlarm):../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TOne" ref="0x7f00ca032410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC" loc="37:../../../../tos/platforms/iris/LocalTimeMicroC.nc">
      <configuration/>
    </component>
    <component qname="CounterOne16C" loc="22:../../../../tos/platforms/mica/CounterOne16C.nc">
      <documentation loc="11:../../../../tos/platforms/mica/CounterOne16C.nc">
        <short>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C.NCounter" loc="42(CounterOne16C.NCounter):../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TOne" ref="0x7f00ca032410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.TransformCounterC" loc="54(LocalTimeMicroC.TransformCounterC):../../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f00ca075180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f00ca075180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.CounterToLocalTimeC" loc="46(LocalTimeMicroC.CounterToLocalTimeC):../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f00ca075180"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="34:../../../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <module/>
    </component>
    <component qname="SendingMoteAppC.RssiMsgSender" loc="47(SendingMoteAppC.RssiMsgSender):../../../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SendingMoteAppC.RssiMsgSender.SenderC" loc="47(SendingMoteAppC.RssiMsgSender.SenderC):../../../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SendingMoteAppC.RssiMsgSender.SenderC.AMQueueEntryP" loc="43(SendingMoteAppC.RssiMsgSender.SenderC.AMQueueEntryP):../../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SendingMoteAppC.SendTimer" loc="44(SendingMoteAppC.SendTimer):../../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="SendingMoteC" loc="39:SendingMoteC.nc">
      <documentation loc="32:../RssiDemoMessages.h">
        <short>&#10; </short>
        <long>&#10; @author Dimas Abreu Dutra&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TaskletC" loc="42:../../../../tos/lib/rfxlink/util/TaskletC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="NeighborhoodC" loc="35:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7f00c9eb97e0" loc="35:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
          <component-ref qname="NeighborhoodC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="NeighborhoodP" loc="37:../../../../tos/lib/rfxlink/util/NeighborhoodP.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7f00c9ea8020" loc="37:../../../../tos/lib/rfxlink/util/NeighborhoodP.nc">
          <component-ref qname="NeighborhoodP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f00c9e0e590" loc="40:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f00c9e0e900" loc="40:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f00c9e0ec70" loc="40:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f00c9e009e0" loc="41:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f00c9e00d70" loc="42:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f00c9dfd170" loc="43:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f00c9dfd4c0" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f00c9d690d0" loc="42:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f00c9d69460" loc="43:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f00c9d697f0" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f00c9d69b40" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="RadioAlarmC" loc="37:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RadioAlarmP" loc="50:../../../../tos/lib/rfxlink/util/RadioAlarmP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ActiveMessageLayerC" loc="35:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ActiveMessageLayerP" loc="38:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AutoResourceAcquireLayerC" loc="35:../../../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleFcfsArbiterC" loc="83:../../../../tos/system/SimpleFcfsArbiterC.nc" abstract="">
      <documentation loc="62:../../../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f00c9af1590" loc="83:../../../../tos/system/SimpleFcfsArbiterC.nc">
          <component-ref qname="SimpleFcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f00c9ae3060" loc="42:../../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154MessageLayerC" loc="35:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TinyosNetworkLayerC" loc="50:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154PacketLayerC" loc="35:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Ieee154PacketLayerP" loc="37:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="UniqueLayerC" loc="35:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7f00c9978830" loc="35:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
          <component-ref qname="UniqueLayerC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="UniqueLayerP" loc="37:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7f00c996c020" loc="37:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
          <component-ref qname="UniqueLayerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="PacketLinkLayerC" loc="73:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc" abstract="">
      <documentation loc="64:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyC" loc="35:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyP" loc="35:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="MessageBufferLayerC" loc="35:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="MessageBufferLayerP" loc="39:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RandomCollisionLayerC" loc="35:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RandomCollisionLayerP" loc="38:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SoftwareAckLayerC" loc="38:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="DummyLayerC" loc="35:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerC" loc="37:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerP" loc="38:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="58:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="45:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7f00c9769070" loc="58:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f00c9769070"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7f00c9769380" loc="58:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm1281AlarmAsyncP" loc="58:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="45:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7f00c9760d20" loc="58:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f00c9760d20"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7f00c975d060" loc="58:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f00c9664430" loc="46:../../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f00c9664430"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f00c9634870" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f00c9634870"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f00c9634ba0" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f00c95e4de0" loc="46:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f00c95e4de0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="MetadataFlagsLayerC" loc="38:../../../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmOne16C" loc="28:../../../../tos/platforms/mica/AlarmOne16C.nc" abstract="">
      <documentation loc="11:../../../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128TimerInitC" loc="44:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7f00c92a0290" loc="44:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f00c92a0290"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x7f00c92a0600" loc="44:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmC" loc="51:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f00c92a4d60" loc="51:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f00c92a4d60"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7f00c928b580" loc="52:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f00c928b580"/></type-var>
        </typedef>
        <constant name="mindt" ref="0x7f00c928b8a0" loc="53:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="42:../../../../tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f00c9247910" loc="42:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f00c9247910"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7f00c9244120" loc="43:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f00c9244120"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f00c9228600" loc="55:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f00c9228600"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f00c9228dd0" loc="56:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f00c9228dd0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f00c9227220" loc="57:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f00c9227220"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f00c9227a00" loc="58:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f00c9227a00"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f00c9227dd0" loc="59:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f00c9226630" loc="60:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f00c9226630"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f00c91a2c30" loc="47:../../../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f00c919b820" loc="47:../../../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f00c91912e0" loc="43:../../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f00c9170630" loc="45:../../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="1" name="SplitControl" ref="0x7f00c9faa080" loc="41:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f00c9faa080"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f00c9faa400"/>
        <function-ref name="stopDone" scoped="" ref="0x7f00c9faa590"/>
        <function-ref name="start" scoped="" ref="0x7f00c9faa720"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9faa8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f00c9f6a8b0" loc="46:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9f6a8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f00c9f6ac30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f00c9f61180" loc="48:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f00c9f61180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9f61500"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9f61690"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9f61820"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9f619b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9f61b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f00c9fa94f0" loc="43:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f00c9fa94f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9fa9870"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9fa9a00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9fa9b90"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9fa9d20"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9fa5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f00c9f701d0" loc="45:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f00c9f701d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9f70550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f00c9f45dd0" loc="52:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c9f45dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f00c9f4c180"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f00c9f4c310"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f00c9f4c4a0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f00c9f4c630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f00c9f73470" loc="44:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f00c9f73470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9f737f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f00c9f494c0" loc="51:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9f494c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f00c9f49840"/>
        <function-ref name="noAck" scoped="" ref="0x7f00c9f499d0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f00c9f49b60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f00c9f48020" loc="53:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f00c9f48020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f00c9f483a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f00c9f48530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f00c9f486c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f00c9f48850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f00c9f489e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f00c9f501e0" loc="49:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f00c9f501e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f00c9f50560"/>
        <function-ref name="source" scoped="" ref="0x7f00c9f506f0"/>
        <function-ref name="address" scoped="" ref="0x7f00c9f50880"/>
        <function-ref name="destination" scoped="" ref="0x7f00c9f50a10"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c9f50ba0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c9f50d30"/>
        <function-ref name="type" scoped="" ref="0x7f00c9f6b020"/>
        <function-ref name="setType" scoped="" ref="0x7f00c9f6b1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c9f6b340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f00c9f6b4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f00c9f6b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f00c9f39d40" loc="54:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f00c9f39d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f00c9f440e0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c9f44270"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c9f44400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMicro" ref="0x7f00c9f36d70" loc="56:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7f00c9f36d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f00ca075180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c9f38330"/>
        <function-ref name="clear" scoped="" ref="0x7f00c9f38a60"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c9f3cba0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9f2f210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f00c9f2fe60" loc="57:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c9f2fe60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c9f2d500"/>
        <function-ref name="clear" scoped="" ref="0x7f00c9f2dc30"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c9f2eda0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9f2b3b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f00c9f2a610" loc="45:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f00c9f2a610"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f00c9f2a990"/>
        <function-ref name="stopDone" scoped="" ref="0x7f00c9f2ab20"/>
        <function-ref name="start" scoped="" ref="0x7f00c9f2acb0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9f2ae40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f00c9f14c40" loc="62:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f00c9f14c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9f113c0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9f12df0"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c9f128a0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9f11910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f00c9f24020" loc="50:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9f24020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f00c9f243a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f00c9f24630" loc="52:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f00c9f24630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9f249b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9f24b40"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9f24cd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9f24e60"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9f22020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f00c9f27640" loc="47:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f00c9f27640"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9f279c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9f27b50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9f27ce0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9f27e70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9f26030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f00c9f25430" loc="49:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f00c9f25430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9f257b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f00c9f16660" loc="61:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f00c9f16660"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9f15e70"/>
        <function-ref name="get" scoped="" ref="0x7f00c9f15920"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c9f153d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9f143f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f00c9f204b0" loc="56:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c9f204b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f00c9f20830"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f00c9f209c0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f00c9f20b50"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f00c9f20ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f00c9f26810" loc="48:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f00c9f26810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9f26b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f00c9f0ec50" loc="66:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c9f0ec50"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c9f08210"/>
        <function-ref name="clear" scoped="" ref="0x7f00c9f08940"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c9f0ba80"/>
        <function-ref name="set" scoped="" ref="0x7f00c9f07090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f00c9f0a740" loc="65:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c9f0a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c9f0e3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f00c9f1d110" loc="60:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f00c9f1d110"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9f1c830"/>
        <function-ref name="get" scoped="" ref="0x7f00c9f1c2e0"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c9f1dd40"/>
        <function-ref name="set" scoped="" ref="0x7f00c9f1cd80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f00c9f21990" loc="55:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9f21990"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f00c9f21d10"/>
        <function-ref name="noAck" scoped="" ref="0x7f00c9f20020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f00c9f201b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f00c9f1f020" loc="57:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f00c9f1f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f00c9f1f3a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f00c9f1f530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f00c9f1f6c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f00c9f1f850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f00c9f1f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f00c9f222d0" loc="53:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f00c9f222d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f00c9f22650"/>
        <function-ref name="source" scoped="" ref="0x7f00c9f227e0"/>
        <function-ref name="address" scoped="" ref="0x7f00c9f22970"/>
        <function-ref name="destination" scoped="" ref="0x7f00c9f22b00"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c9f22c90"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c9f22e20"/>
        <function-ref name="type" scoped="" ref="0x7f00c9f21020"/>
        <function-ref name="setType" scoped="" ref="0x7f00c9f211b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c9f21340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f00c9f214d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f00c9f21660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f00c9f1fcb0" loc="58:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f00c9f1fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f00c9f1e0a0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c9f1e230"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c9f1e3c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f00c9f0c800" loc="63:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f00c9f0c800"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f00c9f0cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f00c9f07ce0" loc="67:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c9f07ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c9f042e0"/>
        <function-ref name="clear" scoped="" ref="0x7f00c9f04a10"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c9f06b60"/>
        <function-ref name="set" scoped="" ref="0x7f00c9f03170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f00c9f02300" loc="41:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f00c9f02300"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f00c9f02680"/>
        <function-ref name="stopDone" scoped="" ref="0x7f00c9f02810"/>
        <function-ref name="start" scoped="" ref="0x7f00c9f029a0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9f02b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f00c9ed71c0" loc="85:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f00c9ed71c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9ed5910"/>
        <function-ref name="get" scoped="" ref="0x7f00c9ed53c0"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c9ed7df0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9ed5e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Notifier" ref="0x7f00c9ef7020" loc="65:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Notifier" scoped="" ref="0x7f00c9ef7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f00c9ef73a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendResource" ref="0x7f00c9ef02c0" loc="67:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendResource" scoped="" ref="0x7f00c9ef02c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f00c9ef0640"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f00c9ef07d0"/>
        <function-ref name="request" scoped="" ref="0x7f00c9ef0960"/>
        <function-ref name="granted" scoped="" ref="0x7f00c9ef0af0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f00c9ef0c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f00c9efcd60" loc="57:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9efcd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f00c9efb180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f00c9ecd3f0" loc="90:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c9ecd3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c9ecc970"/>
        <function-ref name="clear" scoped="" ref="0x7f00c9ecb0d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c9ecc240"/>
        <function-ref name="set" scoped="" ref="0x7f00c9ecb800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f00c9eff320" loc="54:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f00c9eff320"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9eff6a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9eff830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9eff9c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9effb50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9effce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f00c9efc1d0" loc="56:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f00c9efc1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9efc550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f00c9ee13c0" loc="69:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f00c9ee13c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f00c9ee1740"/>
        <function-ref name="address" scoped="" ref="0x7f00c9ee18d0"/>
        <function-ref name="destination" scoped="" ref="0x7f00c9ee1a60"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c9ee1bf0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c9ee1d80"/>
        <function-ref name="pan" scoped="" ref="0x7f00c9eea020"/>
        <function-ref name="setPan" scoped="" ref="0x7f00c9eea1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c9eea340"/>
        <function-ref name="localPan" scoped="" ref="0x7f00c9eea4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForIeee154Message" ref="0x7f00c9eea890" loc="70:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7f00c9eea890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9eead10"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9ee9020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9ee91b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9ee9340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9ee94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f00c9ee0320" loc="74:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c9ee0320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f00c9ee06a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f00c9ee0830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f00c9ee09c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f00c9ee0b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f00c9edbc90" loc="84:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f00c9edbc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9ed83c0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9ed9e30"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c9ed98e0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9ed8910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f00c9efd510" loc="55:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f00c9efd510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9efd890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForActiveMessage" ref="0x7f00c9efaba0" loc="59:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f00c9efaba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9ef9020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9ef91b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9ef9340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9ef94d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9ef9660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f00c9ed1270" loc="89:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c9ed1270"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c9ed0800"/>
        <function-ref name="clear" scoped="" ref="0x7f00c9ecf020"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c9ed00d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9ecf750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f00c9ed4d70" loc="88:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c9ed4d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c9ed39c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f00c9edd6d0" loc="83:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f00c9edd6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9edce70"/>
        <function-ref name="get" scoped="" ref="0x7f00c9edc920"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c9edc3d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9edb3f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f00c9ee9800" loc="73:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9ee9800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f00c9ee9b80"/>
        <function-ref name="noAck" scoped="" ref="0x7f00c9ee9d10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f00c9ee0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f00c9ef1a60" loc="63:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f00c9ef1a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9ef1de0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9ef8020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9ef81b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9ef8340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9ef84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f00c9ee0e10" loc="75:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f00c9ee0e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f00c9ede1c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f00c9ede350"/>
        <function-ref name="getRetries" scoped="" ref="0x7f00c9ede4e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f00c9ede670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f00c9ede800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f00c9efb430" loc="58:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f00c9efb430"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f00c9efb7b0"/>
        <function-ref name="source" scoped="" ref="0x7f00c9efb940"/>
        <function-ref name="address" scoped="" ref="0x7f00c9efbad0"/>
        <function-ref name="destination" scoped="" ref="0x7f00c9efbc60"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c9efbdf0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c9efa020"/>
        <function-ref name="type" scoped="" ref="0x7f00c9efa1b0"/>
        <function-ref name="setType" scoped="" ref="0x7f00c9efa340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c9efa4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f00c9efa660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f00c9efa7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f00c9ef8840" loc="64:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f00c9ef8840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9ef8bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f00c9edead0" loc="81:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f00c9edead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f00c9edee50"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c9edd020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c9edd1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f00c9ed4510" loc="86:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f00c9ed4510"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f00c9ed4890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Tasklet" ref="0x7f00c9ec8e50" loc="44:../../../../tos/lib/rfxlink/util/TaskletC.nc">
      <component-ref qname="RF230RadioC.TaskletC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f00c9ec8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f00c9ec7210"/>
        <function-ref name="suspend" scoped="" ref="0x7f00c9ec73a0"/>
        <function-ref name="resume" scoped="" ref="0x7f00c9ec7530"/>
        <function-ref name="run" scoped="" ref="0x7f00c9ec76c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7f00c9ca3da0" loc="38:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f00c9ca3da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9ca2180"/>
        <function-ref name="clearAll" scoped="" ref="0x7f00c9ca2310"/>
        <function-ref name="get" scoped="" ref="0x7f00c9ca24a0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9ca2630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7f00c9ca3020" loc="37:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f00c9ca3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f00c9ca33a0"/>
        <function-ref name="insertNode" scoped="" ref="0x7f00c9ca3530"/>
        <function-ref name="getNode" scoped="" ref="0x7f00c9ca36c0"/>
        <function-ref name="evicted" scoped="" ref="0x7f00c9ca3850"/>
        <function-ref name="getIndex" scoped="" ref="0x7f00c9ca39e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7f00c90b53b0" loc="43:../../../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f00c90b53b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c90b5750"/>
        <function-ref name="clearAll" scoped="" ref="0x7f00c90b58e0"/>
        <function-ref name="get" scoped="" ref="0x7f00c90b5a70"/>
        <function-ref name="set" scoped="" ref="0x7f00c90b5c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7f00c90b6650" loc="42:../../../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f00c90b6650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f00c90b69d0"/>
        <function-ref name="insertNode" scoped="" ref="0x7f00c90b6b60"/>
        <function-ref name="getNode" scoped="" ref="0x7f00c90b6cf0"/>
        <function-ref name="evicted" scoped="" ref="0x7f00c90b6e80"/>
        <function-ref name="getIndex" scoped="" ref="0x7f00c90b5030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c90b6080" loc="41:../../../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c90b6080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c90b6400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f00c9e790e0" loc="58:../../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9e790e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9e79460"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f00c9e779a0" loc="57:../../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f00c9e779a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f00c9e77d20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f00c9e73020" loc="52:../../../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f00c9e73020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9e733a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c9e75020" loc="46:../../../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c9e75020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9e753a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7f00c9e6e1d0" loc="50:../../../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f00c9e6e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f00c9e6e550"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f00c9e6e6e0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f00c9e6e870"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f00c9e6ea00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f00c9e6eb90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f00c9e6ca60" loc="45:../../../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x7f00c9e6ca60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9e6cde0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c9e6c380" loc="44:../../../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c9e6c380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9e6c700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x7f00c9e68180" loc="46:../../../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x7f00c9e68180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9e68500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f00c9e641f0" loc="41:../../../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f00c9e641f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9e64570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f00c9e72af0" loc="40:../../../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f00c9e72af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9e72e70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f00c9e60e60" loc="45:../../../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f00c9e60e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9e5f210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x7f00c9e5ab90" loc="44:../../../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x7f00c9e5ab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e60020"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e601b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e60340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e604d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e60660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e607f0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e60980"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e60b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f00c9e61660" loc="43:../../../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f00c9e61660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9e619e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x7f00c9e18cb0" loc="98:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x7f00c9e18cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e17610"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e177a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e17930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e17ac0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e17c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e17de0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e16020"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e161b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x7f00c9e344e0" loc="72:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x7f00c9e344e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e34860"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e349f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e34b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e34d10"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e33020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e331b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e33340"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e334d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x7f00c9e28350" loc="83:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x7f00c9e28350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e286d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e28860"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e289f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e28b80"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e28d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e27020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e271b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e27340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x7f00c9e1fcb0" loc="92:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x7f00c9e1fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e1e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e1e230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e1e3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e1e550"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e1e6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e1e870"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e1ea00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e1eb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG5" ref="0x7f00c9e11060" loc="103:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG5" scoped="" ref="0x7f00c9e11060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e113e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e11570"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e11700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e11890"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e11a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e11bb0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e11d40"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e10020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x7f00c9e4c670" loc="50:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x7f00c9e4c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e4c9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e4cb80"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e4cd10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e4b020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e4b1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e4b340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e4b4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e4b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x7f00c9e21670" loc="90:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x7f00c9e21670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e219f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e21b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e21d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e20020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e201b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e20340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e204d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e20660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x7f00c9e4acb0" loc="53:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x7f00c9e4acb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e490a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e49230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e493c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e49550"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e496e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e49870"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e49a00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e49b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x7f00c9e3ecb0" loc="64:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x7f00c9e3ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e3d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e3d230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e3d3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e3d550"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e3d6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e3d870"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e3da00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e3db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x7f00c9e31e40" loc="75:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x7f00c9e31e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e301e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e30370"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e30500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e30690"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e30820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e309b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e30b40"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e30cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x7f00c9e25cb0" loc="86:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x7f00c9e25cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e240a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e24230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e243c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e24550"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e246e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e24870"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e24a00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e24b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x7f00c9e52800" loc="45:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x7f00c9e52800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e52b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e52d10"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e51020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e511b0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e51340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e514d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e51660"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e517f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x7f00c9e46670" loc="56:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x7f00c9e46670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e469f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e46b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e46d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e45020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e451b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e45340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e454d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e45660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x7f00c9e3a670" loc="67:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x7f00c9e3a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e3a9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e3ab80"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e3ad10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e38020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e381b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e38340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e384d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e38660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x7f00c9e2d670" loc="78:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x7f00c9e2d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e2d9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e2db80"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e2dd10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e2c020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e2c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e2c340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e2c4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e2c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x7f00c9e1a670" loc="95:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x7f00c9e1a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e1a9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e1ab80"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e1ad10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e19020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e191b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e19340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e194d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e19660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x7f00c9e14b20" loc="101:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x7f00c9e14b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e13020"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e131b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e13340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e134d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e13660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e137f0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e13980"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e13b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x7f00c9e2bcb0" loc="81:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x7f00c9e2bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e2a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e2a230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e2a3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e2a550"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e2a6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e2a870"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e2aa00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e2ab90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x7f00c9e4e060" loc="48:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x7f00c9e4e060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e4e3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e4e570"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e4e700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e4e890"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e4ea20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e4ebb0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e4ed40"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e4d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x7f00c9e42020" loc="59:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x7f00c9e42020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e423a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e42530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e426c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e42850"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e429e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e42b70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e42d00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e41020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x7f00c9e164e0" loc="99:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x7f00c9e164e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e16860"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e169f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e16b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e16d10"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e15020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e151b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e15340"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e154d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x7f00c9e40670" loc="62:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x7f00c9e40670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e409f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e40b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e40d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e3f020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e3f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e3f340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e3f4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e3f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x7f00c9e33800" loc="73:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x7f00c9e33800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e33b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e33d10"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e32020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e321b0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e32340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e324d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e32660"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e327f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x7f00c9e27670" loc="84:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x7f00c9e27670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e279f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e27b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e27d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e26020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e261b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e26340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e264d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e26660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x7f00c9e1c020" loc="93:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x7f00c9e1c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e1c3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e1c530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e1c6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e1c850"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e1c9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e1cb70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e1cd00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e1b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x7f00c9e4b990" loc="51:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x7f00c9e4b990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e4bd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e4a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e4a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e4a340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e4a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e4a660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e4a7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e4a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x7f00c9e48020" loc="54:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x7f00c9e48020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e483a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e48530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e486c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e48850"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e489e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e48b70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e48d00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e47020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x7f00c9e3c020" loc="65:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x7f00c9e3c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e3c3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e3c530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e3c6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e3c850"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e3c9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e3cb70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e3cd00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e3b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x7f00c9e2f060" loc="76:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x7f00c9e2f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e2f3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e2f570"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e2f700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e2f890"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e2fa20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e2fbb0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e2fd40"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e2e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x7f00c9e23020" loc="87:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x7f00c9e23020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e233a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e23530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e236c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e23850"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e239e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e23b70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e23d00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e22020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x7f00c9e51b20" loc="46:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x7f00c9e51b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e50020"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e501b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e50340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e504d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e50660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e507f0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e50980"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e50b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x7f00c9e45990" loc="57:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x7f00c9e45990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e45e10"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e44020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e441b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e44340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e444d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e44660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e447f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e44980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x7f00c9e38990" loc="68:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x7f00c9e38990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e38d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e37020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e371b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e37340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e374d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e37660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e377f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e37980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x7f00c9e19990" loc="96:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x7f00c9e19990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e19d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e18020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e181b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e18340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e184d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e18660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e187f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e18980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x7f00c9e35020" loc="71:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x7f00c9e35020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e355a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e35730"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e358c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e35a50"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e35be0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e35d70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e34020"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e341b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x7f00c9e29020" loc="82:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x7f00c9e29020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e293a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e29530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e296c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e29850"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e299e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e29b70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e29d00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e28020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x7f00c9e20990" loc="91:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x7f00c9e20990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e20d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e1f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e1f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e1f340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e1f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e1f660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e1f7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e1f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x7f00c9e13e40" loc="102:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x7f00c9e13e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e121e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e12370"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e12500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e12690"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e12820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e129b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e12b40"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e12cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x7f00c9e4d350" loc="49:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x7f00c9e4d350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e4d6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e4d860"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e4d9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e4db80"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e4dd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e4c020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e4c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e4c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x7f00c9e41350" loc="60:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x7f00c9e41350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e416d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e41860"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e419f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e41b80"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e41d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e40020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e401b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e40340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x7f00c9e22350" loc="89:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x7f00c9e22350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e226d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e22860"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e229f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e22b80"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e22d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e21020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e211b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e21340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x7f00c9e3f990" loc="63:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x7f00c9e3f990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e3fd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e3e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e3e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e3e340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e3e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e3e660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e3e7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e3e980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x7f00c9e32b20" loc="74:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x7f00c9e32b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e31020"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e311b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e31340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e314d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e31660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e317f0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e31980"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e31b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x7f00c9e26990" loc="85:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x7f00c9e26990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e26d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e25020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e251b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e25340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e254d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e25660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e257f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e25980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x7f00c9e1b350" loc="94:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x7f00c9e1b350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e1b6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e1b860"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e1b9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e1bb80"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e1bd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e1a020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e1a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e1a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x7f00c9e62540" loc="44:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x7f00c9e62540"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e628c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e62a50"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e62be0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e62d70"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e52020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e521b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e52340"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e524d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x7f00c9e47350" loc="55:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x7f00c9e47350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e476d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e47860"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e479f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e47b80"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e47d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e46020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e461b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e46340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x7f00c9e3b350" loc="66:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x7f00c9e3b350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e3b6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e3b860"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e3b9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e3bb80"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e3bd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e3a020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e3a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e3a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x7f00c9e2e350" loc="77:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x7f00c9e2e350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e2e6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e2e860"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e2e9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e2eb80"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e2ed10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e2d020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e2d1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e2d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x7f00c9e15800" loc="100:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x7f00c9e15800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e15b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e15d10"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e14020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e141b0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e14340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e144d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e14660"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e147f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x7f00c9e2c990" loc="80:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x7f00c9e2c990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e2cd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e2b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e2b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e2b340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e2b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e2b660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e2b7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e2b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x7f00c9e37cb0" loc="69:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x7f00c9e37cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e360a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e36230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e363c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e36550"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e366e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e36870"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e36a00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e36b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x7f00c9e50e40" loc="47:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x7f00c9e50e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e4f1e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e4f370"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e4f500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e4f690"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e4f820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e4f9b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e4fb40"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e4fcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x7f00c9e44cb0" loc="58:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x7f00c9e44cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9e430a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9e43230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9e433c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9e43550"/>
        <function-ref name="get" scoped="" ref="0x7f00c9e436e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9e43870"/>
        <function-ref name="set" scoped="" ref="0x7f00c9e43a00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9e43b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f00c9dc5a80" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f00c9dc5a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9dc5e00"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9dc4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9dc41b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9dc4340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9dc44d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9dc4660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9dc47f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9dc4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f00c9dc1020" loc="49:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f00c9dc1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9dc13a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9dc1530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9dc16c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9dc1850"/>
        <function-ref name="get" scoped="" ref="0x7f00c9dc19e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9dc1b70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9dc1d00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9dc0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f00c9dc76b0" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f00c9dc76b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9dc7a30"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9dc7bc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9dc7d50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9dc6020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9dc61b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9dc6340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9dc64d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9dc6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f00c9dc4c10" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f00c9dc4c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9dc3020"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9dc31b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9dc3340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9dc34d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9dc3660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9dc37f0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9dc3980"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9dc3b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f00c9dc02b0" loc="50:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f00c9dc02b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9dc0630"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9dc07c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9dc0950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9dc0ae0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9dc0c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9dc0e00"/>
        <function-ref name="set" scoped="" ref="0x7f00c9dbf020"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9dbf1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f00c9dc68f0" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f00c9dc68f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9dc6c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9dc6e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9dc5020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9dc51b0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9dc5340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9dc54d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9dc5660"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9dc57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f00c9dc3da0" loc="48:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f00c9dc3da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9dc2180"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9dc2310"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9dc24a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9dc2630"/>
        <function-ref name="get" scoped="" ref="0x7f00c9dc27c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9dc2950"/>
        <function-ref name="set" scoped="" ref="0x7f00c9dc2ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9dc2c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f00c9dbf440" loc="51:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f00c9dbf440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9dbf7c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9dbf950"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9dbfae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9dbfc70"/>
        <function-ref name="get" scoped="" ref="0x7f00c9dbfe00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9dbe020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9dbe1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9dbe340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9064a20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9064a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9064da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9063020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c90631b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9063340"/>
        <function-ref name="get" scoped="" ref="0x7f00c90634d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9063660"/>
        <function-ref name="set" scoped="" ref="0x7f00c90637f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9063980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9061e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9061e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c90601c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9060350"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c90604e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9060670"/>
        <function-ref name="get" scoped="" ref="0x7f00c9060800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9060990"/>
        <function-ref name="set" scoped="" ref="0x7f00c9060b20"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9060cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c905d0a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c905d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c905d420"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c905d5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c905d740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c905d8d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c905da60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c905dbf0"/>
        <function-ref name="set" scoped="" ref="0x7f00c905dd80"/>
        <function-ref name="clr" scoped="" ref="0x7f00c905c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c905a3f0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c905a3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c905a770"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c905a900"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c905aa90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c905ac20"/>
        <function-ref name="get" scoped="" ref="0x7f00c905adb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9059020"/>
        <function-ref name="set" scoped="" ref="0x7f00c90591b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9059340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c90576d0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c90576d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9057a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9057be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9057d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9056020"/>
        <function-ref name="get" scoped="" ref="0x7f00c90561b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9056340"/>
        <function-ref name="set" scoped="" ref="0x7f00c90564d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9056660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c90549b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c90549b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9054d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9052020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c90521b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9052340"/>
        <function-ref name="get" scoped="" ref="0x7f00c90524d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9052660"/>
        <function-ref name="set" scoped="" ref="0x7f00c90527f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9052980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9050e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9050e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c904f1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c904f350"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c904f4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c904f670"/>
        <function-ref name="get" scoped="" ref="0x7f00c904f800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c904f990"/>
        <function-ref name="set" scoped="" ref="0x7f00c904fb20"/>
        <function-ref name="clr" scoped="" ref="0x7f00c904fcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c904c0a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c904c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c904c420"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c904c5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c904c740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c904c8d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c904ca60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c904cbf0"/>
        <function-ref name="set" scoped="" ref="0x7f00c904cd80"/>
        <function-ref name="clr" scoped="" ref="0x7f00c904b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f00c9db6da0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f00c9db6da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9db5180"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9db5310"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9db54a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9db5630"/>
        <function-ref name="get" scoped="" ref="0x7f00c9db57c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9db5950"/>
        <function-ref name="set" scoped="" ref="0x7f00c9db5ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9db5c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f00c9db2440" loc="49:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f00c9db2440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9db27c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9db2950"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9db2ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9db2c70"/>
        <function-ref name="get" scoped="" ref="0x7f00c9db2e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9db1020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9db11b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9db1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f00c9db8a20" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f00c9db8a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9db8da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9db7020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9db71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9db7340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9db74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9db7660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9db77f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9db7980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f00c9db4020" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f00c9db4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9db43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9db4530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9db46c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9db4850"/>
        <function-ref name="get" scoped="" ref="0x7f00c9db49e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9db4b70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9db4d00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9db3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f00c9db15d0" loc="50:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f00c9db15d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9db1950"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9db1ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9db1c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9db1e00"/>
        <function-ref name="get" scoped="" ref="0x7f00c9daf020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9daf1b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9daf340"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9daf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f00c9db7c10" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f00c9db7c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9db6020"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9db61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9db6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9db64d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9db6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9db67f0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9db6980"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9db6b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f00c9db32b0" loc="48:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f00c9db32b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9db3630"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9db37c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9db3950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9db3ae0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9db3c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9db3e00"/>
        <function-ref name="set" scoped="" ref="0x7f00c9db2020"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9db21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f00c9daf760" loc="51:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f00c9daf760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9dafae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9dafc70"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9dafe00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9dae020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9dae1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9dae340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9dae4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9dae660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8ff9c90" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8ff9c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8ff80a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8ff8230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8ff83c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8ff8550"/>
        <function-ref name="get" scoped="" ref="0x7f00c8ff86e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8ff8870"/>
        <function-ref name="set" scoped="" ref="0x7f00c8ff8a00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8ff8b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8ff6e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8ff6e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8ff51c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8ff5350"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8ff54e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8ff5670"/>
        <function-ref name="get" scoped="" ref="0x7f00c8ff5800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8ff5990"/>
        <function-ref name="set" scoped="" ref="0x7f00c8ff5b20"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8ff5cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8ff20a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8ff20a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8ff2420"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8ff25b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8ff2740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8ff28d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c8ff2a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8ff2bf0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8ff2d80"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8ff1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8fef3f0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8fef3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8fef770"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8fef900"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8fefa90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8fefc20"/>
        <function-ref name="get" scoped="" ref="0x7f00c8fefdb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8fee020"/>
        <function-ref name="set" scoped="" ref="0x7f00c8fee1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8fee340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8fec6d0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8fec6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8feca50"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8fecbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8fecd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8feb020"/>
        <function-ref name="get" scoped="" ref="0x7f00c8feb1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8feb340"/>
        <function-ref name="set" scoped="" ref="0x7f00c8feb4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8feb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8fe99b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8fe99b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8fe9d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8fe8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8fe81b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8fe8340"/>
        <function-ref name="get" scoped="" ref="0x7f00c8fe84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8fe8660"/>
        <function-ref name="set" scoped="" ref="0x7f00c8fe87f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8fe8980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8fe6e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8fe6e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8fe41c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8fe4350"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8fe44e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8fe4670"/>
        <function-ref name="get" scoped="" ref="0x7f00c8fe4800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8fe4990"/>
        <function-ref name="set" scoped="" ref="0x7f00c8fe4b20"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8fe4cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8fe10a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8fe10a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8fe1420"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8fe15b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8fe1740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8fe18d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c8fe1a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8fe1bf0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8fe1d80"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8fe0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f00c9da6020" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f00c9da6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9da63a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9da6530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9da66c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9da6850"/>
        <function-ref name="get" scoped="" ref="0x7f00c9da69e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9da6b70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9da6d00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9da5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f00c9da25d0" loc="49:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f00c9da25d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9da2950"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9da2ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9da2c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9da2e00"/>
        <function-ref name="get" scoped="" ref="0x7f00c9da1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9da11b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9da1340"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9da14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f00c9da9d30" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f00c9da9d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9da80e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9da8270"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9da8400"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9da8590"/>
        <function-ref name="get" scoped="" ref="0x7f00c9da8720"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9da88b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9da8a40"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9da8bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f00c9da52b0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f00c9da52b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9da5630"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9da57c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9da5950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9da5ae0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9da5c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9da5e00"/>
        <function-ref name="set" scoped="" ref="0x7f00c9da3020"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9da31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f00c9da1760" loc="50:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f00c9da1760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9da1ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9da1c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9da1e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9da0020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9da01b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9da0340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9da04d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9da0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f00c9da8e60" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f00c9da8e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9da7210"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9da73a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9da7530"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9da76c0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9da7850"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9da79e0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9da7b70"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9da7d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f00c9da3440" loc="48:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f00c9da3440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9da37c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9da3950"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9da3ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9da3c70"/>
        <function-ref name="get" scoped="" ref="0x7f00c9da3e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9da2020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9da21b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9da2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f00c9da08f0" loc="51:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f00c9da08f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9da0c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9da0e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d9f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d9f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d9f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d9f4d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d9f660"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d9f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f8ec90" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f8ec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f8d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f8d230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f8d3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f8d550"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f8d6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f8d870"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f8da00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f8db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f8be20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f8be20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f8a1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f8a350"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f8a4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f8a670"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f8a800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f8a990"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f8ab20"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f8acb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f870a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f870a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f87420"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f875b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f87740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f878d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f87a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f87bf0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f87d80"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f86020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f843f0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f843f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f84770"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f84900"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f84a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f84c20"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f84db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f83020"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f831b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f83340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f816d0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f816d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f81a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f81be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f81d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f80020"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f801b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f80340"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f804d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f80660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f7e9b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f7e9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f7ed30"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f7d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f7d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f7d340"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f7d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f7d660"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f7d7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f7d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f7be20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f7be20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f791c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f79350"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f794e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f79670"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f79800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f79990"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f79b20"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f79cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f760a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f760a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f76420"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f765b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f76740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f768d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f76a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f76bf0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f76d80"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f75020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f00c9d96440" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f00c9d96440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d967c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d96950"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d96ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d96c70"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d96e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d95020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d951b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d95340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f00c9d938f0" loc="49:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f00c9d938f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d93c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d93e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d92020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d921b0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d92340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d924d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d92660"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d927f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f00c9d99020" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f00c9d99020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d993a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d99530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d996c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d99850"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d999e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d99b70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d99d00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d97020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f00c9d955d0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f00c9d955d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d95950"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d95ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d95c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d95e00"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d94020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d941b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d94340"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d944d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f00c9d92a80" loc="50:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f00c9d92a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d92e00"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d91020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d911b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d91340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d914d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d91660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d917f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d91980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f00c9d972b0" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f00c9d972b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d97630"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d977c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d97950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d97ae0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d97c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d97e00"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d96020"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d961b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f00c9d94760" loc="48:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f00c9d94760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d94ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d94c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d94e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d93020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d931b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d93340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d934d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d93660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f00c9d91c10" loc="51:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f00c9d91c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d90020"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d901b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d90340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d904d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d90660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d907f0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d90980"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d90b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f23c90" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f23c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f220a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f22230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f223c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f22550"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f226e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f22870"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f22a00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f22b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f20e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f20e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f1f1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f1f350"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f1f4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f1f670"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f1f800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f1f990"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f1fb20"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f1fcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f1c0a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f1c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f1c420"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f1c5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f1c740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f1c8d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f1ca60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f1cbf0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f1cd80"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f1b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f193f0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f193f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f19770"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f19900"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f19a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f19c20"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f19db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f18020"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f181b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f18340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f166d0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f166d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f16a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f16be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f16d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f15020"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f151b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f15340"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f154d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f15660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f139b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f139b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f13d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f12020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f121b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f12340"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f124d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f12660"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f127f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f12980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f10e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f10e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f0f1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f0f350"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f0f4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f0f670"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f0f800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f0f990"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f0fb20"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f0fcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8f0c0a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8f0c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8f0c420"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8f0c5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8f0c740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8f0c8d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c8f0ca60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8f0cbf0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8f0cd80"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8f0a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f00c9d87760" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f00c9d87760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d87ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d87c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d87e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d86020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d861b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d86340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d864d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d86660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f00c9d84c10" loc="49:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f00c9d84c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d83020"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d831b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d83340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d834d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d83660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d837f0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d83980"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d83b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f00c9d893f0" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f00c9d893f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d89770"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d89900"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d89a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d89c20"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d89db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d88020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d881b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d88340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f00c9d868f0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f00c9d868f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d86c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d86e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d85020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d851b0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d85340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d854d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d85660"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d857f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f00c9d83da0" loc="50:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f00c9d83da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d82180"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d82310"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d824a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d82630"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d827c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d82950"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d82ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d82c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f00c9d885d0" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f00c9d885d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d88950"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d88ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d88c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d88e00"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d87020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d871b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d87340"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d874d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f00c9d85a80" loc="48:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f00c9d85a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d85e00"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d84020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d841b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d84340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d844d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d84660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d847f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d84980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f00c9d81020" loc="51:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f00c9d81020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d813a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d81530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d816c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d81850"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d819e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d81b70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d81d00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d80020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8eb8c90" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8eb8c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8eb70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8eb7230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8eb73c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8eb7550"/>
        <function-ref name="get" scoped="" ref="0x7f00c8eb76e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8eb7870"/>
        <function-ref name="set" scoped="" ref="0x7f00c8eb7a00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8eb7b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8eb5e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8eb5e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8eb41c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8eb4350"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8eb44e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8eb4670"/>
        <function-ref name="get" scoped="" ref="0x7f00c8eb4800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8eb4990"/>
        <function-ref name="set" scoped="" ref="0x7f00c8eb4b20"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8eb4cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8eb10a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8eb10a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8eb1420"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8eb15b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8eb1740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8eb18d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c8eb1a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8eb1bf0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8eb1d80"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8eb0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8eae3f0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8eae3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8eae770"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8eae900"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8eaea90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8eaec20"/>
        <function-ref name="get" scoped="" ref="0x7f00c8eaedb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8ead020"/>
        <function-ref name="set" scoped="" ref="0x7f00c8ead1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8ead340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8eab6d0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8eab6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8eaba50"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8eabbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8eabd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8eaa020"/>
        <function-ref name="get" scoped="" ref="0x7f00c8eaa1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8eaa340"/>
        <function-ref name="set" scoped="" ref="0x7f00c8eaa4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8eaa660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8ea89b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8ea89b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8ea8d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8ea7020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8ea71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8ea7340"/>
        <function-ref name="get" scoped="" ref="0x7f00c8ea74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8ea7660"/>
        <function-ref name="set" scoped="" ref="0x7f00c8ea77f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8ea7980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8ea5e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8ea5e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8ea41c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8ea4350"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8ea44e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8ea4670"/>
        <function-ref name="get" scoped="" ref="0x7f00c8ea4800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8ea4990"/>
        <function-ref name="set" scoped="" ref="0x7f00c8ea4b20"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8ea4cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8ea10a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8ea10a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8ea1420"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8ea15b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8ea1740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8ea18d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c8ea1a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8ea1bf0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8ea1d80"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8e9f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f00c9d78a80" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f00c9d78a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d78e00"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d77020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d771b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d77340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d774d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d77660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d777f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d77980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f00c9d74020" loc="49:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f00c9d74020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d743a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d74530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d746c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d74850"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d749e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d74b70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d74d00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d73020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f00c9d7a7a0" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f00c9d7a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d7ab20"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d7acb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d7ae40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d79020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d791b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d79340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d794d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d79660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f00c9d77c10" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f00c9d77c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d76020"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d761b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d76340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d764d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d76660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d767f0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d76980"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d76b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f00c9d732b0" loc="50:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f00c9d732b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d73630"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d737c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d73950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d73ae0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d73c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d73e00"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d71020"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d711b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f00c9d798f0" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f00c9d798f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d79c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d79e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d78020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d781b0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d78340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d784d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d78660"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d787f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f00c9d76da0" loc="48:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f00c9d76da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d75180"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d75310"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d754a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d75630"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d757c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d75950"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d75ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d75c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f00c9d71440" loc="51:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f00c9d71440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d717c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d71950"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d71ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d71c70"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d71e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d70020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d701b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d70340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8e4dc90" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8e4dc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8e4c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8e4c230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8e4c3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8e4c550"/>
        <function-ref name="get" scoped="" ref="0x7f00c8e4c6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8e4c870"/>
        <function-ref name="set" scoped="" ref="0x7f00c8e4ca00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8e4cb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8e4ae20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8e4ae20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8e491c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8e49350"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8e494e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8e49670"/>
        <function-ref name="get" scoped="" ref="0x7f00c8e49800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8e49990"/>
        <function-ref name="set" scoped="" ref="0x7f00c8e49b20"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8e49cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8e460a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8e460a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8e46420"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8e465b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8e46740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8e468d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c8e46a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8e46bf0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8e46d80"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8e45020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8e433f0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8e433f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8e43770"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8e43900"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8e43a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8e43c20"/>
        <function-ref name="get" scoped="" ref="0x7f00c8e43db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8e42020"/>
        <function-ref name="set" scoped="" ref="0x7f00c8e421b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8e42340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8e406d0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8e406d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8e40a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8e40be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8e40d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8e3f020"/>
        <function-ref name="get" scoped="" ref="0x7f00c8e3f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8e3f340"/>
        <function-ref name="set" scoped="" ref="0x7f00c8e3f4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8e3f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8e3d9b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8e3d9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8e3dd30"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8e3c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8e3c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8e3c340"/>
        <function-ref name="get" scoped="" ref="0x7f00c8e3c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8e3c660"/>
        <function-ref name="set" scoped="" ref="0x7f00c8e3c7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8e3c980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8e3ae20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8e3ae20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8e391c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8e39350"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8e394e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8e39670"/>
        <function-ref name="get" scoped="" ref="0x7f00c8e39800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8e39990"/>
        <function-ref name="set" scoped="" ref="0x7f00c8e39b20"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8e39cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c8e360a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c8e360a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c8e36420"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c8e365b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c8e36740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c8e368d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c8e36a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c8e36bf0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8e36d80"/>
        <function-ref name="clr" scoped="" ref="0x7f00c8e35020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d6aa20" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d6aa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d6ada0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d53020"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d531b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d53340"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d534d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d53660"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d537f0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d53980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d4e6d0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d4e6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d4ea50"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d4ebe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d4ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d4d020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d4d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d4d340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d4d4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d4d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d49160" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d49160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d494e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d49670"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d49800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d49990"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d49b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d49cb0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d49e40"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d48020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d44c90" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d44c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d430a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d43230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d433c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d43550"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d436e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d43870"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d43a00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d43b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d3f6d0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d3f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d3fa50"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d3fbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d3fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d3d020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d3d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d3d340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d3d4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d3d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d39160" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d39160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d394e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d39670"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d39800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d39990"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d39b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d39cb0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d39e40"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d38020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d34c90" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d34c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d330a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d33230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d333c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d33550"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d336e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d33870"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d33a00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d33b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d2f6d0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d2f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d2fa50"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d2fbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d2fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d2d020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d2d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d2d340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d2d4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d2d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d29160" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d29160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d294e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d29670"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d29800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d29990"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d29b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d29cb0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d29e40"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d28020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d24c90" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d24c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d230a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d23230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d233c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d23550"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d236e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d23870"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d23a00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d23b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d1f6d0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d1f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d1fa50"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d1fbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d1fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d1e020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d1e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d1e340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d1e4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d1e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d19160" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d19160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d194e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d19670"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d19800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d19990"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d19b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d19cb0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d19e40"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d18020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d14c90" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d14c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d130a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d13230"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d133c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d13550"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d136e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d13870"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d13a00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d13b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f00c9d0f6d0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f00c9d0f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9d0fa50"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9d0fbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9d0fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9d0e020"/>
        <function-ref name="get" scoped="" ref="0x7f00c9d0e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9d0e340"/>
        <function-ref name="set" scoped="" ref="0x7f00c9d0e4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9d0e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c9cd62f0" loc="61:../../../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c9cd62f0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f00ca1233a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f00ca1233a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9cd6670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7f00c9cd6960" loc="62:../../../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f00c9cd6960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f00c9cd6ce0"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f00c9cd6e70"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f00c9cd0030"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f00c9cd01c0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f00c9cd0350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f00c9cb0720" loc="60:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9cb0720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9cb0aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f00c9e76dc0" loc="57:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f00c9e76dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f00c9cb1180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f00c9cb0020" loc="59:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f00c9cb0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9cb03a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f00c9cb1470" loc="58:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f00c9cb1470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9cb17f0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f00c9cb1980"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f00c9cb1b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f00ca0f2940" loc="48:../../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca0f2940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00ca0f2cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f00ca0f2e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f00ca0fb510" loc="47:../../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f00ca0fb510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00ca0fb890"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f00ca0fba20"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f00ca0fbbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f00ca02d850" loc="56:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f00ca02d850"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00ca02dbd0"/>
        <function-ref name="runTask" scoped="" ref="0x7f00ca02dd60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f00ca028c90" loc="57:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f00ca028c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f00ca02a0a0"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f00ca02a230"/>
        <function-ref name="sleep" scoped="" ref="0x7f00ca02a3c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f00ca02e8a0" loc="55:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f00ca02e8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00ca02ec20"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f00ca02edb0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f00ca02d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f00ca0099e0" loc="86:../../../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f00ca0099e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f00ca009d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f00ca044140" loc="82:../../../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f00ca044140"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f00ca0444c0"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f00ca044650"/>
        <function-ref name="sleep" scoped="" ref="0x7f00ca0447e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f00ca00ba50" loc="83:../../../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f00ca00ba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f00ca00bdd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DummyConfig" ref="0x7f00c9c72860" loc="51:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DummyConfig" scoped="" ref="0x7f00c9c72860"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f00c9c72be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TrafficMonitorConfig" ref="0x7f00c9c869f0" loc="47:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TrafficMonitorConfig" scoped="" ref="0x7f00c9c869f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getBytes" scoped="" ref="0x7f00c9c86d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageConfig" ref="0x7f00c9c75b70" loc="50:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7f00c9c75b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f00c9c81020"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f00c9c811b0"/>
        <function-ref name="source" scoped="" ref="0x7f00c9c81340"/>
        <function-ref name="destination" scoped="" ref="0x7f00c9c814d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c9c81660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c9c817f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f00c9c81980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlottedCollisionConfig" ref="0x7f00c9c7c5d0" loc="49:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlottedCollisionConfig" scoped="" ref="0x7f00c9c7c5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getInitialDelay" scoped="" ref="0x7f00c9c7c950"/>
        <function-ref name="getScheduleExponent" scoped="" ref="0x7f00c9c7cae0"/>
        <function-ref name="getCollisionWindowLength" scoped="" ref="0x7f00c9c7cc70"/>
        <function-ref name="getTransmitTime" scoped="" ref="0x7f00c9c7ce00"/>
        <function-ref name="getCollisionWindowStart" scoped="" ref="0x7f00c9c85020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f00c9c52400" loc="61:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9c52400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f00c9c52780"/>
        <function-ref name="wait" scoped="" ref="0x7f00c9c52910"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9c52aa0"/>
        <function-ref name="isFree" scoped="" ref="0x7f00c9c52c30"/>
        <function-ref name="getNow" scoped="" ref="0x7f00c9c52dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RF230Packet" ref="0x7f00c9c4c960" loc="62:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230Packet" scoped="" ref="0x7f00c9c4c960"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9c4cce0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9c4ce70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9c56030"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9c561c0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9c56350"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9c564e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f00c9c56ab0" loc="64:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f00c9c56ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c9c4a170"/>
        <function-ref name="clear" scoped="" ref="0x7f00c9c4a8a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c9c4ba00"/>
        <function-ref name="set" scoped="" ref="0x7f00c9c49020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RF230DriverConfig" ref="0x7f00c9c981c0" loc="43:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230DriverConfig" scoped="" ref="0x7f00c9c981c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9c98540"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9c986d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9c98860"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f00c9c989f0"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f00c9c98b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaConfig" ref="0x7f00c9c873c0" loc="46:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaConfig" scoped="" ref="0x7f00c9c873c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="requiresSoftwareCCA" scoped="" ref="0x7f00c9c87740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareAckConfig" ref="0x7f00c9c8e380" loc="44:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7f00c9c8e380"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7f00c9c8e700"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7f00c9c8e890"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f00c9c8ea20"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7f00c9c8ebb0"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7f00c9c8ed40"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7f00c9c9d020"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f00c9c9d1b0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f00c9c9d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7f00c9c59470" loc="60:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f00c9c59470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f00c9c597f0"/>
        <function-ref name="getDSN" scoped="" ref="0x7f00c9c59980"/>
        <function-ref name="setFCF" scoped="" ref="0x7f00c9c59b10"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f00c9c59ca0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f00c9c59e30"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f00c9c73020"/>
        <function-ref name="setDSN" scoped="" ref="0x7f00c9c731b0"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f00c9c73340"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f00c9c734d0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f00c9c73660"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f00c9c737f0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f00c9c73980"/>
        <function-ref name="localAddr" scoped="" ref="0x7f00c9c73b10"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f00c9c73da0"/>
        <function-ref name="localPan" scoped="" ref="0x7f00c9c71020"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f00c9c711b0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f00c9c71340"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f00c9c714d0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f00c9c71660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c9c717f0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f00c9c71980"/>
        <function-ref name="getFCF" scoped="" ref="0x7f00c9c71b10"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f00c9c71ca0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f00c9c71e30"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f00c9c58020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UniqueConfig" ref="0x7f00c9c8a750" loc="45:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7f00c9c8a750"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f00c9c8aad0"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f00c9c8ac60"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f00c9c8adf0"/>
        <function-ref name="getSender" scoped="" ref="0x7f00c9c96020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RandomCollisionConfig" ref="0x7f00c9c88020" loc="48:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7f00c9c88020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f00c9c883a0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f00c9c88530"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f00c9c886c0"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f00c9c88850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7f00c9bbe020" loc="41:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9bbe020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f00c9bbe3c0"/>
        <function-ref name="wait" scoped="" ref="0x7f00c9bbe550"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9bbe6e0"/>
        <function-ref name="isFree" scoped="" ref="0x7f00c9bbe870"/>
        <function-ref name="getNow" scoped="" ref="0x7f00c9bbea00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f00c9bbdb60" loc="47:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f00c9bbdb60"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f00ca1233a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f00ca1233a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f00c9fac920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c9bba4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f00c9bbb4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f00c9bbbe60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c9bbb9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f00c9bba9a0"/>
        <function-ref name="start" scoped="" ref="0x7f00c9bbc9b0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9bbb020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f00c9bbecb0" loc="46:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f00c9bbecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f00c9bbd0a0"/>
        <function-ref name="suspend" scoped="" ref="0x7f00c9bbd230"/>
        <function-ref name="resume" scoped="" ref="0x7f00c9bbd3c0"/>
        <function-ref name="run" scoped="" ref="0x7f00c9bbd550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7f00c8d68020" loc="54:../../../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c8d68020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f00c8d683c0"/>
        <function-ref name="wait" scoped="" ref="0x7f00c8d68550"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c8d686e0"/>
        <function-ref name="isFree" scoped="" ref="0x7f00c8d68870"/>
        <function-ref name="getNow" scoped="" ref="0x7f00c8d68a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f00c8d67020" loc="59:../../../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f00c8d67020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f00c9fac920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c8d64870"/>
        <function-ref name="fired" scoped="" ref="0x7f00c8d66840"/>
        <function-ref name="startAt" scoped="" ref="0x7f00c8d64220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c8d66d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f00c8d64d30"/>
        <function-ref name="start" scoped="" ref="0x7f00c8d67e30"/>
        <function-ref name="stop" scoped="" ref="0x7f00c8d66380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f00c8d63150" loc="60:../../../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f00c8d63150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f00c8d634d0"/>
        <function-ref name="suspend" scoped="" ref="0x7f00c8d63660"/>
        <function-ref name="resume" scoped="" ref="0x7f00c8d637f0"/>
        <function-ref name="run" scoped="" ref="0x7f00c8d63980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c9b0e8f0" loc="50:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c9b0e8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9b0ec70"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9b0ee00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9b0d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c9b0d2b0" loc="51:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c9b0d2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9b0d630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f00c9b103a0" loc="44:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9b103a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f00c9b10740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f00c9b13720" loc="40:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f00c9b13720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9b13aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9b13c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9b13dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9b12020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9b121b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f00c9b12530" loc="41:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f00c9b12530"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9b128d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9b12a60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9b12bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9b12d80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9b11020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f00c9b11b00" loc="43:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f00c9b11b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9b10020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f00c9b10a30" loc="49:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f00c9b10a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9b10db0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9b0e020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9b0e1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9b0e340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9b0e4d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9b0e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f00c9b0d8c0" loc="52:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f00c9b0d8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f00c9b0dc40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f00c9b0ddd0"/>
        <function-ref name="source" scoped="" ref="0x7f00c9b0c020"/>
        <function-ref name="destination" scoped="" ref="0x7f00c9b0c1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c9b0c340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c9b0c4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f00c9b0c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f00c9b113a0" loc="42:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f00c9b113a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9b11740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f00c9b14020" loc="39:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f00c9b14020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f00c9b143a0"/>
        <function-ref name="source" scoped="" ref="0x7f00c9b14530"/>
        <function-ref name="address" scoped="" ref="0x7f00c9b146c0"/>
        <function-ref name="destination" scoped="" ref="0x7f00c9b14850"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c9b149e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c9b14b70"/>
        <function-ref name="type" scoped="" ref="0x7f00c9b14d00"/>
        <function-ref name="setType" scoped="" ref="0x7f00c9b13020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c9b131b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f00c9b13340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f00c9b134d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c8d468f0" loc="54:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c8d468f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c8d46c70"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c8d46e00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c8d45020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c8d452b0" loc="55:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c8d452b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c8d45630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f00c8d473a0" loc="48:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f00c8d473a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f00c8d47740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f00c8d4b720" loc="44:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f00c8d4b720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c8d4baa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c8d4bc30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c8d4bdc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c8d4a020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c8d4a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f00c8d4d140" loc="42:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c8d4d140"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c8d4d4c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c8d4d650"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c8d4d7e0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c8d4d970"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c8d4db00"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c8d4dc90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f00c8d4a530" loc="45:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f00c8d4a530"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c8d4a8d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c8d4aa60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c8d4abf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c8d4ad80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c8d49020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f00c8d49b00" loc="47:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f00c8d49b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c8d47020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f00c8d47a30" loc="53:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f00c8d47a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c8d47db0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c8d46020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c8d461b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c8d46340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c8d464d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c8d46660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f00c8d493a0" loc="46:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f00c8d493a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c8d49740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f00c8d458c0" loc="56:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f00c8d458c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f00c8d45c40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f00c8d45dd0"/>
        <function-ref name="source" scoped="" ref="0x7f00c8d44020"/>
        <function-ref name="destination" scoped="" ref="0x7f00c8d441b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c8d44340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c8d444d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f00c8d44660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f00c8d448b0" loc="57:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f00c8d448b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f00c8d44c30"/>
        <function-ref name="changed" scoped="" ref="0x7f00c8d44dc0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f00c8d43020"/>
        <function-ref name="setAddress" scoped="" ref="0x7f00c8d431b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f00c8d4c020" loc="43:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f00c8d4c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f00c8d4c3a0"/>
        <function-ref name="source" scoped="" ref="0x7f00c8d4c530"/>
        <function-ref name="address" scoped="" ref="0x7f00c8d4c6c0"/>
        <function-ref name="destination" scoped="" ref="0x7f00c8d4c850"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c8d4c9e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c8d4cb70"/>
        <function-ref name="type" scoped="" ref="0x7f00c8d4cd00"/>
        <function-ref name="setType" scoped="" ref="0x7f00c8d4b020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c8d4b1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f00c8d4b340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f00c8d4b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7f00c9b2d260" loc="54:../../../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f00c9b2d260"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f00c9b2d5e0"/>
        <function-ref name="changed" scoped="" ref="0x7f00c9b2d770"/>
        <function-ref name="amGroup" scoped="" ref="0x7f00c9b2d900"/>
        <function-ref name="setAddress" scoped="" ref="0x7f00c9b2da90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c9b06310" loc="44:../../../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c9b06310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9b06690"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9b06820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9b069b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f00c9b06c00" loc="45:../../../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f00c9b06c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f00c9af6020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f00c9af61b0"/>
        <function-ref name="request" scoped="" ref="0x7f00c9af6340"/>
        <function-ref name="granted" scoped="" ref="0x7f00c9af64d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f00c9af6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f00c9b07880" loc="39:../../../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f00c9b07880"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9b07c00"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9b07d90"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9b06020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f00c9a92150" loc="86:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f00c9a92150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f00c9a924f0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f00c9a92680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f00c9a911f0" loc="89:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f00c9a911f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f00c9a91590"/>
        <function-ref name="configure" scoped="" ref="0x7f00c9a91720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f00c9a93390" loc="85:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f00c9a93390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f00c9a93730"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f00c9a938c0"/>
        <function-ref name="request" scoped="" ref="0x7f00c9a93a50"/>
        <function-ref name="granted" scoped="" ref="0x7f00c9a93be0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f00c9a93d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f00c9a928d0" loc="87:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f00c9a928d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f00c9a92c50"/>
        <function-ref name="userId" scoped="" ref="0x7f00c9a92de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c8cf5460" loc="44:../../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c8cf5460"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c8cf57e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f00c8cf5a70" loc="45:../../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7f00c8cf5a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f00c8cf5df0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f00c8cf4020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f00c8cf41b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f00c8cf4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f00c8cf2850" loc="52:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f00c8cf2850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f00c8cf2bf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f00c8cf2d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f00c8cf1910" loc="56:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f00c8cf1910"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f00c8cf1cb0"/>
        <function-ref name="configure" scoped="" ref="0x7f00c8cf1e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f00c8cef120" loc="57:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f00c8cef120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f00c8cef4a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f00c8cef630"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f00c8cef7c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f00c8cef950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f00c8cf39d0" loc="51:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f00c8cf39d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f00c8cf3d70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f00c8cf2020"/>
        <function-ref name="request" scoped="" ref="0x7f00c8cf21b0"/>
        <function-ref name="granted" scoped="" ref="0x7f00c8cf2340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f00c8cf24d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f00c8cf1020" loc="53:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f00c8cf1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f00c8cf13a0"/>
        <function-ref name="userId" scoped="" ref="0x7f00c8cf1530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f00c8cefc20" loc="68:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7f00c8cefc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00c8cee020"/>
        <function-ref name="runTask" scoped="" ref="0x7f00c8cee1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c9a592b0" loc="49:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c9a592b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9a59630"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9a597c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9a59950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c9a59be0" loc="50:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c9a59be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9a58020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f00c9a5ed30" loc="42:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f00c9a5ed30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f00c9a5d0e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f00c9a8ee00" loc="39:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f00c9a8ee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9a601c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9a60350"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9a604e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9a60670"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9a60800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPacket" ref="0x7f00c9a5a470" loc="48:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c9a5a470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9a5a7f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9a5a980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9a5ab10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9a5aca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9a5ae30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9a59020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7f00c9a5d390" loc="47:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f00c9a5d390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f00c9a5d710"/>
        <function-ref name="getDSN" scoped="" ref="0x7f00c9a5d8a0"/>
        <function-ref name="setFCF" scoped="" ref="0x7f00c9a5da30"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f00c9a5dbc0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f00c9a5dd50"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f00c9a5c020"/>
        <function-ref name="setDSN" scoped="" ref="0x7f00c9a5c1b0"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f00c9a5c340"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f00c9a5c4d0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f00c9a5c660"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f00c9a5c7f0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f00c9a5c980"/>
        <function-ref name="localAddr" scoped="" ref="0x7f00c9a5cb10"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f00c9a5cda0"/>
        <function-ref name="localPan" scoped="" ref="0x7f00c9a5b020"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f00c9a5b1b0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f00c9a5b340"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f00c9a5b4d0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f00c9a5b660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c9a5b7f0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f00c9a5b980"/>
        <function-ref name="getFCF" scoped="" ref="0x7f00c9a5bb10"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f00c9a5bca0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f00c9a5be30"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f00c9a5a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f00c9a60a50" loc="40:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f00c9a60a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9a60dd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9a5e020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9a5e1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9a5e340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9a5e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f00c9a5e760" loc="41:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f00c9a5e760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9a5eae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c9a1c4a0" loc="69:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c9a1c4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9a1c820"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9a1c9b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9a1cb40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c9a1cdd0" loc="70:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c9a1cdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9a1b180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f00c9a1f730" loc="57:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f00c9a1f730"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9a1fab0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9a1fc40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9a1fdd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9a1e020"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9a1e1b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9a1e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosReceive" ref="0x7f00c9a1d020" loc="62:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosReceive" scoped="" ref="0x7f00c9a1d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9a1d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f00c9a1b410" loc="71:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f00c9a1b410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9a1b790"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9a1b920"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9a1bab0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9a1bc40"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9a1bdd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9a19020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosSend" ref="0x7f00c9a1e5d0" loc="61:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosSend" scoped="" ref="0x7f00c9a1e5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9a1e950"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9a1eae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9a1ec70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f00c9a527c0" loc="55:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f00c9a527c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9a52b40"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9a52cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9a52e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f00c9a1f120" loc="56:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f00c9a1f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9a1f4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosPacket" ref="0x7f00c9a1d630" loc="63:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosPacket" scoped="" ref="0x7f00c9a1d630"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9a1d9b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9a1db40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9a1dcd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9a1de60"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9a1c020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9a1c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c997c440" loc="48:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c997c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c997c7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f00c9980dd0" loc="40:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f00c9980dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f00c997f180"/>
        <function-ref name="address" scoped="" ref="0x7f00c997f310"/>
        <function-ref name="destination" scoped="" ref="0x7f00c997f4a0"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c997f630"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c997f7c0"/>
        <function-ref name="pan" scoped="" ref="0x7f00c997f950"/>
        <function-ref name="setPan" scoped="" ref="0x7f00c997fae0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c997fc70"/>
        <function-ref name="localPan" scoped="" ref="0x7f00c997fe00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f00c997e080" loc="41:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c997e080"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c997e400"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c997e590"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c997e720"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c997e8b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c997ea40"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c997ebd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7f00c9983e00" loc="39:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f00c9983e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f00c99821c0"/>
        <function-ref name="getDSN" scoped="" ref="0x7f00c9982350"/>
        <function-ref name="setFCF" scoped="" ref="0x7f00c99824e0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f00c9982670"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f00c9982800"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f00c9982990"/>
        <function-ref name="setDSN" scoped="" ref="0x7f00c9982b20"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f00c9982cb0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f00c9982e40"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f00c9981020"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f00c99811b0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f00c9981340"/>
        <function-ref name="localAddr" scoped="" ref="0x7f00c99814d0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f00c9981760"/>
        <function-ref name="localPan" scoped="" ref="0x7f00c99818f0"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f00c9981a80"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f00c9981c10"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f00c9981da0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f00c9980020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c99801b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f00c9980340"/>
        <function-ref name="getFCF" scoped="" ref="0x7f00c99804d0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f00c9980660"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f00c99807f0"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f00c9980980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f00c997d500" loc="47:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f00c997d500"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c997d880"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c997da10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c997dba0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c997dd30"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c997c020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c997c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f00c997ee60" loc="42:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f00c997ee60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c997d210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c8c81440" loc="51:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c8c81440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c8c817c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f00c8c862e0" loc="42:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f00c8c862e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f00c8c86660"/>
        <function-ref name="address" scoped="" ref="0x7f00c8c867f0"/>
        <function-ref name="destination" scoped="" ref="0x7f00c8c86980"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c8c86b10"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c8c86ca0"/>
        <function-ref name="pan" scoped="" ref="0x7f00c8c86e30"/>
        <function-ref name="setPan" scoped="" ref="0x7f00c8c85020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c8c851b0"/>
        <function-ref name="localPan" scoped="" ref="0x7f00c8c85340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f00c8c85590" loc="43:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c8c85590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c8c85910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c8c85aa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c8c85c30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c8c85dc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c8c83020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c8c831b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7f00c8c89020" loc="41:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f00c8c89020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f00c8c893a0"/>
        <function-ref name="getDSN" scoped="" ref="0x7f00c8c89530"/>
        <function-ref name="setFCF" scoped="" ref="0x7f00c8c896c0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f00c8c89850"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f00c8c899e0"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f00c8c89b70"/>
        <function-ref name="setDSN" scoped="" ref="0x7f00c8c89d00"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f00c8c88020"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f00c8c881b0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f00c8c88340"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f00c8c884d0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f00c8c88660"/>
        <function-ref name="localAddr" scoped="" ref="0x7f00c8c887f0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f00c8c88a80"/>
        <function-ref name="localPan" scoped="" ref="0x7f00c8c88c10"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f00c8c88da0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f00c8c87020"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f00c8c871b0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f00c8c87340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c8c874d0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f00c8c87660"/>
        <function-ref name="getFCF" scoped="" ref="0x7f00c8c877f0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f00c8c87980"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f00c8c87b10"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f00c8c87ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f00c8c83a70" loc="49:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f00c8c83a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f00c8c83df0"/>
        <function-ref name="changed" scoped="" ref="0x7f00c8c82020"/>
        <function-ref name="amGroup" scoped="" ref="0x7f00c8c821b0"/>
        <function-ref name="setAddress" scoped="" ref="0x7f00c8c82340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f00c8c83440" loc="44:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f00c8c83440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c8c837c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f00c8c825d0" loc="50:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f00c8c825d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c8c82950"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c8c82ae0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c8c82c70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c8c82e00"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c8c81020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c8c811b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c9949a70" loc="45:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c9949a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9949df0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9947020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c99471b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c9947440" loc="46:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c9947440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c99477c0"/>
        <function-ref name="header" scoped="" ref="0x7f00c9947950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7f00c9945400" loc="51:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f00c9945400"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9945780"/>
        <function-ref name="clearAll" scoped="" ref="0x7f00c9945910"/>
        <function-ref name="get" scoped="" ref="0x7f00c9945aa0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9945c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f00c994a840" loc="40:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f00c994a840"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c994abc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c994ad50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9949020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f00c9947be0" loc="48:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f00c9947be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f00c9946020"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f00c99461b0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f00c9946340"/>
        <function-ref name="getSender" scoped="" ref="0x7f00c99464d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f00c9949270" loc="41:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f00c9949270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c99495f0"/>
        <function-ref name="header" scoped="" ref="0x7f00c9949780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7f00c9946720" loc="50:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f00c9946720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f00c9946aa0"/>
        <function-ref name="insertNode" scoped="" ref="0x7f00c9946c30"/>
        <function-ref name="getNode" scoped="" ref="0x7f00c9946dc0"/>
        <function-ref name="evicted" scoped="" ref="0x7f00c9945020"/>
        <function-ref name="getIndex" scoped="" ref="0x7f00c99451b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c8c2f310" loc="49:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c8c2f310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c8c2f690"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c8c2f820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c8c2f9b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c8c2fc40" loc="50:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c8c2fc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c8c2e020"/>
        <function-ref name="header" scoped="" ref="0x7f00c8c2e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7f00c8c2dab0" loc="54:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f00c8c2dab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c8c2de30"/>
        <function-ref name="clearAll" scoped="" ref="0x7f00c8c2b020"/>
        <function-ref name="get" scoped="" ref="0x7f00c8c2b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8c2b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f00c8c319b0" loc="41:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f00c8c319b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c8c31d30"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c8c30020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c8c301b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7f00c8c2ee80" loc="53:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f00c8c2ee80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f00c8c2d220"/>
        <function-ref name="insertNode" scoped="" ref="0x7f00c8c2d3b0"/>
        <function-ref name="getNode" scoped="" ref="0x7f00c8c2d540"/>
        <function-ref name="evicted" scoped="" ref="0x7f00c8c2d6d0"/>
        <function-ref name="getIndex" scoped="" ref="0x7f00c8c2d860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f00c8c30400" loc="42:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f00c8c30400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c8c30780"/>
        <function-ref name="header" scoped="" ref="0x7f00c8c30910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c8c30b60" loc="44:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c8c30b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c8c2f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UniqueConfig" ref="0x7f00c8c2e400" loc="52:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7f00c8c2e400"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f00c8c2e780"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f00c8c2e910"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f00c8c2eaa0"/>
        <function-ref name="getSender" scoped="" ref="0x7f00c8c2ec30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c9933950" loc="85:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c9933950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9933cd0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9933e60"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9932020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c99322b0" loc="86:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c99322b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9932630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedPacketAcks" ref="0x7f00c9930d90" loc="93:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7f00c9930d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f00c992f180"/>
        <function-ref name="noAck" scoped="" ref="0x7f00c992f310"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f00c992f4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f00c9940e40" loc="77:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f00c9940e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c99351e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9935370"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9935500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f00c9934a10" loc="80:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c9934a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9934d90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9933020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c99331b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9933340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c99334d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9933660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f00c99328c0" loc="87:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f00c99328c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9932c40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9932dd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9931020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c99311b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9931340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c99314d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UnconnectedPacketLink" ref="0x7f00c9930100" loc="92:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7f00c9930100"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f00c9930480"/>
        <function-ref name="setRetries" scoped="" ref="0x7f00c9930610"/>
        <function-ref name="getRetries" scoped="" ref="0x7f00c99307a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f00c9930930"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f00c9930ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f00c9935790" loc="78:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f00c9935790"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9935b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f00c9931720" loc="88:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9931720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f00c9931aa0"/>
        <function-ref name="noAck" scoped="" ref="0x7f00c9931c30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f00c9931dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f00c9935d60" loc="79:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f00c9935d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f00c9934180"/>
        <function-ref name="setRetries" scoped="" ref="0x7f00c9934310"/>
        <function-ref name="getRetries" scoped="" ref="0x7f00c99344a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f00c9934630"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f00c99347c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f00c992a880" loc="39:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f00c992a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f00c992ac00"/>
        <function-ref name="stopDone" scoped="" ref="0x7f00c992ad90"/>
        <function-ref name="start" scoped="" ref="0x7f00c9915020"/>
        <function-ref name="stop" scoped="" ref="0x7f00c99151b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c99118c0" loc="49:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c99118c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9911c40"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9911dd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9910020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c99102b0" loc="50:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c99102b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9910630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f00c9915440" loc="40:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f00c9915440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c99157c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9915950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9915ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f00c99143d0" loc="42:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c99143d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9914750"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c99148e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9914a70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9914c00"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9914d90"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9913020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f00c9913270" loc="44:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c9913270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f00c99135f0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f00c9913780"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f00c9913910"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f00c9913aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f00c9913d90" loc="48:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f00c9913d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f00c9911180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f00c9911310"/>
        <function-ref name="start" scoped="" ref="0x7f00c99114a0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9911630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f00c9915d70" loc="41:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f00c9915d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9914180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f00c99108c0" loc="51:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f00c99108c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9910c40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9910dd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c990f020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c990f1b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c990f340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c990f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f00c8c0a640" loc="37:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f00c8c0a640"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f00c8c0a9c0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f00c8c0ab50"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f00c8c0ace0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f00c8c0ae70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f00c989fa10" loc="39:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f00c989fa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f00c989fd90"/>
        <function-ref name="stopDone" scoped="" ref="0x7f00c989e020"/>
        <function-ref name="start" scoped="" ref="0x7f00c989e1b0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c989e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7f00c989caa0" loc="47:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f00c989caa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f00c989ce20"/>
        <function-ref name="turnOn" scoped="" ref="0x7f00c989b020"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c989b1b0"/>
        <function-ref name="done" scoped="" ref="0x7f00c989b340"/>
        <function-ref name="standby" scoped="" ref="0x7f00c989b4d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c989b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f00c989e5d0" loc="40:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f00c989e5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c989e950"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c989eae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c989ec70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7f00c989a270" loc="49:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f00c989a270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c989a5f0"/>
        <function-ref name="header" scoped="" ref="0x7f00c989a780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f00c989d020" loc="41:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f00c989d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c989d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7f00c989b8b0" loc="48:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f00c989b8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c989bc30"/>
        <function-ref name="ready" scoped="" ref="0x7f00c989bdc0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c989a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f00c989d5f0" loc="42:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f00c989d5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f00c989d970"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c989db00"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c989dc90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f00c989c020" loc="46:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f00c989c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f00c989c3a0"/>
        <function-ref name="suspend" scoped="" ref="0x7f00c989c530"/>
        <function-ref name="resume" scoped="" ref="0x7f00c989c6c0"/>
        <function-ref name="run" scoped="" ref="0x7f00c989c850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f00c8c03bf0" loc="43:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f00c8c03bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f00c8c01020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f00c8c011b0"/>
        <function-ref name="start" scoped="" ref="0x7f00c8c01340"/>
        <function-ref name="stop" scoped="" ref="0x7f00c8c014d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7f00c8c01760" loc="44:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c8c01760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c8c01ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7f00c8bff670" loc="52:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f00c8bff670"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f00c8bff9f0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f00c8bffb80"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c8bffd10"/>
        <function-ref name="done" scoped="" ref="0x7f00c8bfe020"/>
        <function-ref name="standby" scoped="" ref="0x7f00c8bfe1b0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c8bfe340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f00c8c01d70" loc="46:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f00c8c01d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c8c00180"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c8c00310"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c8c004a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0x7f00c8bfb940" loc="189:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0x7f00c8bfb940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00c8bfbcc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f00c8bfbe50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7f00c8bfd950" loc="55:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f00c8bfd950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c8bfdcd0"/>
        <function-ref name="header" scoped="" ref="0x7f00c8bfde60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stateDoneTask" ref="0x7f00c8bfa160" loc="144:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stateDoneTask" scoped="" ref="0x7f00c8bfa160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00c8bfa4e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f00c8bfa670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f00c8c00730" loc="47:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f00c8c00730"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c8c00ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="deliverTask" ref="0x7f00c8bfb160" loc="322:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="deliverTask" scoped="" ref="0x7f00c8bfb160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00c8bfb4e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f00c8bfb670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7f00c8bfd060" loc="54:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f00c8bfd060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c8bfd3e0"/>
        <function-ref name="ready" scoped="" ref="0x7f00c8bfd570"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c8bfd700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f00c8c00d00" loc="48:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f00c8c00d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f00c8bff0a0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c8bff230"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c8bff3c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f00c8bfe590" loc="53:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f00c8bfe590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f00c8bfe910"/>
        <function-ref name="suspend" scoped="" ref="0x7f00c8bfeaa0"/>
        <function-ref name="resume" scoped="" ref="0x7f00c8bfec30"/>
        <function-ref name="run" scoped="" ref="0x7f00c8bfedc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c9843310" loc="44:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c9843310"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9843690"/>
        <function-ref name="ready" scoped="" ref="0x7f00c9843820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c98439b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c9843c40" loc="45:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c9843c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9842020"/>
        <function-ref name="header" scoped="" ref="0x7f00c98421b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f00c9842400" loc="46:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9842400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f00c9842780"/>
        <function-ref name="wait" scoped="" ref="0x7f00c9842910"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9842aa0"/>
        <function-ref name="isFree" scoped="" ref="0x7f00c9842c30"/>
        <function-ref name="getNow" scoped="" ref="0x7f00c9842dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f00c98410a0" loc="48:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f00c98410a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f00c9841420"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f00c98415b0"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f00c9841740"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f00c98418d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f00c9844ac0" loc="40:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f00c9844ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9844e40"/>
        <function-ref name="header" scoped="" ref="0x7f00c9843020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f00c98441d0" loc="39:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f00c98441d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9844550"/>
        <function-ref name="ready" scoped="" ref="0x7f00c98446e0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9844870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c8bc2820" loc="47:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c8bc2820"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c8bc2ba0"/>
        <function-ref name="ready" scoped="" ref="0x7f00c8bc2d30"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c8bc1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c8bc12b0" loc="48:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c8bc12b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c8bc1630"/>
        <function-ref name="header" scoped="" ref="0x7f00c8bc17c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f00c8bc1a10" loc="49:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c8bc1a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f00c8bc1d90"/>
        <function-ref name="wait" scoped="" ref="0x7f00c8bc0020"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c8bc01b0"/>
        <function-ref name="isFree" scoped="" ref="0x7f00c8bc0340"/>
        <function-ref name="getNow" scoped="" ref="0x7f00c8bc04d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f00c8bc0720" loc="50:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f00c8bc0720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f00c8bc0aa0"/>
        <function-ref name="rand32" scoped="" ref="0x7f00c8bc0c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f00c8bbf020" loc="51:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f00c8bbf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f00c8bbf3a0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f00c8bbf530"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f00c8bbf6c0"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f00c8bbf850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f00c8bc2020" loc="43:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f00c8bc2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c8bc23a0"/>
        <function-ref name="header" scoped="" ref="0x7f00c8bc2530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f00c8bc3660" loc="42:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f00c8bc3660"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c8bc39e0"/>
        <function-ref name="ready" scoped="" ref="0x7f00c8bc3b70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c8bc3d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="calcNextRandom" ref="0x7f00c8bbfb20" loc="78:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="calcNextRandom" scoped="" ref="0x7f00c8bbfb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00c8bbd020"/>
        <function-ref name="runTask" scoped="" ref="0x7f00c8bbd1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f00c985aa20" loc="46:../../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f00c985aa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f00c985ada0"/>
        <function-ref name="rand32" scoped="" ref="0x7f00c9859020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f00c9857920" loc="45:../../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7f00c9857920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c985a560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c985e9b0" loc="44:../../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c985e9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c985ed30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f00c9853a20" loc="48:../../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f00c9853a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f00c9853da0"/>
        <function-ref name="rand32" scoped="" ref="0x7f00c9852020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f00c9854940" loc="47:../../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7f00c9854940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9853560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c9854080" loc="46:../../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c9854080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9854400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c9810020" loc="49:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c9810020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c98103a0"/>
        <function-ref name="ready" scoped="" ref="0x7f00c9810530"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c98106c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c9810950" loc="50:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c9810950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9810cd0"/>
        <function-ref name="header" scoped="" ref="0x7f00c9810e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f00c980f0e0" loc="51:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c980f0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f00c980f460"/>
        <function-ref name="wait" scoped="" ref="0x7f00c980f5f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c980f780"/>
        <function-ref name="isFree" scoped="" ref="0x7f00c980f910"/>
        <function-ref name="getNow" scoped="" ref="0x7f00c980faa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AckReceivedFlag" ref="0x7f00c980de60" loc="54:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AckReceivedFlag" scoped="" ref="0x7f00c980de60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c980c210"/>
        <function-ref name="get" scoped="" ref="0x7f00c980c3a0"/>
        <function-ref name="setValue" scoped="" ref="0x7f00c980c530"/>
        <function-ref name="set" scoped="" ref="0x7f00c980c6c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f00c980fd30" loc="53:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f00c980fd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7f00c980d0e0"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7f00c980d270"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f00c980d400"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7f00c980d590"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7f00c980d720"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7f00c980d8b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f00c980da40"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f00c980dbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f00c983cd60" loc="43:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f00c983cd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9811180"/>
        <function-ref name="header" scoped="" ref="0x7f00c9811310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f00c983c470" loc="42:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f00c983c470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c983c7f0"/>
        <function-ref name="ready" scoped="" ref="0x7f00c983c980"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c983cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f00c9811560" loc="44:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f00c9811560"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f00c98118e0"/>
        <function-ref name="noAck" scoped="" ref="0x7f00c9811a70"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f00c9811c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f00c97f4ac0" loc="39:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f00c97f4ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f00c97f4e40"/>
        <function-ref name="stopDone" scoped="" ref="0x7f00c97f3020"/>
        <function-ref name="start" scoped="" ref="0x7f00c97f31b0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c97f3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f00c97ef400" loc="46:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f00c97ef400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f00c97ef780"/>
        <function-ref name="request" scoped="" ref="0x7f00c97ef910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c97ebb00" loc="59:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c97ebb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c97ebe80"/>
        <function-ref name="ready" scoped="" ref="0x7f00c97ea030"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c97ea1c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c97ea450" loc="60:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c97ea450"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c97ea7d0"/>
        <function-ref name="header" scoped="" ref="0x7f00c97ea960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f00c97f2470" loc="43:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f00c97f2470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f00c97f27f0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f00c97f2980"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c97f2b10"/>
        <function-ref name="done" scoped="" ref="0x7f00c97f2ca0"/>
        <function-ref name="standby" scoped="" ref="0x7f00c97f2e30"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c97f1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f00c97efb60" loc="47:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c97efb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c97ee020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c97ee1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c97ee340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c97ee4d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c97ee660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c97ee7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7f00c97ecbe0" loc="58:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7f00c97ecbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f00c97eb0a0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f00c97eb230"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c97eb3c0"/>
        <function-ref name="done" scoped="" ref="0x7f00c97eb550"/>
        <function-ref name="standby" scoped="" ref="0x7f00c97eb6e0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c97eb870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7f00c97eea80" loc="49:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f00c97eea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f00c97eee00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f00c97f1b60" loc="45:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f00c97f1b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c97ef020"/>
        <function-ref name="header" scoped="" ref="0x7f00c97ef1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7f00c97ec5d0" loc="56:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7f00c97ec5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c97ec950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f00c97ed120" loc="54:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f00c97ed120"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f00c97ed4a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f00c97ed630"/>
        <function-ref name="start" scoped="" ref="0x7f00c97ed7c0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c97ed950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f00c97e9440" loc="62:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f00c97e9440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c97e97c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c97e9950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c97e9ae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c97e9c70"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c97e9e00"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c97e8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f00c97f3e80" loc="41:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7f00c97f3e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c97f2220"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f00c97e82b0" loc="64:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f00c97e82b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f00c97e8630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7f00c97edbe0" loc="55:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7f00c97edbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c97ec020"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c97ec1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c97ec340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f00c97f1270" loc="44:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f00c97f1270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c97f15f0"/>
        <function-ref name="ready" scoped="" ref="0x7f00c97f1780"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c97f1910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7f00c97eabf0" loc="61:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7f00c97eabf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f00c97e9020"/>
        <function-ref name="request" scoped="" ref="0x7f00c97e91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f00c97f3590" loc="40:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f00c97f3590"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c97f3910"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c97f3aa0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c97f3c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7f00c95bcb00" loc="50:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7f00c95bcb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c95bce80"/>
        <function-ref name="get" scoped="" ref="0x7f00c95bb030"/>
        <function-ref name="setValue" scoped="" ref="0x7f00c95bb1c0"/>
        <function-ref name="set" scoped="" ref="0x7f00c95bb350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f00c95bfc20" loc="43:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c95bfc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c95be020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c95be1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c95be340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c95be4d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c95be660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c95be7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f00c95bdcd0" loc="49:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f00c95bdcd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c95bc0a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c95bc230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c95bc3c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c95bc550"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c95bc6e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c95bc870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f00c95c2020" loc="42:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c95c2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c95c15a0"/>
        <function-ref name="clear" scoped="" ref="0x7f00c95c1cd0"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c95c2e30"/>
        <function-ref name="set" scoped="" ref="0x7f00c95bf460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f00c95bec00" loc="48:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c95bec00"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c95bd8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f00c95c6020" loc="41:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c95c6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c95c45a0"/>
        <function-ref name="clear" scoped="" ref="0x7f00c95c4cd0"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c95c6e30"/>
        <function-ref name="set" scoped="" ref="0x7f00c95c3460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7f00c8b6ee60" loc="49:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7f00c8b6ee60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c8b6d210"/>
        <function-ref name="get" scoped="" ref="0x7f00c8b6d3a0"/>
        <function-ref name="setValue" scoped="" ref="0x7f00c8b6d530"/>
        <function-ref name="set" scoped="" ref="0x7f00c8b6d6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f00c8b6e020" loc="44:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c8b6e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c8b6e3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c8b6e530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c8b6e6c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c8b6e850"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c8b6e9e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c8b6eb70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f00c8b6acd0" loc="54:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f00c8b6acd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c8b690a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c8b69230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c8b693c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c8b69550"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c8b696e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c8b69870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f00c8b722a0" loc="43:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f00c8b722a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c8b71800"/>
        <function-ref name="clear" scoped="" ref="0x7f00c8b6f020"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c8b710d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8b6f750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f00c8b6da70" loc="51:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c8b6da70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c8b6c6f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f00c8b6cc40" loc="52:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f00c8b6cc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c8b6a8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f00c8b75360" loc="42:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f00c8b75360"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c8b748e0"/>
        <function-ref name="clear" scoped="" ref="0x7f00c8b73090"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c8b741b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8b737c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f00c9791080" loc="20:../../../../tos/system/LocalTimeMilliC.nc">
      <component-ref qname="LocalTimeMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f00c9791080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c9791cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f00c978c3f0" loc="46:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7f00c978c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c977e870"/>
        <function-ref name="fired" scoped="" ref="0x7f00c978ae40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f00c9780c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f00c9780780"/>
        <function-ref name="getdt" scoped="" ref="0x7f00c977d1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f00c977ecf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c9780300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f00c978a020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f00c977e260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f00c978a4f0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c978a9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f00c977d7d0" loc="47:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f00c977d7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c977b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c9790b50" loc="45:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c9790b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c978d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x7f00c9772020" loc="29:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x7f00c9772020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c9772e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f00c9771800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f00c9771340"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c9771cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c9777020" loc="27:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c9777020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c97773a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x7f00c9777a10" loc="28:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x7f00c9777a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c97732a0"/>
        <function-ref name="fired" scoped="" ref="0x7f00c97752a0"/>
        <function-ref name="startAt" scoped="" ref="0x7f00c9775c20"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c9775760"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f00c9773760"/>
        <function-ref name="start" scoped="" ref="0x7f00c9776890"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9776da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f00c966f890" loc="61:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f00c966f890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c966b0d0"/>
        <function-ref name="fired" scoped="" ref="0x7f00c966c0d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f00c966ca50"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c966c590"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f00c966b590"/>
        <function-ref name="start" scoped="" ref="0x7f00c966e6e0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c966ebf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c966f080" loc="60:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c966f080"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f00ca123020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f00ca123020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c966f400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f00c966bbc0" loc="62:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f00c966bbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c966aa00"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f00c96694e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f00c9669020"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c96699a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x7f00c8b3ce20" loc="66:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f00c8b3ce20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f00c8b3b1c0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f00c8b3b350"/>
        <function-ref name="getControlA" scoped="" ref="0x7f00c8b3b4e0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f00c8b3b670"/>
        <function-ref name="setControlB" scoped="" ref="0x7f00c8b3b800"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f00c8b3b990"/>
        <function-ref name="getControlB" scoped="" ref="0x7f00c8b3bb20"/>
        <function-ref name="setControlA" scoped="" ref="0x7f00c8b3bcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f00c8b484b0" loc="61:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f00c8b484b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c8b45db0"/>
        <function-ref name="fired" scoped="" ref="0x7f00c8b46da0"/>
        <function-ref name="startAt" scoped="" ref="0x7f00c8b45760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c8b452a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f00c8b442a0"/>
        <function-ref name="start" scoped="" ref="0x7f00c8b463d0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c8b468e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c8b49c20" loc="60:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c8b49c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c8b48020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f00c8b448d0" loc="62:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f00c8b448d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c8b43780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f00c8b41150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f00c8b43c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c8b41610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x7f00c8b36450" loc="68:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f00c8b36450"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f00c8b367d0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f00c8b36960"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f00c8b36af0"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f00c8b36c80"/>
        <function-ref name="countBusy" scoped="" ref="0x7f00c8b36e10"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f00c8b35020"/>
        <function-ref name="getAssr" scoped="" ref="0x7f00c8b351b0"/>
        <function-ref name="setAssr" scoped="" ref="0x7f00c8b35340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x7f00c8b3a0a0" loc="67:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f00c8b3a0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f00c8b38a10"/>
        <function-ref name="fired" scoped="" ref="0x7f00c8b396c0"/>
        <function-ref name="get" scoped="" ref="0x7f00c8b3acd0"/>
        <function-ref name="reset" scoped="" ref="0x7f00c8b39b80"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c8b36020"/>
        <function-ref name="set" scoped="" ref="0x7f00c8b391b0"/>
        <function-ref name="start" scoped="" ref="0x7f00c8b38090"/>
        <function-ref name="stop" scoped="" ref="0x7f00c8b38550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f00c8b41bc0" loc="65:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f00c8b41bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f00c8b3c020"/>
        <function-ref name="test" scoped="" ref="0x7f00c8b3e590"/>
        <function-ref name="get" scoped="" ref="0x7f00c8b40820"/>
        <function-ref name="setScale" scoped="" ref="0x7f00c8b3c4e0"/>
        <function-ref name="getScale" scoped="" ref="0x7f00c8b3c9f0"/>
        <function-ref name="reset" scoped="" ref="0x7f00c8b3f720"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c8b3f260"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c8b3ea50"/>
        <function-ref name="set" scoped="" ref="0x7f00c8b40ce0"/>
        <function-ref name="start" scoped="" ref="0x7f00c8b3fbe0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c8b3e0d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f00c96e1020" loc="82:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f00c96e1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f00c96e13a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f00c96e1530"/>
        <function-ref name="getControlA" scoped="" ref="0x7f00c96e16c0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f00c96e1850"/>
        <function-ref name="setControlB" scoped="" ref="0x7f00c96e19e0"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f00c96e1b70"/>
        <function-ref name="getControlB" scoped="" ref="0x7f00c96e1d00"/>
        <function-ref name="setControlA" scoped="" ref="0x7f00c96e0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7f00c96dda40" loc="84:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f00c96dda40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f00c96dddc0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f00c96db020"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f00c96db1b0"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f00c96db340"/>
        <function-ref name="countBusy" scoped="" ref="0x7f00c96db4d0"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f00c96db660"/>
        <function-ref name="getAssr" scoped="" ref="0x7f00c96db7f0"/>
        <function-ref name="setAssr" scoped="" ref="0x7f00c96db980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f00c96e0520" loc="83:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f00c96e0520"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f00c96dd020"/>
        <function-ref name="fired" scoped="" ref="0x7f00c96dfb80"/>
        <function-ref name="get" scoped="" ref="0x7f00c96df1b0"/>
        <function-ref name="reset" scoped="" ref="0x7f00c96de090"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c96dd4e0"/>
        <function-ref name="set" scoped="" ref="0x7f00c96df670"/>
        <function-ref name="start" scoped="" ref="0x7f00c96de550"/>
        <function-ref name="stop" scoped="" ref="0x7f00c96dea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f00c96e9c60" loc="81:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f00c96e9c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f00c96e3020"/>
        <function-ref name="test" scoped="" ref="0x7f00c96e4610"/>
        <function-ref name="get" scoped="" ref="0x7f00c96e68e0"/>
        <function-ref name="setScale" scoped="" ref="0x7f00c96e34e0"/>
        <function-ref name="getScale" scoped="" ref="0x7f00c96e39f0"/>
        <function-ref name="reset" scoped="" ref="0x7f00c96e57a0"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c96e52e0"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c96e4ad0"/>
        <function-ref name="set" scoped="" ref="0x7f00c96e6da0"/>
        <function-ref name="start" scoped="" ref="0x7f00c96e5c60"/>
        <function-ref name="stop" scoped="" ref="0x7f00c96e4150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f00c96d22b0" loc="83:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f00c96d22b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f00c96d2630"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f00c96d27c0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f00c96d2950"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f00c96d2ae0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f00c96d2c70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f00c96d2e00"/>
        <function-ref name="getControlB" scoped="" ref="0x7f00c96d1020"/>
        <function-ref name="setControlA" scoped="" ref="0x7f00c96d11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f00c96cda70" loc="85:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f00c96cda70"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f00c96cddf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7f00c96cc230" loc="86:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f00c96cc230"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f00c96cc5b0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f00c96cc740"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f00c96cc8d0"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f00c96cca60"/>
        <function-ref name="countBusy" scoped="" ref="0x7f00c96ccbf0"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f00c96ccd80"/>
        <function-ref name="getAssr" scoped="" ref="0x7f00c96cb020"/>
        <function-ref name="setAssr" scoped="" ref="0x7f00c96cb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f00c96d16b0" loc="84:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f00c96d16b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f00c96cd110"/>
        <function-ref name="fired" scoped="" ref="0x7f00c96d0da0"/>
        <function-ref name="get" scoped="" ref="0x7f00c96d03d0"/>
        <function-ref name="reset" scoped="" ref="0x7f00c96cf2a0"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c96cd5d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c96d0890"/>
        <function-ref name="start" scoped="" ref="0x7f00c96cf760"/>
        <function-ref name="stop" scoped="" ref="0x7f00c96cfc20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f00c96d7020" loc="82:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f00c96d7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f00c96d3350"/>
        <function-ref name="test" scoped="" ref="0x7f00c96d59a0"/>
        <function-ref name="get" scoped="" ref="0x7f00c96d7c50"/>
        <function-ref name="setScale" scoped="" ref="0x7f00c96d3810"/>
        <function-ref name="getScale" scoped="" ref="0x7f00c96d3d20"/>
        <function-ref name="reset" scoped="" ref="0x7f00c96d6b20"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c96d6660"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c96d5e60"/>
        <function-ref name="set" scoped="" ref="0x7f00c96d6150"/>
        <function-ref name="start" scoped="" ref="0x7f00c96d5020"/>
        <function-ref name="stop" scoped="" ref="0x7f00c96d54e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f00c9636490" loc="74:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x7f00c9636490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00c9636810"/>
        <function-ref name="runTask" scoped="" ref="0x7f00c96369a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f00c963a1d0" loc="49:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f00c963a1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c9637b30"/>
        <function-ref name="fired" scoped="" ref="0x7f00c96399f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f00c96374e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c9637020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f00c9636020"/>
        <function-ref name="start" scoped="" ref="0x7f00c9639020"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9639530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f00c9640cf0" loc="48:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f00c9640cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c963b220"/>
        <function-ref name="fired" scoped="" ref="0x7f00c963e7c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f00c963c590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f00c963c110"/>
        <function-ref name="getdt" scoped="" ref="0x7f00c963bb20"/>
        <function-ref name="gett0" scoped="" ref="0x7f00c963b6a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c963ec40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f00c963f940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f00c963cba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f00c963fe10"/>
        <function-ref name="stop" scoped="" ref="0x7f00c963e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f00c95e6a00" loc="71:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x7f00c95e6a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00c95e6d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f00c95e5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f00c95eb640" loc="49:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x7f00c95eb640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c95e7c40"/>
        <function-ref name="fired" scoped="" ref="0x7f00c95e81e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f00c95e7020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f00c95e8ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f00c95e6590"/>
        <function-ref name="gett0" scoped="" ref="0x7f00c95e6110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c95e8660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f00c95ea390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f00c95e7630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f00c95ea860"/>
        <function-ref name="stop" scoped="" ref="0x7f00c95ead30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f00c95f1150" loc="48:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f00c95f1150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c95ed700"/>
        <function-ref name="fired" scoped="" ref="0x7f00c95f0c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f00c95eea50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f00c95ee5b0"/>
        <function-ref name="getdt" scoped="" ref="0x7f00c95eb090"/>
        <function-ref name="gett0" scoped="" ref="0x7f00c95edba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c95ee110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f00c95f1d60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f00c95ed0d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f00c95f02a0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c95f0790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f00c95e2790" loc="48:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f00c95e2790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c95e13f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f00c95e1a60" loc="49:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f00c95e1a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c95d7890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f00c95d6260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f00c95d7d50"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c95d6720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f00c95cf2e0" loc="49:../../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7f00c95cf2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c95cb870"/>
        <function-ref name="fired" scoped="" ref="0x7f00c95cee40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f00c95ccc00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f00c95cc780"/>
        <function-ref name="getdt" scoped="" ref="0x7f00c95ca1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f00c95cbcf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c95cc300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f00c95ce020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f00c95cb260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f00c95ce4f0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c95ce9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f00c95b6590" loc="43:../../../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c95b6590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c95b6910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c95b6aa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c95b6c30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c95b6dc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9595020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c95951b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f00c95954a0" loc="48:../../../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f00c95954a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9595820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c95959b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9595b40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9595cd0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9595e60"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9594020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x7f00c95b79b0" loc="42:../../../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x7f00c95b79b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c95b7d50"/>
        <function-ref name="get" scoped="" ref="0x7f00c95b6020"/>
        <function-ref name="setValue" scoped="" ref="0x7f00c95b61b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c95b6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f00c95920e0" loc="39:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f00c95920e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f00c9592460"/>
        <function-ref name="stopDone" scoped="" ref="0x7f00c95925f0"/>
        <function-ref name="start" scoped="" ref="0x7f00c9592780"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9592910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f00c958fb60" loc="46:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f00c958fb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f00c958e020"/>
        <function-ref name="request" scoped="" ref="0x7f00c958e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f00c9589440" loc="59:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f00c9589440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c95897c0"/>
        <function-ref name="ready" scoped="" ref="0x7f00c9589950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9589ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f00c9589d70" loc="60:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f00c9589d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9588180"/>
        <function-ref name="header" scoped="" ref="0x7f00c9588310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f00c9591b60" loc="43:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f00c9591b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f00c9590020"/>
        <function-ref name="turnOn" scoped="" ref="0x7f00c95901b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c9590340"/>
        <function-ref name="done" scoped="" ref="0x7f00c95904d0"/>
        <function-ref name="standby" scoped="" ref="0x7f00c9590660"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c95907f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f00c958e400" loc="47:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c958e400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c958e780"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c958e910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c958eaa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c958ec30"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c958edc0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c958c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7f00c958a410" loc="58:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7f00c958a410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f00c958a890"/>
        <function-ref name="turnOn" scoped="" ref="0x7f00c958aa20"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c958abb0"/>
        <function-ref name="done" scoped="" ref="0x7f00c958ad40"/>
        <function-ref name="standby" scoped="" ref="0x7f00c9589020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c95891b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7f00c958c2b0" loc="49:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f00c958c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f00c958c630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f00c958f400" loc="45:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f00c958f400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c958f780"/>
        <function-ref name="header" scoped="" ref="0x7f00c958f910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7f00c958bd70" loc="56:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7f00c958bd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c958a180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f00c958c920" loc="54:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f00c958c920"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f00c958cca0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f00c958ce30"/>
        <function-ref name="start" scoped="" ref="0x7f00c958b020"/>
        <function-ref name="stop" scoped="" ref="0x7f00c958b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f00c9588d40" loc="62:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f00c9588d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c95870e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9587270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9587400"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9587590"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9587720"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c95878b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f00c9591590" loc="41:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7f00c9591590"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9591910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f00c9587b40" loc="64:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f00c9587b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f00c9586020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7f00c958b440" loc="55:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7f00c958b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c958b7c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c958b950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c958bae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f00c9590a40" loc="44:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f00c9590a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9590dc0"/>
        <function-ref name="ready" scoped="" ref="0x7f00c958f020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c958f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7f00c95885a0" loc="61:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7f00c95885a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f00c9588920"/>
        <function-ref name="request" scoped="" ref="0x7f00c9588ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f00c9592b60" loc="40:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f00c9592b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9591020"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c95911b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9591340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f00c957d5c0" loc="45:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f00c957d5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f00c957d940"/>
        <function-ref name="request" scoped="" ref="0x7f00c957dad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f00c95783b0" loc="49:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f00c95783b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9577ac0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9577570"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c9577020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9576090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7f00c9563ca0" loc="64:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7f00c9563ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c95620a0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9562230"/>
        <function-ref name="setValue" scoped="" ref="0x7f00c95623c0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9562550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f00c95672e0" loc="61:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f00c95672e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c9566840"/>
        <function-ref name="clear" scoped="" ref="0x7f00c9565020"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c9566110"/>
        <function-ref name="set" scoped="" ref="0x7f00c9565750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f00c9582610" loc="42:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f00c9582610"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f00c9582990"/>
        <function-ref name="turnOn" scoped="" ref="0x7f00c9582b20"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c9582cb0"/>
        <function-ref name="done" scoped="" ref="0x7f00c9582e40"/>
        <function-ref name="standby" scoped="" ref="0x7f00c957f020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c957f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f00c9561470" loc="66:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c9561470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f00c95617f0"/>
        <function-ref name="wait" scoped="" ref="0x7f00c9561980"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9561b10"/>
        <function-ref name="isFree" scoped="" ref="0x7f00c9561ca0"/>
        <function-ref name="getNow" scoped="" ref="0x7f00c9561e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f00c957ce80" loc="48:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f00c957ce80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c957a5e0"/>
        <function-ref name="get" scoped="" ref="0x7f00c957a090"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c957bad0"/>
        <function-ref name="set" scoped="" ref="0x7f00c957ab30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f00c957dd90" loc="46:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c957dd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c957c180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c957c310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c957c4a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c957c630"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c957c7c0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c957c950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f00c95681f0" loc="60:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f00c95681f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9568670"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9568800"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9568990"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f00c9568b20"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f00c9568cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f00c957fdd0" loc="44:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f00c957fdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c957d180"/>
        <function-ref name="header" scoped="" ref="0x7f00c957d310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f00c956edd0" loc="55:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f00c956edd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f00c9fac920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c956a6e0"/>
        <function-ref name="fired" scoped="" ref="0x7f00c956b6b0"/>
        <function-ref name="startAt" scoped="" ref="0x7f00c956a090"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c956bb70"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f00c956aba0"/>
        <function-ref name="start" scoped="" ref="0x7f00c956cca0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c956b1f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f00c9576940" loc="50:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f00c9576940"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9573090"/>
        <function-ref name="get" scoped="" ref="0x7f00c9574af0"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c95745a0"/>
        <function-ref name="set" scoped="" ref="0x7f00c95735e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f00c956fa40" loc="54:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c956fa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c956e6b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f00c957f460" loc="43:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f00c957f460"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c957f7e0"/>
        <function-ref name="ready" scoped="" ref="0x7f00c957f970"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c957fb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f00c9573e70" loc="51:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f00c9573e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c95705e0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9570090"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c9572ad0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9570b30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7f00c95628d0" loc="65:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f00c95628d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9562c50"/>
        <function-ref name="get" scoped="" ref="0x7f00c9562de0"/>
        <function-ref name="setValue" scoped="" ref="0x7f00c9561020"/>
        <function-ref name="set" scoped="" ref="0x7f00c95611b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7f00c9563110" loc="63:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f00c9563110"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9563490"/>
        <function-ref name="get" scoped="" ref="0x7f00c9563620"/>
        <function-ref name="setValue" scoped="" ref="0x7f00c95637b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9563940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f00c956f1e0" loc="52:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f00c956f1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f00c956f560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f00c9560110" loc="67:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f00c9560110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f00c9560490"/>
        <function-ref name="suspend" scoped="" ref="0x7f00c9560620"/>
        <function-ref name="resume" scoped="" ref="0x7f00c95607b0"/>
        <function-ref name="run" scoped="" ref="0x7f00c9560940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f00c9556c40" loc="52:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f00c9556c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f00c9555020"/>
        <function-ref name="request" scoped="" ref="0x7f00c95551b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f00c95364d0" loc="74:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f00c95364d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f00ca075180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f00c953c3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f00c9552a40" loc="56:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f00c9552a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c954f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9550c00"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c95506b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c954f700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7f00c95336a0" loc="80:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7f00c95336a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9533a20"/>
        <function-ref name="get" scoped="" ref="0x7f00c9533bb0"/>
        <function-ref name="setValue" scoped="" ref="0x7f00c9533d40"/>
        <function-ref name="set" scoped="" ref="0x7f00c9532020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7f00c9558600" loc="47:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f00c9558600"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f00ca1233a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f00ca1233a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9558980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f00c9531200" loc="83:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f00c9531200"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f00c9530970"/>
        <function-ref name="clear" scoped="" ref="0x7f00c952e0d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f00c9530240"/>
        <function-ref name="set" scoped="" ref="0x7f00c952e800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7f00c9542020" loc="70:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7f00c9542020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c95423a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9542530"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c95426c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9542850"/>
        <function-ref name="get" scoped="" ref="0x7f00c95429e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9542b70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9542d00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c953e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f00c952db70" loc="86:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f00c952db70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f00c952c020"/>
        <function-ref name="wait" scoped="" ref="0x7f00c952c1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c952c340"/>
        <function-ref name="isFree" scoped="" ref="0x7f00c952c4d0"/>
        <function-ref name="getNow" scoped="" ref="0x7f00c952c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f00c9558c40" loc="49:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f00c9558c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f00c9557020"/>
        <function-ref name="turnOn" scoped="" ref="0x7f00c95571b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f00c9557340"/>
        <function-ref name="done" scoped="" ref="0x7f00c95574d0"/>
        <function-ref name="standby" scoped="" ref="0x7f00c9557660"/>
        <function-ref name="getChannel" scoped="" ref="0x7f00c95577f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7f00c953c9d0" loc="75:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f00c953c9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c9535630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f00c9554550" loc="55:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f00c9554550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9553c50"/>
        <function-ref name="get" scoped="" ref="0x7f00c9553700"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c95531b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c95521f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f00c9555470" loc="53:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f00c9555470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c95557f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9555980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9555b10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c9555ca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c9555e30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9554020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SLP_TR" ref="0x7f00c953fdd0" loc="69:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7f00c953fdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9543180"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9543310"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c95434a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9543630"/>
        <function-ref name="get" scoped="" ref="0x7f00c95437c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9543950"/>
        <function-ref name="set" scoped="" ref="0x7f00c9543ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9543c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f00c9535b50" loc="77:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f00c9535b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9534020"/>
        <function-ref name="headerLength" scoped="" ref="0x7f00c95341b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f00c9534340"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f00c95344d0"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f00c9534660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f00c9556480" loc="51:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f00c9556480"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f00c9556800"/>
        <function-ref name="header" scoped="" ref="0x7f00c9556990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="releaseSpi" ref="0x7f00c949ce40" loc="856:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="releaseSpi" scoped="" ref="0x7f00c949ce40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00c949b1e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f00c949b370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f00c954d020" loc="57:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f00c954d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c954c740"/>
        <function-ref name="get" scoped="" ref="0x7f00c954c1f0"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c954dc50"/>
        <function-ref name="set" scoped="" ref="0x7f00c954cc90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f00c955aa60" loc="46:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f00c955aa60"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f00ca1233a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f00ca1233a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c955ade0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f00c9545380" loc="65:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7f00c9545380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f00c9545700"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f00c9545890"/>
        <function-ref name="request" scoped="" ref="0x7f00c9545a20"/>
        <function-ref name="granted" scoped="" ref="0x7f00c9545bb0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f00c9545d40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SELN" ref="0x7f00c9546020" loc="64:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7f00c9546020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c95464a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9546630"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c95467c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9546950"/>
        <function-ref name="get" scoped="" ref="0x7f00c9546ae0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c9546c70"/>
        <function-ref name="set" scoped="" ref="0x7f00c9546e00"/>
        <function-ref name="clr" scoped="" ref="0x7f00c9545020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f00c954a560" loc="58:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f00c954a560"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9549c90"/>
        <function-ref name="get" scoped="" ref="0x7f00c9549740"/>
        <function-ref name="isSet" scoped="" ref="0x7f00c95491f0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9548230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f00c9557aa0" loc="50:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f00c9557aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9557e20"/>
        <function-ref name="ready" scoped="" ref="0x7f00c9556020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c95561b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IRQ" ref="0x7f00c9539b10" loc="72:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f00c9539b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f00c953d020"/>
        <function-ref name="disable" scoped="" ref="0x7f00c953d1b0"/>
        <function-ref name="captured" scoped="" ref="0x7f00c953d340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f00c953d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FastSpiByte" ref="0x7f00c953f270" loc="67:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f00c953f270"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f00c953f5f0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f00c953f780"/>
        <function-ref name="splitRead" scoped="" ref="0x7f00c953f910"/>
        <function-ref name="write" scoped="" ref="0x7f00c953faa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7f00c95323a0" loc="81:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f00c95323a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9532720"/>
        <function-ref name="get" scoped="" ref="0x7f00c95328b0"/>
        <function-ref name="setValue" scoped="" ref="0x7f00c9532a40"/>
        <function-ref name="set" scoped="" ref="0x7f00c9532bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7f00c9534a10" loc="79:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f00c9534a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9534d90"/>
        <function-ref name="get" scoped="" ref="0x7f00c9533020"/>
        <function-ref name="setValue" scoped="" ref="0x7f00c95331b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9533340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f00c95488b0" loc="59:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f00c95488b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f00c9548c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f00c952d080" loc="85:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f00c952d080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f00c952d400"/>
        <function-ref name="suspend" scoped="" ref="0x7f00c952d590"/>
        <function-ref name="resume" scoped="" ref="0x7f00c952d720"/>
        <function-ref name="run" scoped="" ref="0x7f00c952d8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7f00c94567f0" loc="46:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7f00c94567f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9456b70"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c9456d00"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9455020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c94551b0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9455340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c94554d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9455660"/>
        <function-ref name="clr" scoped="" ref="0x7f00c94557f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SLP_TR" ref="0x7f00c94574e0" loc="45:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7f00c94574e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c9457860"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c94579f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c9457b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c9457d10"/>
        <function-ref name="get" scoped="" ref="0x7f00c9456020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c94561b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9456340"/>
        <function-ref name="clr" scoped="" ref="0x7f00c94564d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f00c9454ac0" loc="49:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f00c9454ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c9451390"/>
        <function-ref name="fired" scoped="" ref="0x7f00c9452360"/>
        <function-ref name="startAt" scoped="" ref="0x7f00c9452ce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c9452820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f00c9451850"/>
        <function-ref name="start" scoped="" ref="0x7f00c9453970"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9453e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiResource" ref="0x7f00c945ab50" loc="42:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7f00c945ab50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f00c9458020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f00c94581b0"/>
        <function-ref name="request" scoped="" ref="0x7f00c9458340"/>
        <function-ref name="granted" scoped="" ref="0x7f00c94584d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f00c9458660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SELN" ref="0x7f00c945d940" loc="41:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7f00c945d940"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c945dcc0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c945de50"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c945a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c945a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f00c945a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c945a4d0"/>
        <function-ref name="set" scoped="" ref="0x7f00c945a660"/>
        <function-ref name="clr" scoped="" ref="0x7f00c945a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7f00c9455b10" loc="48:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f00c9455b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f00c9454020"/>
        <function-ref name="disable" scoped="" ref="0x7f00c94541b0"/>
        <function-ref name="captured" scoped="" ref="0x7f00c9454340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f00c94544d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f00c9458920" loc="43:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f00c9458920"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f00c9458ca0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f00c9458e30"/>
        <function-ref name="splitRead" scoped="" ref="0x7f00c9457020"/>
        <function-ref name="write" scoped="" ref="0x7f00c94571b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f00c944f020" loc="50:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f00c944f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f00c9fac4f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c944fc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortCLKM" ref="0x7f00c943f3d0" loc="46:../../../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortCLKM" scoped="" ref="0x7f00c943f3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c943f750"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c943f8e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c943fa70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c943fc00"/>
        <function-ref name="get" scoped="" ref="0x7f00c943fd90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c943e020"/>
        <function-ref name="set" scoped="" ref="0x7f00c943e1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c943e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Capture" ref="0x7f00c94427f0" loc="45:../../../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f00c94427f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f00c9440e60"/>
        <function-ref name="test" scoped="" ref="0x7f00c94404e0"/>
        <function-ref name="get" scoped="" ref="0x7f00c94494c0"/>
        <function-ref name="captured" scoped="" ref="0x7f00c9441020"/>
        <function-ref name="reset" scoped="" ref="0x7f00c9441530"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c94409a0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9449980"/>
        <function-ref name="start" scoped="" ref="0x7f00c94419f0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9440020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortIRQ" ref="0x7f00c943e680" loc="47:../../../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortIRQ" scoped="" ref="0x7f00c943e680"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c943ea00"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c943eb90"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c943ed20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c943c020"/>
        <function-ref name="get" scoped="" ref="0x7f00c943c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c943c340"/>
        <function-ref name="set" scoped="" ref="0x7f00c943c4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c943c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f00c944b680" loc="40:../../../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f00c944b680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c944ba00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7f00c944e9c0" loc="39:../../../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f00c944e9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f00c944ed40"/>
        <function-ref name="disable" scoped="" ref="0x7f00c944b020"/>
        <function-ref name="captured" scoped="" ref="0x7f00c944b1b0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f00c944b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f00c9423c80" loc="84:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7f00c9423c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c942c0a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c942c230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f00c942b840" loc="82:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7f00c942b840"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f00c942bbc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c942e1f0" loc="81:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c942e1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c942e570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f00c942d020" loc="83:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f00c942d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f00c942d3a0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f00c942d530"/>
        <function-ref name="splitRead" scoped="" ref="0x7f00c942d6c0"/>
        <function-ref name="write" scoped="" ref="0x7f00c942d850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f00c942ca60" loc="85:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f00c942ca60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f00c942cde0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f00c942a020"/>
        <function-ref name="request" scoped="" ref="0x7f00c942a1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f00c942a340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f00c942a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f00c941ed70" loc="95:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f00c941ed70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f00c941d180"/>
        <function-ref name="configure" scoped="" ref="0x7f00c941d310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="zeroTask" ref="0x7f00c93e0de0" loc="294:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="zeroTask" scoped="" ref="0x7f00c93e0de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00c93df180"/>
        <function-ref name="runTask" scoped="" ref="0x7f00c93df310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f00c941e020" loc="94:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7f00c941e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c941e3a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c941e530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f00c9420e00" loc="92:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7f00c9420e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f00c941f1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c94207e0" loc="91:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c94207e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9420b60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Spi" ref="0x7f00c9402800" loc="98:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Spi" scoped="" ref="0x7f00c9402800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f00c9402b80"/>
        <function-ref name="sleep" scoped="" ref="0x7f00c94001b0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f00c941b020"/>
        <function-ref name="dataReady" scoped="" ref="0x7f00c9400340"/>
        <function-ref name="initMaster" scoped="" ref="0x7f00c941b340"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f00c941b4d0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f00c941b660"/>
        <function-ref name="read" scoped="" ref="0x7f00c941b7f0"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f00c941b980"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f00c941bb10"/>
        <function-ref name="setClock" scoped="" ref="0x7f00c941bca0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f00c941be30"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f00c941a020"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f00c941a2b0"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f00c941a440"/>
        <function-ref name="write" scoped="" ref="0x7f00c941a5d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f00c941a760"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f00c941a8f0"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f00c941aa80"/>
        <function-ref name="getClock" scoped="" ref="0x7f00c941ac10"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f00c941ada0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f00c9402d10"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f00c941b1b0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f00c9400020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f00c941f480" loc="93:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f00c941f480"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f00c941f800"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f00c941f990"/>
        <function-ref name="splitRead" scoped="" ref="0x7f00c941fb20"/>
        <function-ref name="write" scoped="" ref="0x7f00c941fcb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7f00c9400620" loc="99:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f00c9400620"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f00c94009a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiBus" ref="0x7f00c93c1710" loc="76:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <component-ref qname="HplAtm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiBus" scoped="" ref="0x7f00c93c1710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f00c93c1a90"/>
        <function-ref name="sleep" scoped="" ref="0x7f00c93bc020"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f00c93c1db0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f00c93bc1b0"/>
        <function-ref name="initMaster" scoped="" ref="0x7f00c93be1b0"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f00c93be340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f00c93be4d0"/>
        <function-ref name="read" scoped="" ref="0x7f00c93be660"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f00c93be7f0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f00c93be980"/>
        <function-ref name="setClock" scoped="" ref="0x7f00c93beb10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f00c93beca0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f00c93bee30"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f00c93bd120"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f00c93bd2b0"/>
        <function-ref name="write" scoped="" ref="0x7f00c93bd440"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f00c93bd5d0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f00c93bd760"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f00c93bd8f0"/>
        <function-ref name="getClock" scoped="" ref="0x7f00c93bda80"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f00c93bdc10"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f00c93c1c20"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f00c93be020"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f00c93bdda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MISO" ref="0x7f00c93b1e30" loc="81:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MISO" scoped="" ref="0x7f00c93b1e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c93b01e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c93b0370"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c93b0500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c93b0690"/>
        <function-ref name="get" scoped="" ref="0x7f00c93b0820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c93b09b0"/>
        <function-ref name="set" scoped="" ref="0x7f00c93b0b40"/>
        <function-ref name="clr" scoped="" ref="0x7f00c93b0cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x7f00c93b4970" loc="79:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0x7f00c93b4970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c93b4cf0"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c93b4e80"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c93b2030"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c93b21c0"/>
        <function-ref name="get" scoped="" ref="0x7f00c93b2350"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c93b24e0"/>
        <function-ref name="set" scoped="" ref="0x7f00c93b2670"/>
        <function-ref name="clr" scoped="" ref="0x7f00c93b2800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SS" ref="0x7f00c93b56c0" loc="78:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SS" scoped="" ref="0x7f00c93b56c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c93b5a40"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c93b5bd0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c93b5d60"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c93b4020"/>
        <function-ref name="get" scoped="" ref="0x7f00c93b41b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c93b4340"/>
        <function-ref name="set" scoped="" ref="0x7f00c93b44d0"/>
        <function-ref name="clr" scoped="" ref="0x7f00c93b4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f00c93b3e00" loc="75:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f00c93b3e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f00c93b51c0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c93b5350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Mcu" ref="0x7f00c93af060" loc="82:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Mcu" scoped="" ref="0x7f00c93af060"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f00c93af3e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SPI" ref="0x7f00c93b96b0" loc="74:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SPI" scoped="" ref="0x7f00c93b96b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f00c93b9a30"/>
        <function-ref name="sleep" scoped="" ref="0x7f00c93b6020"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f00c93b9d50"/>
        <function-ref name="dataReady" scoped="" ref="0x7f00c93b61b0"/>
        <function-ref name="initMaster" scoped="" ref="0x7f00c93b81b0"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f00c93b8340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f00c93b84d0"/>
        <function-ref name="read" scoped="" ref="0x7f00c93b8660"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f00c93b87f0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f00c93b8980"/>
        <function-ref name="setClock" scoped="" ref="0x7f00c93b8b10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f00c93b8ca0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f00c93b8e30"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f00c93b7120"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f00c93b72b0"/>
        <function-ref name="write" scoped="" ref="0x7f00c93b7440"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f00c93b75d0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f00c93b7760"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f00c93b78f0"/>
        <function-ref name="getClock" scoped="" ref="0x7f00c93b7a80"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f00c93b7c10"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f00c93b9bc0"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f00c93b8020"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f00c93b7da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MOSI" ref="0x7f00c93b2b20" loc="80:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MOSI" scoped="" ref="0x7f00c93b2b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f00c93b1020"/>
        <function-ref name="isInput" scoped="" ref="0x7f00c93b11b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f00c93b1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f00c93b14d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c93b1660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f00c93b17f0"/>
        <function-ref name="set" scoped="" ref="0x7f00c93b1980"/>
        <function-ref name="clr" scoped="" ref="0x7f00c93b1b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f00c93646c0" loc="86:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f00c93646c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f00c9364a60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f00c9364bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f00c9362730" loc="89:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f00c9362730"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f00c9362ad0"/>
        <function-ref name="configure" scoped="" ref="0x7f00c9362c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f00c9365900" loc="85:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f00c9365900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f00c9365ca0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f00c9365e30"/>
        <function-ref name="request" scoped="" ref="0x7f00c9364020"/>
        <function-ref name="granted" scoped="" ref="0x7f00c93641b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f00c9364340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f00c9364e40" loc="87:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f00c9364e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f00c93621e0"/>
        <function-ref name="userId" scoped="" ref="0x7f00c9362370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c8aaa850" loc="44:../../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c8aaa850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c8aaabd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f00c8aaae60" loc="45:../../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7f00c8aaae60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f00c8aa8210"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f00c8aa83a0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f00c8aa8530"/>
        <function-ref name="dequeue" scoped="" ref="0x7f00c8aa86c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f00c8aa6b40" loc="52:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f00c8aa6b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f00c8aa5020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f00c8aa51b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f00c8aa5cf0" loc="56:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f00c8aa5cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f00c8aa40e0"/>
        <function-ref name="configure" scoped="" ref="0x7f00c8aa4270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f00c8aa4500" loc="57:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f00c8aa4500"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f00c8aa4880"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f00c8aa4a10"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f00c8aa4ba0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f00c8aa4d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f00c8aa7d80" loc="51:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f00c8aa7d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f00c8aa6180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f00c8aa6310"/>
        <function-ref name="request" scoped="" ref="0x7f00c8aa64a0"/>
        <function-ref name="granted" scoped="" ref="0x7f00c8aa6630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f00c8aa67c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f00c8aa5400" loc="53:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f00c8aa5400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f00c8aa5780"/>
        <function-ref name="userId" scoped="" ref="0x7f00c8aa5910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f00c8aa3060" loc="68:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7f00c8aa3060"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00c8aa33e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f00c8aa3570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f00c9351020" loc="80:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f00c9351020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f00c93513a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f00c9351530"/>
        <function-ref name="getControlA" scoped="" ref="0x7f00c93516c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f00c9351850"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f00c93519e0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f00c9351b70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f00c9351d00"/>
        <function-ref name="getControlB" scoped="" ref="0x7f00c9350020"/>
        <function-ref name="setControlC" scoped="" ref="0x7f00c93501b0"/>
        <function-ref name="setControlA" scoped="" ref="0x7f00c9350340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f00c9350850" loc="81:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f00c9350850"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f00c9346e60"/>
        <function-ref name="test" scoped="" ref="0x7f00c93464e0"/>
        <function-ref name="get" scoped="" ref="0x7f00c93494c0"/>
        <function-ref name="captured" scoped="" ref="0x7f00c9347020"/>
        <function-ref name="reset" scoped="" ref="0x7f00c9347530"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c93469a0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9349980"/>
        <function-ref name="start" scoped="" ref="0x7f00c93479f0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9346020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f00c9345ad0" loc="82:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f00c9345ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f00c93414e0"/>
        <function-ref name="fired" scoped="" ref="0x7f00c93421b0"/>
        <function-ref name="get" scoped="" ref="0x7f00c9344790"/>
        <function-ref name="reset" scoped="" ref="0x7f00c9342670"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c93419a0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9344c50"/>
        <function-ref name="start" scoped="" ref="0x7f00c9342b30"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9341020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f00c935bbf0" loc="79:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f00c935bbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f00c9354020"/>
        <function-ref name="test" scoped="" ref="0x7f00c93555d0"/>
        <function-ref name="get" scoped="" ref="0x7f00c93588a0"/>
        <function-ref name="setScale" scoped="" ref="0x7f00c93544e0"/>
        <function-ref name="getScale" scoped="" ref="0x7f00c93549f0"/>
        <function-ref name="reset" scoped="" ref="0x7f00c9356760"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c93562a0"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c9355a90"/>
        <function-ref name="set" scoped="" ref="0x7f00c9358d60"/>
        <function-ref name="start" scoped="" ref="0x7f00c9356c20"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9355110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f00c93372c0" loc="80:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f00c93372c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f00c9337640"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f00c93377d0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f00c9337960"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f00c9337af0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f00c9337c80"/>
        <function-ref name="setControlB" scoped="" ref="0x7f00c9337e10"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f00c9336020"/>
        <function-ref name="getControlB" scoped="" ref="0x7f00c93361b0"/>
        <function-ref name="setControlC" scoped="" ref="0x7f00c9336340"/>
        <function-ref name="setControlA" scoped="" ref="0x7f00c93364d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7f00c93315a0" loc="82:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7f00c93315a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f00c932d020"/>
        <function-ref name="fired" scoped="" ref="0x7f00c9330c10"/>
        <function-ref name="get" scoped="" ref="0x7f00c9330240"/>
        <function-ref name="reset" scoped="" ref="0x7f00c932f110"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c932d4e0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9330700"/>
        <function-ref name="start" scoped="" ref="0x7f00c932f5d0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c932fa90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f00c93369e0" loc="81:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f00c93369e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f00c9333e60"/>
        <function-ref name="test" scoped="" ref="0x7f00c93334e0"/>
        <function-ref name="get" scoped="" ref="0x7f00c93356b0"/>
        <function-ref name="captured" scoped="" ref="0x7f00c93340d0"/>
        <function-ref name="reset" scoped="" ref="0x7f00c93345e0"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c93339a0"/>
        <function-ref name="set" scoped="" ref="0x7f00c9335b70"/>
        <function-ref name="start" scoped="" ref="0x7f00c9334aa0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9333020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7f00c932dba0" loc="83:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7f00c932dba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f00c932a550"/>
        <function-ref name="fired" scoped="" ref="0x7f00c932b1f0"/>
        <function-ref name="get" scoped="" ref="0x7f00c932c7f0"/>
        <function-ref name="reset" scoped="" ref="0x7f00c932b6b0"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c932aa10"/>
        <function-ref name="set" scoped="" ref="0x7f00c932ccb0"/>
        <function-ref name="start" scoped="" ref="0x7f00c932bb70"/>
        <function-ref name="stop" scoped="" ref="0x7f00c932a090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7f00c9328120" loc="84:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7f00c9328120"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f00c9326a90"/>
        <function-ref name="fired" scoped="" ref="0x7f00c9327770"/>
        <function-ref name="get" scoped="" ref="0x7f00c9328d50"/>
        <function-ref name="reset" scoped="" ref="0x7f00c9327c30"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c9325020"/>
        <function-ref name="set" scoped="" ref="0x7f00c9327260"/>
        <function-ref name="start" scoped="" ref="0x7f00c9326110"/>
        <function-ref name="stop" scoped="" ref="0x7f00c93265d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f00c933c020" loc="79:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f00c933c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f00c9339350"/>
        <function-ref name="test" scoped="" ref="0x7f00c933a9a0"/>
        <function-ref name="get" scoped="" ref="0x7f00c933cc50"/>
        <function-ref name="setScale" scoped="" ref="0x7f00c9339810"/>
        <function-ref name="getScale" scoped="" ref="0x7f00c9339d20"/>
        <function-ref name="reset" scoped="" ref="0x7f00c933bb20"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c933b660"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c933ae60"/>
        <function-ref name="set" scoped="" ref="0x7f00c933b150"/>
        <function-ref name="start" scoped="" ref="0x7f00c933a020"/>
        <function-ref name="stop" scoped="" ref="0x7f00c933a4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f00c92576e0" loc="30:../../../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="HplRF230C.AlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f00c92576e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TOne" ref="0x7f00ca032410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c9254020"/>
        <function-ref name="fired" scoped="" ref="0x7f00c9255020"/>
        <function-ref name="startAt" scoped="" ref="0x7f00c92559a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c92554e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f00c92544e0"/>
        <function-ref name="start" scoped="" ref="0x7f00c92565b0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9256ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f00c92a1b50" loc="46:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f00c92a1b50"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f00ca123020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f00ca123020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f00c9294020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f00c9294410" loc="47:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f00c9294410"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f00c9290810"/>
        <function-ref name="test" scoped="" ref="0x7f00c9292e60"/>
        <function-ref name="get" scoped="" ref="0x7f00c9293090"/>
        <function-ref name="setScale" scoped="" ref="0x7f00c9290cd0"/>
        <function-ref name="getScale" scoped="" ref="0x7f00c928f260"/>
        <function-ref name="reset" scoped="" ref="0x7f00c9292020"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c9293a60"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c9290350"/>
        <function-ref name="set" scoped="" ref="0x7f00c9293550"/>
        <function-ref name="start" scoped="" ref="0x7f00c92924e0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c92929a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f00c8a68e10" loc="55:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f00c8a68e10"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7f00ca124c00"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7f00ca124c00"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TOne" ref="0x7f00ca032410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c8a656e0"/>
        <function-ref name="fired" scoped="" ref="0x7f00c8a666b0"/>
        <function-ref name="startAt" scoped="" ref="0x7f00c8a65090"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c8a66b70"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f00c8a65ba0"/>
        <function-ref name="start" scoped="" ref="0x7f00c8a67ca0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c8a661f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x7f00c8a5f570" loc="58:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f00c8a5f570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f00c8a5b020"/>
        <function-ref name="fired" scoped="" ref="0x7f00c8a5ebc0"/>
        <function-ref name="get" scoped="" ref="0x7f00c8a5e1f0"/>
        <function-ref name="reset" scoped="" ref="0x7f00c8a5c0d0"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c8a5b4e0"/>
        <function-ref name="set" scoped="" ref="0x7f00c8a5e6b0"/>
        <function-ref name="start" scoped="" ref="0x7f00c8a5c590"/>
        <function-ref name="stop" scoped="" ref="0x7f00c8a5ca50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x7f00c8a64140" loc="57:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f00c8a64140"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f00c8a604e0"/>
        <function-ref name="test" scoped="" ref="0x7f00c8a61a90"/>
        <function-ref name="get" scoped="" ref="0x7f00c8a64d70"/>
        <function-ref name="setScale" scoped="" ref="0x7f00c8a609a0"/>
        <function-ref name="getScale" scoped="" ref="0x7f00c8a5f020"/>
        <function-ref name="reset" scoped="" ref="0x7f00c8a62c30"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c8a62770"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c8a60020"/>
        <function-ref name="set" scoped="" ref="0x7f00c8a62260"/>
        <function-ref name="start" scoped="" ref="0x7f00c8a61110"/>
        <function-ref name="stop" scoped="" ref="0x7f00c8a615d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f00c924f3a0" loc="39:../../../../tos/platforms/iris/LocalTimeMicroC.nc">
      <component-ref qname="LocalTimeMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f00c924f3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f00ca075180"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c924e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f00c924b200" loc="24:../../../../tos/platforms/mica/CounterOne16C.nc">
      <component-ref qname="CounterOne16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f00c924b200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TOne" ref="0x7f00ca032410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c924a090"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f00c924aa10"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f00c924a550"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c9249020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f00c9245020" loc="45:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f00c9245020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TOne" ref="0x7f00ca032410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c9245e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f00c9233800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f00c9233340"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c9233cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f00c9232280" loc="46:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f00c9232280"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f00c922e810"/>
        <function-ref name="test" scoped="" ref="0x7f00c922fe60"/>
        <function-ref name="get" scoped="" ref="0x7f00c9231020"/>
        <function-ref name="setScale" scoped="" ref="0x7f00c922ecd0"/>
        <function-ref name="getScale" scoped="" ref="0x7f00c922d260"/>
        <function-ref name="reset" scoped="" ref="0x7f00c922f020"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c92319f0"/>
        <function-ref name="isOn" scoped="" ref="0x7f00c922e350"/>
        <function-ref name="set" scoped="" ref="0x7f00c92314e0"/>
        <function-ref name="start" scoped="" ref="0x7f00c922f4e0"/>
        <function-ref name="stop" scoped="" ref="0x7f00c922f9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f00c920c0f0" loc="63:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f00c920c0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f00ca075180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c920a020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f00c920a9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f00c920a4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c920ae60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f00c9229cf0" loc="62:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f00c9229cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f00ca075180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c920eb60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f00c920d550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f00c920d090"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c920da10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f00c9208b60" loc="48:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f00c9208b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f00ca075180"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c92077d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f00c9207e40" loc="49:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f00c9207e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f00ca075180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f00c9205ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f00c9204670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f00c92041b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f00c9204b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f00c91fd9a0" loc="36:../../../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f00c91fd9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca077d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f00ca075180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f00c91fa7e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f00c91131b0" loc="49:../../../../tos/system/AMSenderC.nc">
      <component-ref qname="SendingMoteAppC.RssiMsgSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f00c91131b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9113530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c91136c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9113850"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c91139e0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9113b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f00c9113dc0" loc="50:../../../../tos/system/AMSenderC.nc">
      <component-ref qname="SendingMoteAppC.RssiMsgSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f00c9113dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9112180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9112310"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c91124a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9112630"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c91127c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f00c9112a10" loc="51:../../../../tos/system/AMSenderC.nc">
      <component-ref qname="SendingMoteAppC.RssiMsgSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f00c9112a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f00c9112d90"/>
        <function-ref name="source" scoped="" ref="0x7f00c9111020"/>
        <function-ref name="address" scoped="" ref="0x7f00c91111b0"/>
        <function-ref name="destination" scoped="" ref="0x7f00c9111340"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c91114d0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c9111660"/>
        <function-ref name="type" scoped="" ref="0x7f00c91117f0"/>
        <function-ref name="setType" scoped="" ref="0x7f00c9111980"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c9111b10"/>
        <function-ref name="setGroup" scoped="" ref="0x7f00c9111ca0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f00c9111e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f00c9110120" loc="52:../../../../tos/system/AMSenderC.nc">
      <component-ref qname="SendingMoteAppC.RssiMsgSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7f00c9110120"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f00c91104a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f00c9110630"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f00c91107c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f00c8a2d540" loc="49:../../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="SendingMoteAppC.RssiMsgSender.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f00c8a2d540"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c8a2d8c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c8a2da50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c8a2dbe0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c8a2dd70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c8a2c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f00c8a2c270" loc="50:../../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="SendingMoteAppC.RssiMsgSender.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f00c8a2c270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c8a2c5f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c8a2c780"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c8a2c910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c8a2caa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c8a2cc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f00c8a2ce80" loc="51:../../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="SendingMoteAppC.RssiMsgSender.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f00c8a2ce80"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f00c8a2a220"/>
        <function-ref name="source" scoped="" ref="0x7f00c8a2a3b0"/>
        <function-ref name="address" scoped="" ref="0x7f00c8a2a540"/>
        <function-ref name="destination" scoped="" ref="0x7f00c8a2a6d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c8a2a860"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c8a2a9f0"/>
        <function-ref name="type" scoped="" ref="0x7f00c8a2ab80"/>
        <function-ref name="setType" scoped="" ref="0x7f00c8a2ad10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c8a29020"/>
        <function-ref name="setGroup" scoped="" ref="0x7f00c8a291b0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f00c8a29340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f00c8a295d0" loc="52:../../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="SendingMoteAppC.RssiMsgSender.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x7f00c8a295d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f00c8a29950"/>
        <function-ref name="noAck" scoped="" ref="0x7f00c8a29ae0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f00c8a29c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f00c8a1f940" loc="44:../../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="SendingMoteAppC.RssiMsgSender.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f00c8a1f940"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c8a1fcc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c8a1fe50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c8a1e020"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c8a1e1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c8a1e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f00c8a1e5f0" loc="46:../../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="SendingMoteAppC.RssiMsgSender.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f00c8a1e5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c8a1e970"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c8a1eb00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c8a1ec90"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c8a1ee20"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c8a1d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f00c8a1d270" loc="47:../../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="SendingMoteAppC.RssiMsgSender.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f00c8a1d270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f00c8a1d5f0"/>
        <function-ref name="source" scoped="" ref="0x7f00c8a1d780"/>
        <function-ref name="address" scoped="" ref="0x7f00c8a1d910"/>
        <function-ref name="destination" scoped="" ref="0x7f00c8a1daa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c8a1dc30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c8a1ddc0"/>
        <function-ref name="type" scoped="" ref="0x7f00c8a1c020"/>
        <function-ref name="setType" scoped="" ref="0x7f00c8a1c1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c8a1c340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f00c8a1c4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f00c8a1c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f00c91732c0" loc="43:../../../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f00c91732c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9173640"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c91737d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9173960"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9173af0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9173c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f00c9128a40" loc="48:../../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f00c9128a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9128de0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c9127020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c91271b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c9127340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c91274d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f00c9129b00" loc="46:../../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f00c9129b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c9128020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c91281b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9128340"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c91284d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c9128660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f00c9126d60" loc="50:../../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f00c9126d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f00c9125180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f00c9125310"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c91254a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c9125630"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f00c91257c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f00c9125a90" loc="169:../../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x7f00c9125a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00c9125e10"/>
        <function-ref name="runTask" scoped="" ref="0x7f00c9124020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f00c91242f0" loc="126:../../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x7f00c91242f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f00c9124670"/>
        <function-ref name="runTask" scoped="" ref="0x7f00c9124800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f00c9127720" loc="49:../../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f00c9127720"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f00c9127aa0"/>
        <function-ref name="source" scoped="" ref="0x7f00c9127c30"/>
        <function-ref name="address" scoped="" ref="0x7f00c9127dc0"/>
        <function-ref name="destination" scoped="" ref="0x7f00c9126020"/>
        <function-ref name="setSource" scoped="" ref="0x7f00c91261b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f00c9126340"/>
        <function-ref name="type" scoped="" ref="0x7f00c91264d0"/>
        <function-ref name="setType" scoped="" ref="0x7f00c9126660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f00c91267f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f00c9126980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f00c9126b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f00c910dce0" loc="45:../../../../tos/system/TimerMilliC.nc">
      <component-ref qname="SendingMoteAppC.SendTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f00c910dce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c9101220"/>
        <function-ref name="fired" scoped="" ref="0x7f00c91037c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f00c9102590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f00c9102110"/>
        <function-ref name="getdt" scoped="" ref="0x7f00c9101b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f00c91016a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c9103c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f00c9104940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f00c9102ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f00c9104e10"/>
        <function-ref name="stop" scoped="" ref="0x7f00c9103340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendTimer" ref="0x7f00c90fb020" loc="41:SendingMoteC.nc">
      <component-ref qname="SendingMoteC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendTimer" scoped="" ref="0x7f00c90fb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f00ca0789b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f00ca078d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f00c90f8630"/>
        <function-ref name="fired" scoped="" ref="0x7f00c90faa60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f00c90f9920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f00c90f94a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f00c90f6020"/>
        <function-ref name="gett0" scoped="" ref="0x7f00c90f8ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f00c90f9020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f00c90fbc10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f00c90f8020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f00c90fa110"/>
        <function-ref name="stop" scoped="" ref="0x7f00c90fa5e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f00c90fc780" loc="40:SendingMoteC.nc">
      <component-ref qname="SendingMoteC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f00c90fc780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f00c90fcb00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0x7f00c90f53f0" loc="44:SendingMoteC.nc">
      <component-ref qname="SendingMoteC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0x7f00c90f53f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f00c90f5770"/>
        <function-ref name="stopDone" scoped="" ref="0x7f00c90f5900"/>
        <function-ref name="start" scoped="" ref="0x7f00c90f5a90"/>
        <function-ref name="stop" scoped="" ref="0x7f00c90f5c20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiMsgSend" ref="0x7f00c90f6540" loc="43:SendingMoteC.nc">
      <component-ref qname="SendingMoteC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiMsgSend" scoped="" ref="0x7f00c90f6540"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f00c90f68c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f00c90f6a50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f00c90f6be0"/>
        <function-ref name="cancel" scoped="" ref="0x7f00c90f6d70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f00c90f5020"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="SplitControl" loc="87:../../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f00c9fa8730" loc="113:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f00c9fa84b0" loc="113:../../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f00c9fa6c80" loc="138:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f00c9fa6a00" loc="138:../../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f00c9faba80" loc="104:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f00c9fa6020" loc="130:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7f00c9f6c990" loc="59:../../../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f00c9f6c380" loc="59:../../../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f00c9f6c700" loc="59:../../../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f00c9f6eb70" loc="65:../../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f6e8f0" loc="65:../../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f00c9f68c00" loc="78:../../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f68980" loc="78:../../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f00c9f63020" loc="126:../../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f64920" loc="126:../../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f00c9f64c50" loc="126:../../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f00c9f64030" loc="106:../../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f00c9f690c0" loc="94:../../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f66ad0" loc="94:../../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f00c9f66e00" loc="94:../../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../../tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x7f00c9f7c5f0" loc="80:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f00c9f7dc30" loc="80:../../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f00c9f7c020" loc="80:../../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f00c9f7c350" loc="80:../../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f00c9f75020" loc="135:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f76890" loc="135:../../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f00c9f76bc0" loc="135:../../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f00c9f76020" loc="123:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f00c9f7a980" loc="96:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f7a700" loc="96:../../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f00c9f7b020" loc="110:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f788e0" loc="110:../../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f00c9f78c30" loc="110:../../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f00c9f71760" loc="78:../../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
              <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9fa5dc0" loc="78:../../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f00c9f71150" loc="78:../../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f00c9f71480" loc="78:../../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7f00c9f463a0" loc="65:../../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f47d30" loc="65:../../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7f00c9f46110" loc="65:../../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7f00c9f45550" loc="71:../../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f452d0" loc="71:../../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7f00c9f47540" loc="57:../../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7f00c9f4fb40" loc="52:../../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7f00c9f4f8c0" loc="52:../../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f00c9f4e770" loc="59:../../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f4e4f0" loc="59:../../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f00c9f4b940" loc="71:../../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f4b6c0" loc="71:../../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f00c9f4aab0" loc="85:../../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f4a830" loc="85:../../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7f00c9f3e790" loc="65:../../../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f3e510" loc="65:../../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7f00c9f428b0" loc="46:../../../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f42290" loc="46:../../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7f00c9f42620" loc="46:../../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7f00c9f41770" loc="59:../../../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f414f0" loc="59:../../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7f00c9f40ca0" loc="53:../../../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f40680" loc="53:../../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7f00c9f40a10" loc="53:../../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7f00c9f3d780" loc="71:../../../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f3d500" loc="71:../../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f00c9f539f0" loc="177:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f00c9f968f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f00c9f53770" loc="177:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f00c9f5d600" loc="88:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f00c9f5d380" loc="88:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f00c9f6d9e0" loc="68:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f00c9f5f520" loc="78:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f00c9f5f2a0" loc="78:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f00c9f5b020" loc="121:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f00c9f5a950" loc="121:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f00c9f5aca0" loc="121:../../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f00c9f5ca30" loc="103:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f00c9f5c450" loc="103:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f00c9f5c7a0" loc="103:../../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f00c9f574a0" loc="147:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f00c9f57220" loc="147:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f00c9f55850" loc="162:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f00c9f552a0" loc="162:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f00c9f555c0" loc="162:../../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f00c9f96510"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f00c9f582a0" loc="136:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f00c9f58020" loc="136:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f00c9f52020" loc="187:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f00c9f968f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f00c9f518c0" loc="187:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f00c9f51c10" loc="187:../../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f00c9f968f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f00c9f52e40" loc="195:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f00c9f968f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioChannel" loc="37:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="setChannelDone" ref="0x7f00c9f391f0" loc="50:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="46:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f00c9f3a9a0" loc="44:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress),&#10; EALREADY if the selected channel is already set, SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f00c9f3a720" loc="44:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f00c9f39a40" loc="55:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="52:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f00c9f44b70" loc="35:../../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f00c9f44b70"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f00c9f44db0" loc="35:../../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9f44db0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7f00c9f35c00" loc="63:../../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9f44db0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f35980" loc="63:../../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f00c9f33d80" loc="70:../../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f33b00" loc="70:../../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7f00c9f379c0" loc="49:../../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f37740" loc="49:../../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f00c9f360c0" loc="78:../../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9f44db0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f32a80" loc="78:../../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f00c9f32de0" loc="78:../../../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9f44db0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketField" loc="37:../../../../tos/lib/rfxlink/util/PacketField.nc">
      <parameters>
        <typedef name="value_type" ref="0x7f00c9f1eab0" loc="37:../../../../tos/lib/rfxlink/util/PacketField.nc">
          <interfacedef-ref qname="PacketField"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f00c9f1eab0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="clear" ref="0x7f00c9f1ad10" loc="53:../../../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="50:../../../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Clears the isSet flag.</short>
          <long>&#10; Clears the isSet flag.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f1aa90" loc="53:../../../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f00c9f1a2a0" loc="48:../../../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="44:../../../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns the stored value of this field in the message.</short>
          <long>&#10; Returns the stored value of this field in the message. If the&#10; value is not set, then the returned value is undefined.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f00c9f1eab0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f1a020" loc="48:../../../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7f00c9f1b6c0" loc="42:../../../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns TRUE if the value is set for this message.</short>
          <long>&#10; Returns TRUE if the value is set for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f1b440" loc="42:../../../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f00c9f19aa0" loc="59:../../../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="55:../../../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.</short>
          <long>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f00c9f1eab0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f194a0" loc="59:../../../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f00c9f19810" loc="59:../../../../tos/lib/rfxlink/util/PacketField.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f00c9f1eab0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f00c9f0f7f0" loc="53:../../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f00c9f0f7f0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f00c9f0a190" loc="61:../../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7f00c9f10d00" loc="47:../../../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9f10a80" loc="47:../../../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f00c9eecbf0" loc="120:../../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f00c9eeebe0" loc="97:../../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f00c9eee270" loc="88:../../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f00c9eec420" loc="102:../../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f00c9eeb8b0" loc="128:../../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Packet" loc="35:../../../../tos/interfaces/Ieee154Packet.nc">
      <function command="" provided="0" name="source" ref="0x7f00c9ee7d40" loc="41:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f00c9fa1170"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9ee7ac0" loc="41:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f00c9eef8e0" loc="37:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f00c9fa1170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f00c9ee7350" loc="39:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f00c9fa1170"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9ee70d0" loc="39:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f00c9ee5830" loc="45:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f00c9fa1170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9ee5210" loc="45:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f00c9ee55a0" loc="45:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f00c9fa1170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f00c9ee6af0" loc="43:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f00c9fa1170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9ee64d0" loc="43:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f00c9ee6860" loc="43:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f00c9fa1170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pan" ref="0x7f00c9ee3c70" loc="49:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f00c9fa2cb0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9ee39f0" loc="49:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPan" ref="0x7f00c9ee2980" loc="51:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7f00c9fa2cb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9ee2370" loc="51:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f00c9ee26f0" loc="51:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7f00c9fa2cb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f00c9ee32a0" loc="47:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9ee3020" loc="47:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7f00c9ee1120" loc="53:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f00c9fa2cb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Send" loc="45:../../../../tos/interfaces/Ieee154Send.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f00c9ef6cd0" loc="67:../../../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="47:../../../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f00c9fa1170"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f00c9ef6380" loc="67:../../../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f00c9fa1170"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f00c9ef6700" loc="67:../../../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f00c9ef6a30" loc="67:../../../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f00c9ef1660" loc="122:../../../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="113:../../../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9ef1060" loc="122:../../../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f00c9ef1390" loc="122:../../../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f00c9ef2790" loc="110:../../../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="100:../../../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f00c9ef5c00" loc="83:../../../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="69:../../../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9ef5980" loc="83:../../../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f00c9ef3de0" loc="97:../../../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="85:../../../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9ef3800" loc="97:../../../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f00c9ef3b50" loc="97:../../../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Tasklet" loc="43:../../../../tos/lib/rfxlink/util/Tasklet.nc">
      <documentation loc="37:../../../../tos/lib/rfxlink/util/Tasklet.nc">
        <short>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled.</short>
        <long>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled. &#10; All state transitions should take place in the run event handler or&#10; in blocks protected by the suspend and resume commands.&#10;</long>
      </documentation>
      <function command="" provided="0" name="schedule" ref="0x7f00c9ec4cc0" loc="59:../../../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="50:../../../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Makes sure that the run event is called at least once more.</short>
          <long>&#10; Makes sure that the run event is called at least once more. If the &#10; run event is currently not executing, then it  is called immediately &#10; and this command returns only after the completion of the run event. &#10; If the run event is currently executed, then this method returns at &#10; once, and makes sure that the run event is called once more when &#10; it is finished. If this method is called from a task, then by the &#10; above rules, the run event will be called from a task as well.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="suspend" ref="0x7f00c9ec3760" loc="72:../../../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="61:../../../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section.</short>
          <long>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section. No long running&#10; computation should be called from the critical session, and&#10; in particular no user event should be fired. This call is only&#10; possible from task context, otherwise we cannot guarantee that&#10; the run event is not currently running. The suspend calls&#10; can be nested. It is very important that the same number of&#10; resume commands must be called in all control paths, e.g. be very&#10; careful with the return and break commands.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resume" ref="0x7f00c9ec2120" loc="79:../../../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="74:../../../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Leaves the critical section.</short>
          <long>&#10; Leaves the critical section. This call is conly possible from &#10; task context. If there were scheduled executions of the run&#10; event, then those will be called before this command returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="run" ref="0x7f00c9ec4560" loc="48:../../../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="45:../../../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; This method is executed atomically.</short>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="NeighborhoodFlag" loc="41:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
      <documentation loc="37:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <short>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example).</short>
        <long>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example). &#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f00c9eab9b0" loc="57:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="53:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for the given index.</short>
          <long>&#10; Clears the flag for the given index. The flag is automatically&#10; cleared after the Neighborhood.evicted event is fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f00c9eab730" loc="57:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearAll" ref="0x7f00c9eaa1f0" loc="62:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="59:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for all indices&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f00c9ead520" loc="46:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="43:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Returns the value of the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f00c9ead2a0" loc="46:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f00c9eab020" loc="51:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="48:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Sets the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f00c9eadc20" loc="51:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Neighborhood" loc="43:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
      <documentation loc="38:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
        <short>&#10; Every component maintains its own neighborhood data.</short>
        <long>&#10; Every component maintains its own neighborhood data. The Neighboorhood&#10; component maintains only the nodeids and ages of the neighbors, and&#10; evicts old entries from the table when necessary.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getAge" ref="0x7f00c9eb1500" loc="58:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="52:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the age of the given entry.</short>
          <long>&#10; Returns the age of the given entry. The age is incremented by one&#10; every time a new node is inserted into the neighborhood table that&#10; is not already at the very end. If the age would get too large to&#10; fit into a byte, then it is periodically reset to a smaller value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f00c9eb1280" loc="58:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNode" ref="0x7f00c9eb0aa0" loc="72:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="65:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Adds a new node into the neighborhood table.</short>
          <long>&#10; Adds a new node into the neighborhood table. If this node was already&#10; in the table, then it is just brought to the front (its age is reset&#10; to zero). If the node was not in the table, then the oldest is evicted&#10; and its entry is replaced with this node. The index of the entry&#10; is returned in the range [0, NEIGHBORHOOD-1]. &#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f00c9eb0820" loc="72:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNode" ref="0x7f00c9eb0040" loc="63:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="60:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the node address for the given entry.</short>
          <long>&#10; Returns the node address for the given entry.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f00c9eb1d90" loc="63:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0x7f00c9eaf5e0" loc="81:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="74:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; This event is fired when the oldest entry is replaced with a new&#10; node.</short>
          <long>&#10; This event is fired when the oldest entry is replaced with a new&#10; node. The same interface is used by many users, so all of them&#10; will receive this event and can clear the corresponding entry.&#10; After this event is fired, all flags for this entry are cleared&#10; (see the NeighborhoodFlag interface)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f00c9eaf360" loc="81:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIndex" ref="0x7f00c9eb3a20" loc="50:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="45:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the index of the neighbor in the table.</short>
          <long>&#10; Returns the index of the neighbor in the table. If the node was not &#10; found in the table, then the value NEIGHBORHOOD is  returned, &#10; otherwise an index in the range [0, NEIGHBORHOOD-1] is returned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f00c9eb37a0" loc="50:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f00c9ea8e80" loc="62:../../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f00c9e775d0" loc="60:../../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x7f00c9e6fdc0" loc="60:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x7f00c9e6fb40" loc="60:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x7f00c9e71390" loc="31:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x7f00c9e71e10" loc="39:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7f00c9e71b90" loc="39:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x7f00c9e70940" loc="46:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7f00c9e706c0" loc="46:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x7f00c9e6f270" loc="53:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f00c9e5b270" loc="44:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f00c9e5b9a0" loc="45:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f00c9e5c420" loc="42:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f00c9e5a820" loc="47:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f00c9e5cb20" loc="43:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f00c9e5a0e0" loc="46:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f00c9e5e610" loc="40:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f00c9e5ece0" loc="41:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f00ca0fd190" loc="57:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f00ca0fb190" loc="72:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f00ca0fd900" loc="65:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f00ca0f3670" loc="67:../../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f00ca0f2020" loc="75:../../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f00ca0282b0" loc="85:../../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f00ca0289f0" loc="86:../../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f00ca02bac0" loc="79:../../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:../../../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f00ca009540" loc="62:../../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f00ca0a2470"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f00ca00b6a0" loc="52:../../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DummyConfig" loc="35:../../../../tos/lib/rfxlink/layers/DummyConfig.nc">
      <function command="" provided="0" name="nothing" ref="0x7f00c9c72570" loc="40:../../../../tos/lib/rfxlink/layers/DummyConfig.nc">
        <documentation loc="37:../../../../tos/lib/rfxlink/layers/DummyConfig.nc">
          <short>&#10; We need to put something here, but this is not going to get called&#10;</short>
        </documentation>
        <interfacedef-ref qname="DummyConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TrafficMonitorConfig" loc="35:../../../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
      <function command="" provided="0" name="getBytes" ref="0x7f00c9c86720" loc="40:../../../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
        <documentation loc="37:../../../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the number of bytes in this message.</short>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c864a0" loc="40:../../../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageConfig" loc="37:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
      <function command="" provided="0" name="group" ref="0x7f00c9c76030" loc="52:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="51:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.group *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f00c9f968f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c77d80" loc="52:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="checkFrame" ref="0x7f00c9c75770" loc="63:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="57:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.</short>
          <long>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.&#10; Return SUCCESS if the frame is now properly set up, &#10; or FAIL of the send operation should be aborted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c754f0" loc="63:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f00c9c797a0" loc="46:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="45:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.source *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c79520" loc="46:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f00c9c7a020" loc="40:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.destination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c85cf0" loc="40:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f00c9c77600" loc="49:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="48:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setSource *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c77020" loc="49:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f00c9c77370" loc="49:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f00c9c7ad60" loc="43:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="42:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setDestination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c7a780" loc="43:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f00c9c7aad0" loc="43:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f00c9c76d40" loc="55:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="54:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setGroup *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f00c9f968f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c76760" loc="55:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f00c9c76ab0" loc="55:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f00c9f968f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlottedCollisionConfig" loc="35:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
      <function command="" provided="0" name="getInitialDelay" ref="0x7f00c9c805e0" loc="42:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="37:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.</short>
          <long>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getScheduleExponent" ref="0x7f00c9c7f020" loc="49:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="44:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Must return a binary exponent so that the collision avoidance layer&#10; can assign slots in the range of [0, 1 &#60;&#60; exponent) of size collision&#10; window.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowLength" ref="0x7f00c9c7c2e0" loc="65:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="62:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the size of the collision window for this received message.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c7c060" loc="65:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitTime" ref="0x7f00c9c7fb30" loc="54:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="51:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command must return the time when the message was transmitted.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c7f8b0" loc="54:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowStart" ref="0x7f00c9c7e680" loc="60:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="56:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.</short>
          <long>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c7e400" loc="60:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioAlarm" loc="38:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
      <function event="" provided="0" name="fired" ref="0x7f00c9c53850" loc="60:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="57:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; This event is fired when the specified timeout period expires.</short>
          <long>&#10; This event is fired when the specified timeout period expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="wait" ref="0x7f00c9c54910" loc="50:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="47:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Waits till the specified timeout period expires.</short>
          <long>&#10; Waits till the specified timeout period expires. The alarm must be free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7f00c9fac920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="timeout" ref="0x7f00c9c54690" loc="50:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7f00c9fac920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f00c9c530e0" loc="55:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="52:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Cancels the running alarm.</short>
          <long>&#10; Cancels the running alarm. The alarm must be pending.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isFree" ref="0x7f00c9c58e20" loc="45:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="40:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns TRUE if the alarm is free and ready to be used.</short>
          <long>&#10; Returns TRUE if the alarm is free and ready to be used. Once the alarm&#10; is free, it cannot become nonfree in the same tasklet block. Note,&#10; if the alarm is currently set (even if for ourselves) then it is not free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x7f00c9c520e0" loc="65:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="62:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns the current time as measured by the radio stack.</short>
          <long>&#10; Returns the current time as measured by the radio stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f00c9fac920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioPacket" loc="37:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
      <function command="" provided="0" name="clear" ref="0x7f00c9c4c550" loc="72:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="69:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Clears all metadata and sets all default values in the headers.</short>
          <long>&#10; Clears all metadata and sets all default values in the headers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c4c2d0" loc="72:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f00c9c50860" loc="51:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="47:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the payload.</short>
          <long>&#10; Returns the length of the payload. The payload starts right&#10; after the header.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c505e0" loc="51:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f00c9c4d020" loc="61:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="58:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the maximum length that can be set for this message.</short>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f00c9c4e6b0" loc="56:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="53:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Sets the length of the payload.</short>
          <long>&#10; Sets the length of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c4e0d0" loc="56:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f00c9c4e420" loc="56:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7f00c9c57cc0" loc="45:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; This command returns the length of the header.</short>
          <long>&#10; This command returns the length of the header. The header&#10; starts at the first byte of the message_t structure &#10; (some layers may add dummy bytes to allign the payload to&#10; the msg->data section).&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c57a40" loc="45:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7f00c9c4dab0" loc="67:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="63:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the metadata section.</short>
          <long>&#10; Returns the length of the metadata section. The metadata section&#10; is at the very end of the message_t structure and grows downwards.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c4d830" loc="67:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RF230DriverConfig" loc="35:../../../../tos/chips/rf230/RF230DriverConfig.nc">
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f00c9c9ce50" loc="46:../../../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="42:../../../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.</short>
          <long>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7f00c9c9c630" loc="40:../../../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="37:../../../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy header to align the payload properly.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c9c3b0" loc="40:../../../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7f00c9c9b9c0" loc="52:../../../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="48:../../../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.</short>
          <long>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c9b740" loc="52:../../../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerPreloadLength" ref="0x7f00c9c9a2b0" loc="59:../../../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="54:../../../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired.</short>
          <long>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired. If the length of the packet is less than this amount, &#10; then that event is fired earlier. The header length must be at least one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresRssiCca" ref="0x7f00c9c9ae30" loc="65:../../../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="61:../../../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns TRUE if before sending this message we should make sure that&#10; the channel is clear via a very basic (and quick) RSSI check.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c9abb0" loc="65:../../../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaConfig" loc="35:../../../../tos/lib/rfxlink/layers/CsmaConfig.nc">
      <function command="" provided="0" name="requiresSoftwareCCA" ref="0x7f00c9c87020" loc="41:../../../../tos/lib/rfxlink/layers/CsmaConfig.nc">
        <documentation loc="37:../../../../tos/lib/rfxlink/layers/CsmaConfig.nc">
          <short>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.</short>
          <long>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c96c90" loc="41:../../../../tos/lib/rfxlink/layers/CsmaConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SoftwareAckConfig" loc="37:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
      <function command="" provided="0" name="reportChannelError" ref="0x7f00c9c8e020" loc="86:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="82:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.</short>
          <long>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckPacket" ref="0x7f00c9c90760" loc="80:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="77:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f00c9c90150" loc="80:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f00c9c904d0" loc="80:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7f00c9c942a0" loc="55:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="51:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.</short>
          <long>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c94020" loc="55:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckPacket" ref="0x7f00c9c94db0" loc="62:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="57:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet is an acknowledgement packet.</short>
          <long>&#10; Returns TRUE if the received packet is an acknowledgement packet.&#10; The AckedSend layer will filter out all received acknowledgement&#10; packets and uses  only the matching one for the acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c94b30" loc="62:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckPacket" ref="0x7f00c9c92d40" loc="69:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="64:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The acknowledgement packect was already verified &#10; to be a valid acknowledgement packet via the isAckPacket command.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f00c9c92730" loc="69:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f00c9c92ab0" loc="69:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckTimeout" ref="0x7f00c9c9e890" loc="43:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.</short>
          <long>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7f00c9c956f0" loc="49:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="45:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Sets the flag in the message indicating to the receiver whether&#10; the message should be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c95150" loc="49:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f00c9c95460" loc="49:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7f00c9c918e0" loc="75:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="71:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet needs software acknowledgements&#10; to be sent back to the sender.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c91660" loc="75:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154PacketLayer" loc="45:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
      <documentation loc="38:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <short>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses.</short>
        <long>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses. It also &#10; supports 6LowPan interoperability mode, and acknowledgement frames.&#10; Note, that this interface does not support the CRC-16 value, which&#10; should be verified before the data can be trusted.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getDestPan" ref="0x7f00c9c63d20" loc="131:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="127:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; returns the destination PAN id, values &#60;= 255 are tinyos groups,&#10; valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c63aa0" loc="131:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDSN" ref="0x7f00c9c643d0" loc="120:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="117:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c64150" loc="120:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFCF" ref="0x7f00c9c70c10" loc="57:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="53:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame control field.</short>
          <long>&#10; Sets the frame control field. This method should not be used, &#10; createDataFrame and createAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c70640" loc="57:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="fcf" ref="0x7f00c9c70980" loc="57:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckFrame" ref="0x7f00c9c6ed90" loc="75:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="71:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c6eb10" loc="75:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcAddr" ref="0x7f00c9c5ebd0" loc="156:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="153:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c5e5f0" loc="156:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f00c9c5e940" loc="156:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createDataFrame" ref="0x7f00c9c6e2a0" loc="69:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="65:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create a data frame supported by this interface.</short>
          <long>&#10; Sets the FCF to create a data frame supported by this interface.&#10; You may call setAckRequired and setFramePending commands after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c6e020" loc="69:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDSN" ref="0x7f00c9c632b0" loc="125:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="122:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c64c30" loc="125:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dsn" ref="0x7f00c9c63020" loc="125:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckReply" ref="0x7f00c9c6b7d0" loc="88:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="83:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
          <long>&#10; Creates an acknowledgement packet for the given data packet.&#10; This also sets the DSN value. The data message must be a &#10; data frame, the ack message will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f00c9c6b1c0" loc="88:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f00c9c6b540" loc="88:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSrcAddr" ref="0x7f00c9c5fe20" loc="151:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="148:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c5fba0" loc="151:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isDataFrame" ref="0x7f00c9c6f730" loc="63:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="59:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c6f4b0" loc="63:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckRequired" ref="0x7f00c9c682a0" loc="99:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="96:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the ACK required field is set in the FCF.</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c68020" loc="99:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckReply" ref="0x7f00c9c6a6e0" loc="94:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="90:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The data message must be a data packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f00c9c6a0d0" loc="94:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f00c9c6a450" loc="94:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localAddr" ref="0x7f00c9c5a390" loc="178:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="175:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local address of the node (AM address)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f00c9fa1170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7f00c9c5c680" loc="162:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="158:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c5c400" loc="162:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7f00c9c5bb70" loc="173:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="170:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local pan id (AM group)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f00c9fa2cb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestAddr" ref="0x7f00c9c5f3a0" loc="146:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="143:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c60d90" loc="146:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f00c9c5f110" loc="146:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckFrame" ref="0x7f00c9c6c910" loc="81:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="77:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface.</short>
          <long>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface. You may call setFramePending after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c6c690" loc="81:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFramePending" ref="0x7f00c9c66940" loc="115:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="112:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame pending field in the FCF.</short>
          <long>&#10; Sets the frame pending field in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c66370" loc="115:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pending" ref="0x7f00c9c666b0" loc="115:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestPan" ref="0x7f00c9c62b00" loc="136:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="133:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination PAN id, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c62530" loc="136:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pan" ref="0x7f00c9c62870" loc="136:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f00c9c5adc0" loc="185:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="180:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.</short>
          <long>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c5ab40" loc="185:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7f00c9c67030" loc="105:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="101:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.</short>
          <long>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c68a60" loc="105:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f00c9c68d70" loc="105:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFCF" ref="0x7f00c9c74e40" loc="51:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="47:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the frame control field.</short>
          <long>&#10; Returns the frame control field. This method should not be used, &#10; isDataFrame and isAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c74bc0" loc="51:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7f00c9c5b2a0" loc="168:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="164:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c5b020" loc="168:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestAddr" ref="0x7f00c9c605f0" loc="141:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="138:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c60370" loc="141:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFramePending" ref="0x7f00c9c67b30" loc="110:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="107:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the frame pending field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the frame pending field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c678b0" loc="110:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UniqueConfig" loc="37:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0x7f00c9c8bb90" loc="52:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="49:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Sets the sequence number of the packet.</short>
          <long>&#10; Sets the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c8b5b0" loc="52:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="number" ref="0x7f00c9c8b900" loc="52:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportChannelError" ref="0x7f00c9c8a3b0" loc="58:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="54:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.</short>
          <long>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0x7f00c9c8c2e0" loc="42:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sequence number of the packet.</short>
          <long>&#10; Returns the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c8c060" loc="42:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSender" ref="0x7f00c9c8cd70" loc="47:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="44:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sender of the packet.</short>
          <long>&#10; Returns the sender of the packet. &#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c8caf0" loc="47:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RandomCollisionConfig" loc="35:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
      <function command="" provided="0" name="getCongestionBackoff" ref="0x7f00c9c848f0" loc="46:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="42:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the amount of maximum backoff when there is congestion&#10; (the channel was busy for the first try)&#10;</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c84670" loc="46:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInitialBackoff" ref="0x7f00c9c89d80" loc="40:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="37:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the initial amount of maximum backoff for this message.</short>
          <long>&#10; Returns the initial amount of maximum backoff for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c89b00" loc="40:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMinimumBackoff" ref="0x7f00c9c83190" loc="51:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="48:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the minimum ticks before the message could be sent.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitBarrier" ref="0x7f00c9c83c60" loc="57:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="53:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; The provided message was just received, and this command should return &#10; the time till no transmission should be initiated.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9c839e0" loc="57:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f00c9beb8b0" loc="56:../../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f00c9beb8b0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f00c9bebaf0" loc="56:../../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9bebaf0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f00c9be4800" loc="109:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9bebaf0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f00c9be77e0" loc="78:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f00c9be6e10" loc="103:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9bebaf0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9bebaf0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f00c9be6840" loc="103:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9bebaf0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f00c9be6b80" loc="103:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9bebaf0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f00c9be6020" loc="88:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f00c9be3020" loc="116:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9bebaf0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f00c9be8680" loc="66:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9bebaf0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f00c9be8400" loc="66:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c9bebaf0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f00c9be7020" loc="73:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareSend" loc="38:../../../../tos/lib/rfxlink/util/BareSend.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f00c9bab2a0" loc="49:../../../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="40:../../../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a task. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9bab020" loc="49:../../../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f00c9ba9dd0" loc="67:../../../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="59:../../../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9ba9b50" loc="67:../../../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f00c9ba92b0" loc="57:../../../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="51:../../../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9babbc0" loc="57:../../../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f00c9ba9020" loc="57:../../../../tos/lib/rfxlink/util/BareSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareReceive" loc="37:../../../../tos/lib/rfxlink/util/BareReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7f00c9ba78d0" loc="44:../../../../tos/lib/rfxlink/util/BareReceive.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/util/BareReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
              <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9ba7610" loc="44:../../../../tos/lib/rfxlink/util/BareReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7f00c9b946a0" loc="50:../../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7f00c9b93600" loc="60:../../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7f00c9b94e80" loc="55:../../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f00c9f968f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7f00c9b98e00" loc="45:../../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f00c9f968f0"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7f00c9b98820" loc="45:../../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f00c9f968f0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7f00c9b98b70" loc="45:../../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f00c9f96cd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f00c9aec8e0" loc="53:../../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f00c9aeb270" loc="61:../../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f00c9ae7a10" loc="65:../../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f00c9ae71f0" loc="59:../../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f00c9ae90e0" loc="90:../../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f00c9ae9940" loc="98:../../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f00c9addb50" loc="79:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f00c9ae8b00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f00c9add8d0" loc="79:../../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f00c9ae8b00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f00c9ae2a80" loc="53:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f00c9adf620" loc="62:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f00c9ae8b00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f00c9adf3a0" loc="62:../../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f00c9ae8b00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f00c9add020" loc="70:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f00c9ae8b00"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioReceive" loc="38:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7f00c9971020" loc="54:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="49:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
              <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9972d30" loc="54:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="header" ref="0x7f00c9972390" loc="47:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="40:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed.</short>
          <long>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed. Return FALSE if the message should be discarded.&#10; In particular, the message buffer layer returns FALSE if there is&#10; no space for a new message, so this message will not get acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9972110" loc="47:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioState" loc="38:../../../../tos/lib/rfxlink/util/RadioState.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="turnOff" ref="0x7f00c9906d10" loc="45:../../../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="40:../../../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time.</short>
          <long>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time. The radio cannot send or receive in this state &#10; and releases all access to shared resources (e.g. SPI bus). &#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0x7f00c9902e60" loc="57:../../../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="53:../../../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Goes into receive state.</short>
          <long>&#10; Goes into receive state. The radio continuously receive messages &#10; and able to transmit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f00c9901920" loc="64:../../../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="59:../../../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress)&#10; SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f00c99016a0" loc="64:../../../../tos/lib/rfxlink/util/RadioState.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="done" ref="0x7f00c98ff120" loc="70:../../../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="66:../../../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="standby" ref="0x7f00c9902600" loc="51:../../../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="47:../../../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.</short>
          <long>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f00c98ff9d0" loc="75:../../../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="72:../../../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioSend" loc="38:../../../../tos/lib/rfxlink/util/RadioSend.nc">
      <function command="" provided="0" name="send" ref="0x7f00c98fd730" loc="49:../../../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="40:../../../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a tasklet. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c98fd4b0" loc="49:../../../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="ready" ref="0x7f00c98fcbc0" loc="64:../../../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="59:../../../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; This event is fired when the component is most likely able to accept &#10; a send request.</short>
          <long>&#10; This event is fired when the component is most likely able to accept &#10; a send request. If the send command has returned with a failure, then&#10; this event will be called at least once in the near future.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f00c98fc350" loc="57:../../../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="51:../../../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f00c98fc0d0" loc="57:../../../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../../../tos/interfaces/Random.nc">
      <documentation loc="34:../../../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f00c9886820" loc="52:../../../../tos/interfaces/Random.nc">
        <documentation loc="48:../../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f00c9886020" loc="46:../../../../tos/interfaces/Random.nc">
        <documentation loc="42:../../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f00c985b5e0" loc="53:../../../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f00c985b5e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f00c98572a0" loc="64:../../../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f00c985b5e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f00c9857020" loc="64:../../../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f00c985b5e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketFlag" loc="37:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
      <function command="" provided="0" name="clear" ref="0x7f00c9831a00" loc="57:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="54:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to FALSE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9831780" loc="57:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f00c98337f0" loc="42:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Returns if the flag is set for this message.</short>
          <long>&#10; Returns if the flag is set for this message. &#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9833570" loc="42:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setValue" ref="0x7f00c98325e0" loc="47:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="44:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to the specified value.</short>
          <long>&#10; Sets the flag in this message to the specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9832020" loc="47:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f00c9832350" loc="47:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f00c9831020" loc="52:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="49:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to TRUE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9832d70" loc="52:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioCCA" loc="38:../../../../tos/lib/rfxlink/util/RadioCCA.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="done" ref="0x7f00c97ffdc0" loc="53:../../../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="47:../../../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Signals the completion of the clear channel assesment send command.</short>
          <long>&#10; Signals the completion of the clear channel assesment send command.&#10; SUCCESS means the channel is clear, EBUSY means the channel is not&#10; clear, and FAIL means that the clear channel assesment could not&#10; be finished or the operation was cancelled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f00c97ffb40" loc="53:../../../../tos/lib/rfxlink/util/RadioCCA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f00c97ff350" loc="45:../../../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="40:../../../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Starts the clear channel assesment procedure.</short>
          <long>&#10; Starts the clear channel assesment procedure. Returns EBUSY if the radio&#10; is currently servicing a clear channel assesment, and SUCCESS otherwise.&#10; The check will be performed only in the RX_READY state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f00c978da60" loc="53:../../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f00c978da60"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f00c97827c0" loc="136:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f00c9786070" loc="83:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f00c9785df0" loc="114:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f00c9785820" loc="114:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f00c9785b60" loc="114:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f00c9785070" loc="98:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f00c97818a0" loc="151:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f00c9781020" loc="144:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f00c9786850" loc="92:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f00c97895f0" loc="64:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f00c9789370" loc="64:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f00c9784dc0" loc="129:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f00c97847f0" loc="129:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f00c9784b30" loc="129:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f00c9788110" loc="73:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f00c9789e30" loc="73:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f00caa0e170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f00c9788910" loc="78:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f00c9770460" loc="57:../../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f00c9770460"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f00c97706a0" loc="57:../../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c97706a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f00c976f020" loc="64:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c97706a0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f00c976e120" loc="76:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f00c976f8a0" loc="71:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f00c976e880" loc="82:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="76:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="67:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7f00c9740b20" loc="89:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="88:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7f00c97428e0" loc="85:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="84:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7f00c97445a0" loc="79:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="78:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7f00c9740350" loc="86:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f00c97400d0" loc="86:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7f00c9742110" loc="82:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f00c9743e30" loc="82:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7f00c973f5c0" loc="90:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7f00c973f340" loc="90:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7f00c9744d40" loc="80:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7f00c9743710" loc="81:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f00c9743490" loc="81:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="51:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
      <documentation loc="45:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="compareBBusy" ref="0x7f00c972f910" loc="92:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="88:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; @return TRUE if OCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer2Asynchronous" ref="0x7f00c9732880" loc="68:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="65:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 2 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlABusy" ref="0x7f00c9730030" loc="74:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="70:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; @return TRUE if TCCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBBusy" ref="0x7f00c9730860" loc="80:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="76:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; @return TRUE if TCCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x7f00c972e190" loc="98:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="94:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; @return TRUE if TCNT2 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareABusy" ref="0x7f00c972f0e0" loc="86:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="82:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; @return TRUE if OCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x7f00c97335e0" loc="57:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="53:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer2 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f00ca05cda0"/>
            <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f00ca05b230"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x7f00c9732040" loc="63:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="59:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer2 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f00ca05cda0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f00ca05b230"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x7f00c9733da0" loc="63:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f00ca05cda0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f00ca05b230"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7f00c973d0d0" loc="41:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c973d0d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x7f00c97399f0" loc="74:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f00c973cbf0" loc="58:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f00c973da10" loc="48:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c973d0d0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f00c973a390" loc="62:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f00c97381f0" loc="80:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f00c973c440" loc="54:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c973d0d0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f00c973c1c0" loc="54:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c973d0d0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f00c973ab00" loc="65:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f00c9739270" loc="68:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7f00c9752430" loc="55:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f00c9752430"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x7f00c974c020" loc="98:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7f00c974d020" loc="87:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f00c9752d60" loc="61:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f00c9752430"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x7f00c974ca00" loc="104:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x7f00c974c780" loc="104:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x7f00c974b270" loc="110:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f00c974f7b0" loc="75:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f00c974f020" loc="70:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f00c974d7e0" loc="93:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f00c9751760" loc="67:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f00c9752430"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f00c97514e0" loc="67:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f00c9752430"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f00c974e020" loc="78:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f00c974e770" loc="81:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f00c9537070" loc="59:../../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f00c9537070"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f00c95372b0" loc="59:../../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c95372b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f00c9537de0" loc="66:../../../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c95372b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f00c9537b60" loc="66:../../../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c95372b0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7f00c953a610" loc="54:../../../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f00c95397d0" loc="66:../../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f00c9539020" loc="61:../../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f00c953ad30" loc="61:../../../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7f00c953ed70" loc="53:../../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7f00c9541020" loc="62:../../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f00c9544ca0" loc="62:../../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7f00c95403c0" loc="74:../../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f00c9540140" loc="74:../../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7f00c9541890" loc="68:../../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f00c9540e50" loc="81:../../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f00c9540bd0" loc="81:../../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="40:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7f00c944a350" loc="40:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c944a350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x7f00c94422a0" loc="88:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="84:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x7f00c9442020" loc="88:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7f00c9443020" loc="76:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="72:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f00c944ac90" loc="47:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="43:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c944a350"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f00c9446110" loc="60:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="56:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c944a350"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f00c9447e10" loc="60:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c944a350"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f00c94468c0" loc="64:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f00c94437e0" loc="82:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="78:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f00c9447670" loc="53:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="49:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c944a350"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f00c94473f0" loc="53:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f00c944a350"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f00c9444070" loc="67:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="66:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f00c94447c0" loc="70:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f00c94273b0" loc="76:../../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f00c9429a00" loc="76:../../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f00c9429d90" loc="76:../../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f00c9427110" loc="76:../../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f00c9426980" loc="88:../../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f00c9425bd0" loc="88:../../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f00c9426020" loc="88:../../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f00c9426360" loc="88:../../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f00caa93610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f00c94266d0" loc="89:../../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f00c942b4c0" loc="45:../../../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f00c942b240" loc="45:../../../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Spi" loc="78:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
      <function command="" provided="0" name="initSlave" ref="0x7f00c94111f0" loc="86:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="85:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into slave mode.</short>
          <long> Initialize the ATmega128 SPI bus into slave mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPolarity" ref="0x7f00c9407070" loc="126:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpiEnabled" ref="0x7f00c940ca00" loc="117:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPhase" ref="0x7f00c9407a90" loc="128:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sampleOnTrailing" ref="0x7f00c9407810" loc="128:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initMaster" ref="0x7f00c9412a10" loc="83:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="82:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into master mode.</short>
          <long> Initialize the ATmega128 SPI bus into master mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterBit" ref="0x7f00c94095c0" loc="122:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="isMaster" ref="0x7f00c9409340" loc="122:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x7f00c940d0b0" loc="113:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enabled" ref="0x7f00c940edd0" loc="113:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7f00c9410190" loc="97:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="93:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Read the SPI data register &#10; </short>
          <long> &#10; Read the SPI data register &#10; @return last data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterDoubleSpeed" ref="0x7f00c94024e0" loc="141:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x7f00c9402260" loc="141:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0x7f00c940d850" loc="114:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClock" ref="0x7f00c9405c10" loc="131:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="speed" ref="0x7f00c9405990" loc="131:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f00c9404b70" loc="136:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPolarity" ref="0x7f00c94088a0" loc="125:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="highWhenIdle" ref="0x7f00c9408620" loc="125:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterDoubleSpeed" ref="0x7f00c9403b10" loc="140:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDataOrder" ref="0x7f00c940b3f0" loc="119:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lsbFirst" ref="0x7f00c940b170" loc="119:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f00c9410b70" loc="103:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="99:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Write the SPI data register &#10; </short>
          <long> &#10; Write the SPI data register &#10; @param data   next data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f00c94108f0" loc="103:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f00c940c2a0" loc="116:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="busOn" ref="0x7f00c940c020" loc="116:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterBitSet" ref="0x7f00c9409e30" loc="123:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPhase" ref="0x7f00c9405270" loc="129:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClock" ref="0x7f00c9404390" loc="132:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0x7f00c9403350" loc="138:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOrderLsbFirst" ref="0x7f00c940bb70" loc="120:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f00ca125500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f00c9411980" loc="89:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="88:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Disable and sleep the ATmega128 SPI bus.</short>
          <long> Disable and sleep the ATmega128 SPI bus. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7f00c940e5b0" loc="109:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="105:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short>&#10; Interrupt signalling SPI data cycle is complete.</short>
          <long>&#10; Interrupt signalling SPI data cycle is complete. &#10; @param data   data byte from data register&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f00c940e330" loc="109:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f00c93b3190" loc="95:../../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f00c93b39e0" loc="105:../../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="76:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="67:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControlC" ref="0x7f00c934fa20" loc="81:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7f00c934b020" loc="87:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="86:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7f00c9352ac0" loc="79:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="78:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7f00c934a270" loc="91:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="90:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7f00c934ba10" loc="88:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f00c934b790" loc="88:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7f00c934ed80" loc="83:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f00c934eb00" loc="83:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7f00c934ac70" loc="92:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7f00c934a9f0" loc="92:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7f00c934f2b0" loc="80:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlC" ref="0x7f00c934d750" loc="84:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f00c934d4d0" loc="84:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7f00c934e3e0" loc="82:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f00c934e160" loc="82:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f00c918d930" loc="75:../../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c918d370" loc="75:../../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f00c918d6a0" loc="75:../../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f00c9187160" loc="125:../../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c9188ae0" loc="125:../../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f00c9188e10" loc="125:../../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f00c9188270" loc="112:../../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f00caa94ad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f00c918bc40" loc="89:../../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c918b9c0" loc="89:../../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f00c918a360" loc="100:../../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f00c918cd10" loc="100:../../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f00c9f80e30"/>
                <typename><typedef-ref name="message_t" ref="0x7f00c9f7d470"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f00c918a0d0" loc="100:../../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f00ca0f6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
