<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="49:RssiBaseAppC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a2de0900"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a3d5aa00"/></to>
    </wire>
    <wire loc="92:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a3d5aa00"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a3d1d1c0"/></to>
    </wire>
    <wire loc="58:RssiBaseAppC.nc">
      <from><interface-ref name="RssiMsgIntercept" scoped="" ref="0x7f37a2de0060"/></from>
      <to><interface-ref name="RadioIntercept" scoped="" ref="0x7f37a404d540"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="SerialIntercept" scoped="" ref="0x7f37a404c210"/></from>
      <to><interface-ref name="SerialIntercept" scoped="" ref="0x7f37a3e36e70"/></to>
    </wire>
    <wire loc="85:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="RadioIntercept" scoped="" ref="0x7f37a404d540"/></from>
      <to><interface-ref name="RadioIntercept" scoped="" ref="0x7f37a3e361d0"/></to>
    </wire>
    <wire loc="88:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f37a3e6d1c0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f37a4045020"/></to>
    </wire>
    <wire loc="72:../../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f37a4045020"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f37a4040dc0"/></to>
    </wire>
    <wire loc="90:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0x7f37a3e6c6d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f37a3da5bd0"/></to>
    </wire>
    <wire loc="65:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f37a3da5bd0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f37a3d6f140"/></to>
    </wire>
    <wire loc="91:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f37a3e68a80"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f37a31c2710"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f37a31c2710"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f37a314f4e0"/></to>
    </wire>
    <wire loc="93:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="UartSend" scoped="" ref="0x7f37a3e675a0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f37a31bf7f0"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f37a31bf7f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f37a31b6b40"/></to>
    </wire>
    <wire loc="94:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="UartReceive" scoped="" ref="0x7f37a3e5d430"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a31beb20"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f37a31beb20"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a31599e0"/></to>
    </wire>
    <wire loc="95:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="UartPacket" scoped="" ref="0x7f37a3e4ed00"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f37a31bc2b0"/></to>
    </wire>
    <wire loc="65:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f37a31bc2b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f37a3157720"/></to>
    </wire>
    <wire loc="96:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="UartAMPacket" scoped="" ref="0x7f37a3e3dcc0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f37a31bb020"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f37a31bb020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f37a3158020"/></to>
    </wire>
    <wire loc="98:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f37a3e4fa20"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f37a3da1ca0"/></to>
    </wire>
    <wire loc="67:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f37a3da1ca0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f37a3d6e1d0"/></to>
    </wire>
    <wire loc="99:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f37a3e3ed70"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a3d9e020"/></to>
    </wire>
    <wire loc="68:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f37a3d9e020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a3d6d3f0"/></to>
    </wire>
    <wire loc="100:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="RadioSnoop" scoped="" ref="0x7f37a3e3ca10"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f37a3d9ec00"/></to>
    </wire>
    <wire loc="69:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f37a3d9ec00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f37a3d6b020"/></to>
    </wire>
    <wire loc="101:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f37a3e3a130"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f37a3d9c8f0"/></to>
    </wire>
    <wire loc="72:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f37a3d9c8f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f37a3d6a2b0"/></to>
    </wire>
    <wire loc="102:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="RadioAMPacket" scoped="" ref="0x7f37a3e3ae70"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f37a3d9b5f0"/></to>
    </wire>
    <wire loc="73:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f37a3d9b5f0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f37a3d69020"/></to>
    </wire>
    <wire loc="104:../InterceptBase/BaseStationC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f37a3e2c330"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f37a3dd7ce0"/></to>
    </wire>
    <wire loc="51:../../../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f37a3dd7ce0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f37a3dd0710"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x7f37a2f3fbc0"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x7f37a2f39b50"/></to>
    </wire>
    <wire loc="61:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a2fb2770"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a3152e50"/></to>
    </wire>
    <wire loc="96:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a2791d70"/></to>
    </wire>
    <wire loc="120:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a3577600"/></to>
    </wire>
    <wire loc="53:../../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a37ae540"/></to>
    </wire>
    <wire loc="52:../../../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a38746e0"/></to>
    </wire>
    <wire loc="57:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a28e8020"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a2916270"/></to>
    </wire>
    <wire loc="96:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a29dda00"/></to>
    </wire>
    <wire loc="47:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a2a6b920"/></to>
    </wire>
    <wire loc="67:../../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f37a3e7d470"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f37a41c6510"/></to>
    </wire>
    <wire loc="53:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f37a41c6510"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f37a40f98a0"/></to>
    </wire>
    <wire loc="78:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f37a3e7c020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f37a3469680"/></to>
    </wire>
    <wire loc="123:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f37a3e7c020"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f37a3579a60"/></to>
    </wire>
    <wire loc="68:../../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f37a3e7c020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a4044c70"/></to>
    </wire>
    <wire loc="58:../../../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f37a4044c70"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a40360c0"/></to>
    </wire>
    <wire loc="71:../../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a3e7c720"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></to>
    </wire>
    <wire loc="26:../../../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f37a403ed50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a2e23c60"/></to>
    </wire>
    <wire loc="26:../../../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f37a403ed50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a32beb50"/></to>
    </wire>
    <wire loc="59:../../../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f37a403e020"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f37a3e9c760"/></to>
    </wire>
    <wire loc="61:../../../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x7f37a4035020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a3e9c0f0"/></to>
    </wire>
    <wire loc="54:../../../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f37a40367a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a3dac2e0"/></to>
    </wire>
    <wire loc="62:../../../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f37a40367a0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f37a40389e0"/></to>
    </wire>
    <wire loc="46:../../../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f37a40389e0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x7f37a402a530"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f37a4030110"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7f37a403ed50"/></to>
    </wire>
    <wire loc="48:../../../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x7f37a4023ad0"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x7f37a4018060"/></to>
    </wire>
    <wire loc="141:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x7f37a4018060"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f37a3f8dda0"/></to>
    </wire>
    <wire loc="49:../../../../tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x7f37a4029cd0"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x7f37a4030110"/></to>
    </wire>
    <wire loc="191:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x7f37a3fe2cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a3ef3160"/></to>
    </wire>
    <wire loc="165:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x7f37a3ffe4e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f37a3f612b0"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f37a3f612b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2c58e20"/></to>
    </wire>
    <wire loc="176:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x7f37a3ff2350"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f37a3f508f0"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f37a3f508f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2be43f0"/></to>
    </wire>
    <wire loc="185:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x7f37a3fe8cb0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f37a3f40c10"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f37a3f40c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2b793f0"/></to>
    </wire>
    <wire loc="196:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG5" scoped="" ref="0x7f37a3fdb060"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a3ed86d0"/></to>
    </wire>
    <wire loc="143:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x7f37a4016670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f37a3f8a2b0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f37a3f8a2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d8e9b0"/></to>
    </wire>
    <wire loc="183:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x7f37a3fea670"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f37a3f438f0"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f37a3f438f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2b80e20"/></to>
    </wire>
    <wire loc="146:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x7f37a4014cb0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f37a3f82a20"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f37a3f82a20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d31a60"/></to>
    </wire>
    <wire loc="157:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x7f37a4007cb0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f37a3f6f020"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f37a3f6f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2cbf0a0"/></to>
    </wire>
    <wire loc="168:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x7f37a3ffbe40"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f37a3f5e760"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f37a3f5e760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2c4e6d0"/></to>
    </wire>
    <wire loc="179:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x7f37a3feecb0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f37a3f4cda0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f37a3f4cda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2bdbe20"/></to>
    </wire>
    <wire loc="138:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x7f37a401c800"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f37a3f908f0"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f37a3f908f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d9e9b0"/></to>
    </wire>
    <wire loc="149:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x7f37a4010670"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f37a3f7e020"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f37a3f7e020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d273f0"/></to>
    </wire>
    <wire loc="160:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x7f37a4003670"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f37a3f6c5d0"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f37a3f6c5d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2cb69b0"/></to>
    </wire>
    <wire loc="171:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x7f37a3ff7670"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f37a3f5bc10"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f37a3f5bc10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2c440a0"/></to>
    </wire>
    <wire loc="188:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x7f37a3fe4670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f37a3f3c2b0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f37a3f3c2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2b70e20"/></to>
    </wire>
    <wire loc="194:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x7f37a3fdeb20"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a3ee3160"/></to>
    </wire>
    <wire loc="174:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x7f37a3ff5cb0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f37a3f525d0"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f37a3f525d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2bebe20"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f37a3f8dda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d943f0"/></to>
    </wire>
    <wire loc="152:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x7f37a400b020"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f37a3f7a5d0"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f37a3f7a5d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d1ee20"/></to>
    </wire>
    <wire loc="192:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x7f37a3fe04e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a3eeec90"/></to>
    </wire>
    <wire loc="155:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x7f37a4009670"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f37a3f73d30"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f37a3f73d30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2cc6c90"/></to>
    </wire>
    <wire loc="166:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x7f37a3ffd800"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f37a3f60440"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f37a3f60440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2c540a0"/></to>
    </wire>
    <wire loc="177:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x7f37a3ff1670"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f37a3f4fa80"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f37a3f4fa80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2be16d0"/></to>
    </wire>
    <wire loc="186:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x7f37a3fe6020"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f37a3f3fda0"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f37a3f3fda0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2b766d0"/></to>
    </wire>
    <wire loc="144:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x7f37a4015990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f37a3f88440"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f37a3f88440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d86e20"/></to>
    </wire>
    <wire loc="147:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x7f37a4012020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f37a3f81c10"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f37a3f81c10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d2ee20"/></to>
    </wire>
    <wire loc="158:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x7f37a4005020"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f37a3f6e2b0"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f37a3f6e2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2cbc3f0"/></to>
    </wire>
    <wire loc="169:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x7f37a3ff9060"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f37a3f5d8f0"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f37a3f5d8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2c4b9b0"/></to>
    </wire>
    <wire loc="180:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x7f37a3fec020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f37a3f4a020"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f37a3f4a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2bd70a0"/></to>
    </wire>
    <wire loc="139:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x7f37a401bb20"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f37a3f8fa80"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f37a3f8fa80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d9be20"/></to>
    </wire>
    <wire loc="150:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x7f37a400f990"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f37a3f7c2b0"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f37a3f7c2b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d246d0"/></to>
    </wire>
    <wire loc="161:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x7f37a4002990"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f37a3f6b760"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f37a3f6b760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2cb3e20"/></to>
    </wire>
    <wire loc="189:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x7f37a3fe3990"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f37a3f3b440"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f37a3f3b440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2b6c0a0"/></to>
    </wire>
    <wire loc="164:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x7f37a3fff020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f37a3f62020"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f37a3f62020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2c5bc90"/></to>
    </wire>
    <wire loc="175:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x7f37a3ff3020"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f37a3f51760"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f37a3f51760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2be70a0"/></to>
    </wire>
    <wire loc="184:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x7f37a3fe9990"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f37a3f42a80"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f37a3f42a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2b7c0a0"/></to>
    </wire>
    <wire loc="195:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x7f37a3fdde40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a3edec90"/></to>
    </wire>
    <wire loc="142:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x7f37a4017350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f37a3f8b020"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f37a3f8b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d916d0"/></to>
    </wire>
    <wire loc="153:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x7f37a400a350"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f37a3f79760"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f37a3f79760"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d1a0a0"/></to>
    </wire>
    <wire loc="182:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x7f37a3feb350"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f37a3f447a0"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f37a3f447a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2b84c90"/></to>
    </wire>
    <wire loc="156:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x7f37a4008990"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x7f37a3f71e60"/></to>
    </wire>
    <wire loc="67:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x7f37a3f71e60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2cc3e20"/></to>
    </wire>
    <wire loc="167:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x7f37a3ffcb20"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f37a3f5f5d0"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f37a3f5f5d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2c513f0"/></to>
    </wire>
    <wire loc="178:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x7f37a3ff0990"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f37a3f4ec10"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f37a3f4ec10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2bde9b0"/></to>
    </wire>
    <wire loc="187:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x7f37a3fe5350"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f37a3f3d020"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f37a3f3d020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2b739b0"/></to>
    </wire>
    <wire loc="137:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x7f37a402b540"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f37a3f916b0"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f37a3f916b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2da17e0"/></to>
    </wire>
    <wire loc="148:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x7f37a4011350"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x7f37a3f80da0"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x7f37a3f80da0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d2a0a0"/></to>
    </wire>
    <wire loc="159:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x7f37a4004350"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x7f37a3f6d440"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x7f37a3f6d440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2cb96d0"/></to>
    </wire>
    <wire loc="170:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x7f37a3ff8350"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x7f37a3f5ca80"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x7f37a3f5ca80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2c48e20"/></to>
    </wire>
    <wire loc="193:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x7f37a3fdf800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a3ee86d0"/></to>
    </wire>
    <wire loc="173:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x7f37a3ff6990"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x7f37a3f533f0"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x7f37a3f533f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2befc90"/></to>
    </wire>
    <wire loc="162:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x7f37a4001cb0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x7f37a3f6a8f0"/></to>
    </wire>
    <wire loc="73:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x7f37a3f6a8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2caf0a0"/></to>
    </wire>
    <wire loc="140:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x7f37a401ae40"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x7f37a3f8ec10"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x7f37a3f8ec10"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d970a0"/></to>
    </wire>
    <wire loc="151:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x7f37a400ecb0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x7f37a3f7b440"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x7f37a3f7b440"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f37a2d219b0"/></to>
    </wire>
    <wire loc="54:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a40f8850"/></to>
    </wire>
    <wire loc="55:../../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f37a40f3c90"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f37a410f140"/></to>
    </wire>
    <wire loc="92:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f37a40d49e0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f37a36ec4c0"/></to>
    </wire>
    <wire loc="99:../InterceptBase/BaseStationP.nc">
      <from><interface-ref name="uartSendTask" scoped="" ref="0x7f37a3e26720"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="100:../InterceptBase/BaseStationP.nc">
      <from><interface-ref name="radioSendTask" scoped="" ref="0x7f37a3e25610"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f37a3dac2e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a3dd0110"/></to>
    </wire>
    <wire loc="54:../../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f37a3dce020"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f37a3dd1b50"/></to>
    </wire>
    <wire loc="56:../../../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f37a3dd1b50"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x7f37a401bb20"/></to>
    </wire>
    <wire loc="55:../../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f37a3dcd340"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f37a3dafe70"/></to>
    </wire>
    <wire loc="57:../../../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f37a3dafe70"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x7f37a401c800"/></to>
    </wire>
    <wire loc="56:../../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f37a3dcc660"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f37a3dad0f0"/></to>
    </wire>
    <wire loc="58:../../../../tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f37a3dad0f0"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x7f37a402b540"/></to>
    </wire>
    <wire loc="75:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f37a3d6f140"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f37a3d46080"/></to>
    </wire>
    <wire loc="70:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3d9c2e0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3d6bbb0"/></to>
    </wire>
    <wire loc="80:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3d6bbb0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3d43bb0"/></to>
    </wire>
    <wire loc="82:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f37a3d6a2b0"/></from>
      <to><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f37a3d41a10"/></to>
    </wire>
    <wire loc="77:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f37a3d6e1d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f37a3d451d0"/></to>
    </wire>
    <wire loc="79:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f37a3d6b020"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f37a3d43020"/></to>
    </wire>
    <wire loc="76:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a3d8a5b0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a3d67320"/></to>
    </wire>
    <wire loc="86:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a3d67320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a3d26320"/></to>
    </wire>
    <wire loc="78:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f37a3d6d3f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a3d443f0"/></to>
    </wire>
    <wire loc="75:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3d919f0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3d68800"/></to>
    </wire>
    <wire loc="85:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3d68800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3d2f800"/></to>
    </wire>
    <wire loc="77:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f37a3d83880"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f37a3d67e10"/></to>
    </wire>
    <wire loc="87:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f37a3d67e10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f37a3d26e10"/></to>
    </wire>
    <wire loc="83:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f37a3d69020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f37a3d422d0"/></to>
    </wire>
    <wire loc="78:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f37a3d80690"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f37a3d66ad0"/></to>
    </wire>
    <wire loc="88:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f37a3d66ad0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f37a3d25ad0"/></to>
    </wire>
    <wire loc="81:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7f37a3d777c0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a3d548a0"/></to>
    </wire>
    <wire loc="97:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a3d548a0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a3d18270"/></to>
    </wire>
    <wire loc="80:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a3d76880"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a3d4d970"/></to>
    </wire>
    <wire loc="96:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a3d4d970"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a3d143f0"/></to>
    </wire>
    <wire loc="254:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f37a3d46080"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f37a39340e0"/></to>
    </wire>
    <wire loc="345:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a3d1d1c0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a35963b0"/></to>
    </wire>
    <wire loc="139:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3d43bb0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3b303a0"/></to>
    </wire>
    <wire loc="141:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f37a3d41a10"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f37a3b33720"/></to>
    </wire>
    <wire loc="136:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f37a3d451d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f37a3b32530"/></to>
    </wire>
    <wire loc="138:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f37a3d43020"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f37a3b31b00"/></to>
    </wire>
    <wire loc="91:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f37a3d5d400"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f37a3d22c90"/></to>
    </wire>
    <wire loc="343:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f37a3d22c90"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f37a359ae80"/></to>
    </wire>
    <wire loc="255:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a3d26320"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a3932a40"/></to>
    </wire>
    <wire loc="137:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f37a3d443f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a3b313a0"/></to>
    </wire>
    <wire loc="309:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a3d18270"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a35e0020"/></to>
    </wire>
    <wire loc="95:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a3d55270"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a3d1bd70"/></to>
    </wire>
    <wire loc="347:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a3d1bd70"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a358da40"/></to>
    </wire>
    <wire loc="90:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f37a3d5fdf0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f37a3d246d0"/></to>
    </wire>
    <wire loc="344:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f37a3d246d0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f37a3591e70"/></to>
    </wire>
    <wire loc="288:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3d2f800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3831b60"/></to>
    </wire>
    <wire loc="226:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f37a3d26e10"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f37a3954d60"/></to>
    </wire>
    <wire loc="140:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f37a3d422d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f37a3b34020"/></to>
    </wire>
    <wire loc="264:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f37a3d25ad0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f37a38bc5f0"/></to>
    </wire>
    <wire loc="93:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f37a3d52520"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f37a3d1b510"/></to>
    </wire>
    <wire loc="346:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f37a3d1b510"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f37a358d1e0"/></to>
    </wire>
    <wire loc="310:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a3d143f0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a35e4020"/></to>
    </wire>
    <wire loc="57:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f37a39340e0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f37a3930630"/></to>
    </wire>
    <wire loc="89:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a35963b0"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a3570a40"/></to>
    </wire>
    <wire loc="172:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Notifier" scoped="" ref="0x7f37a3d3e020"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3a7ed30"/></to>
    </wire>
    <wire loc="160:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendResource" scoped="" ref="0x7f37a3d362c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f37a3ab3390"/></to>
    </wire>
    <wire loc="98:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f37a3ab3390"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f37a29d9020"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3b303a0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f37a2a2fb00"/></to>
    </wire>
    <wire loc="58:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a35e4020"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a285dcb0"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f37a3b32530"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f37a2a31d60"/></to>
    </wire>
    <wire loc="65:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f37a3b31b00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f37a2a2f3e0"/></to>
    </wire>
    <wire loc="173:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7f37a3d273c0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f37a39a0dd0"/></to>
    </wire>
    <wire loc="58:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x7f37a39a0dd0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f37a296d790"/></to>
    </wire>
    <wire loc="174:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7f37a3d30890"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f37a3aaee00"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a3932a40"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a28f1da0"/></to>
    </wire>
    <wire loc="86:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f37a359ae80"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f37a3573550"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f37a3b313a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a2a30b40"/></to>
    </wire>
    <wire loc="62:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f37a3b33720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f37a2a31020"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a35e0020"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a2859bb0"/></to>
    </wire>
    <wire loc="82:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a358da40"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a346d020"/></to>
    </wire>
    <wire loc="95:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f37a3591e70"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f37a3569560"/></to>
    </wire>
    <wire loc="170:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Send" scoped="" ref="0x7f37a3d38a60"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7f37a3a80a50"/></to>
    </wire>
    <wire loc="117:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f37a3954d60"/></from>
      <to><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7f37a394f100"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f37a3b34020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f37a2a338b0"/></to>
    </wire>
    <wire loc="171:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Receive" scoped="" ref="0x7f37a3d3f840"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7f37a3a7e760"/></to>
    </wire>
    <wire loc="62:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x7f37a38bc5f0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x7f37a28e65f0"/></to>
    </wire>
    <wire loc="97:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f37a358d1e0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f37a35678b0"/></to>
    </wire>
    <wire loc="116:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f37a3c79cf0"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f37a39a3e00"/></to>
    </wire>
    <wire loc="57:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f37a39a3e00"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f37a2970740"/></to>
    </wire>
    <wire loc="117:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a3c72d30"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a3c0e8c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="118:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f37a3c745f0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a35e0020"/></to>
    </wire>
    <wire loc="119:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RF230Packet" scoped="" ref="0x7f37a3c6a430"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f37a359bd90"/></to>
    </wire>
    <wire loc="80:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f37a359bd90"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f37a3574470"/></to>
    </wire>
    <wire loc="124:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f37a3bdb4a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f37a358cdd0"/></to>
    </wire>
    <wire loc="101:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f37a358cdd0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f37a3472ac0"/></to>
    </wire>
    <wire loc="125:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f37a3bdc5f0"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f37a3d0fe50"/></to>
    </wire>
    <wire loc="131:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f37a3b2d8c0"/></from>
      <to><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7f37a3c94440"/></to>
    </wire>
    <wire loc="132:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a3b2e8f0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7f37a3b27880"/></to>
    </wire>
    <wire loc="133:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a3b2d2b0"/></from>
      <to><interface-ref name="TinyosReceive" scoped="" ref="0x7f37a3a3d020"/></to>
    </wire>
    <wire loc="134:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f37a3b30a30"/></from>
      <to><interface-ref name="TinyosPacket" scoped="" ref="0x7f37a3a3d630"/></to>
    </wire>
    <wire loc="149:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f37a3b26c00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f37a3ab3390"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a3b26310"/></from>
      <to><interface-ref name="TinyosSend" scoped="" ref="0x7f37a3a3e5d0"/></to>
    </wire>
    <wire loc="165:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f37a3a7d390"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f37a39a3e00"/></to>
    </wire>
    <wire loc="166:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a3a792b0"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x7f37a3a727c0"/></to>
    </wire>
    <wire loc="167:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a3a79be0"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x7f37a3a3f120"/></to>
    </wire>
    <wire loc="168:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f37a3a7a470"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x7f37a3a3f730"/></to>
    </wire>
    <wire loc="182:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a3a3c4a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f37a3969840"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f37a3969840"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f37a2918120"/></to>
    </wire>
    <wire loc="183:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a3a3cdd0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a399ee60"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f37a399ee60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a296b8f0"/></to>
    </wire>
    <wire loc="184:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f37a3a3a410"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f37a399e080"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f37a399e080"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f37a296ca40"/></to>
    </wire>
    <wire loc="190:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f37a399d500"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f37a3953a10"/></to>
    </wire>
    <wire loc="115:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f37a3953a10"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f37a39518c0"/></to>
    </wire>
    <wire loc="194:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a399c440"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a3954790"/></to>
    </wire>
    <wire loc="114:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f37a3954790"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f37a39512b0"/></to>
    </wire>
    <wire loc="217:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f37a3966be0"/></from>
      <to><interface-ref name="UniqueConfig" scoped="" ref="0x7f37a3cad020"/></to>
    </wire>
    <wire loc="218:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a3968a70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f37a395fe40"/></to>
    </wire>
    <wire loc="113:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f37a395fe40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f37a3952950"/></to>
    </wire>
    <wire loc="219:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f37a3965720"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f37a3cc2770"/></to>
    </wire>
    <wire loc="45:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f37a3cc2770"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f37a2a6a020"/></to>
    </wire>
    <wire loc="220:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f37a3964400"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f37a3cc1570"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="230:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3950720"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3831b60"/></to>
    </wire>
    <wire loc="232:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a3952950"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f37a3934ba0"/></to>
    </wire>
    <wire loc="58:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f37a3934ba0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f37a392f120"/></to>
    </wire>
    <wire loc="233:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a39512b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a39335d0"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f37a39335d0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f37a392fa50"/></to>
    </wire>
    <wire loc="234:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f37a39518c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f37a3933ba0"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f37a3933ba0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f37a392e0a0"/></to>
    </wire>
    <wire loc="250:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f37a3930630"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f37a38bea10"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f37a38bea10"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f37a28e93f0"/></to>
    </wire>
    <wire loc="251:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a392f120"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f37a38bd5d0"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f37a38bd5d0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f37a28e8630"/></to>
    </wire>
    <wire loc="252:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a392fa50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a38bc020"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f37a38bc020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a28e6020"/></to>
    </wire>
    <wire loc="253:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f37a392e0a0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f37a35ddc20"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f37a35ddc20"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f37a28557e0"/></to>
    </wire>
    <wire loc="260:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f37a38ba8b0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f37a3864740"/></to>
    </wire>
    <wire loc="56:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f37a3864740"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f37a28aa280"/></to>
    </wire>
    <wire loc="261:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f37a38b9270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f37a3968270"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f37a3968270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f37a2918a10"/></to>
    </wire>
    <wire loc="262:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f37a38bbaa0"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f37a35afb60"/></to>
    </wire>
    <wire loc="70:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f37a35afb60"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7f37a35a8410"/></to>
    </wire>
    <wire loc="263:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f37a38bb020"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f37a3d0fe50"/></to>
    </wire>
    <wire loc="268:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a3966440"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f37a3863060"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f37a3863060"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f37a28aab70"/></to>
    </wire>
    <wire loc="277:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f37a3861760"/></from>
      <to><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7f37a3ca1910"/></to>
    </wire>
    <wire loc="278:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a3863860"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f37a385cac0"/></to>
    </wire>
    <wire loc="279:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a38622b0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f37a3831400"/></to>
    </wire>
    <wire loc="280:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a3862a10"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a3c0e8c0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="286:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="AckReceivedFlag" scoped="" ref="0x7f37a382c5d0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f37a35d49b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="287:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a382f780"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a3c0e8c0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="292:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f37a382e440"/></from>
      <to><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7f37a3cafc50"/></to>
    </wire>
    <wire loc="293:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a3830630"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f37a3810720"/></to>
    </wire>
    <wire loc="71:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f37a3810720"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f37a3809020"/></to>
    </wire>
    <wire loc="294:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a382f020"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f37a380f060"/></to>
    </wire>
    <wire loc="72:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f37a380f060"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f37a3809950"/></to>
    </wire>
    <wire loc="299:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f37a3806760"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7f37a3c9b080"/></to>
    </wire>
    <wire loc="300:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a3809020"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f37a35aea40"/></to>
    </wire>
    <wire loc="71:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f37a35aea40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f37a35a7440"/></to>
    </wire>
    <wire loc="301:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a3809950"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f37a35ad400"/></to>
    </wire>
    <wire loc="72:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f37a35ad400"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f37a35a7d70"/></to>
    </wire>
    <wire loc="302:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioCCA" scoped="" ref="0x7f37a3808120"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7f37a359b5c0"/></to>
    </wire>
    <wire loc="79:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f37a359b5c0"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x7f37a3575c40"/></to>
    </wire>
    <wire loc="307:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a35dcc00"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a358da40"/></to>
    </wire>
    <wire loc="308:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f37a35dbcd0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f37a35d3590"/></to>
    </wire>
    <wire loc="311:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7f37a35dab00"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f37a35d49b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f37a35b34a0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x7f37a359bd90"/></to>
    </wire>
    <wire loc="326:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f37a35a5b40"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x7f37a3c9b080"/></to>
    </wire>
    <wire loc="327:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a35a7440"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f37a359c460"/></to>
    </wire>
    <wire loc="77:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f37a359c460"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f37a3576aa0"/></to>
    </wire>
    <wire loc="328:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a35a7d70"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f37a359cdd0"/></to>
    </wire>
    <wire loc="78:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f37a359cdd0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f37a3575480"/></to>
    </wire>
    <wire loc="329:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubState" scoped="" ref="0x7f37a35a8410"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f37a359f610"/></to>
    </wire>
    <wire loc="76:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f37a359f610"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f37a3577c40"/></to>
    </wire>
    <wire loc="341:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f37a35861f0"/></from>
      <to><interface-ref name="RF230DriverConfig" scoped="" ref="0x7f37a3cb7a90"/></to>
    </wire>
    <wire loc="342:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f37a35852e0"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a35e0020"/></to>
    </wire>
    <wire loc="349:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f37a3581110"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f37a35d49b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="350:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7f37a3581ca0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f37a35d49b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="351:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f37a35808d0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x7f37a35d49b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="352:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a357f470"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a3c0e8c0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="353:../../../../tos/chips/rf230/RF230RadioC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f37a357e110"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f37a3d0fe50"/></to>
    </wire>
    <wire loc="46:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f37a3cc1570"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f37a2a6ad60"/></to>
    </wire>
    <wire loc="55:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a3c0e8c0"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a2a4fa40"/></to>
    </wire>
    <wire loc="56:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f37a2a4e9c0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f37a3bdb4a0"/></to>
    </wire>
    <wire loc="57:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f37a2a4bb10"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f37a3bdc5f0"/></to>
    </wire>
    <wire loc="59:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f37a2a2a020"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f37a3b4d260"/></to>
    </wire>
    <wire loc="68:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f37a2a2e310"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f37a3b30a30"/></to>
    </wire>
    <wire loc="69:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a2a2d120"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f37a3b2e8f0"/></to>
    </wire>
    <wire loc="70:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a2a2da50"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f37a3b2d2b0"/></to>
    </wire>
    <wire loc="71:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f37a2a2c0a0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f37a3b2d8c0"/></to>
    </wire>
    <wire loc="99:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f37a3ab2150"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f37a29d9d80"/></to>
    </wire>
    <wire loc="100:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f37a3ab28d0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f37a29d8560"/></to>
    </wire>
    <wire loc="101:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f37a29d8e50"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f37a3ab11f0"/></to>
    </wire>
    <wire loc="103:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f37a29d7640"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f37a29dc060"/></to>
    </wire>
    <wire loc="68:../../../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f37a29d6170"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f37a296a020"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f37a3b4d260"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f37a296aae0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f37a399d500"/></to>
    </wire>
    <wire loc="62:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a29698f0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f37a399c440"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x7f37a2914590"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x7f37a3965720"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f37a2913270"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f37a3964400"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a29168e0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f37a3968a70"/></to>
    </wire>
    <wire loc="67:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a29152b0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f37a3966440"/></to>
    </wire>
    <wire loc="68:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <from><interface-ref name="UniqueConfig" scoped="" ref="0x7f37a2915a10"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f37a3966be0"/></to>
    </wire>
    <wire loc="118:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7f37a394fd90"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3950720"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f37a28e5dc0"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f37a38bb020"/></to>
    </wire>
    <wire loc="65:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f37a28e5020"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x7f37a38bbaa0"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x7f37a28e4880"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x7f37a38ba8b0"/></to>
    </wire>
    <wire loc="67:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x7f37a28e3270"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x7f37a38b9270"/></to>
    </wire>
    <wire loc="189:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0x7f37a28e22f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="144:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="stateDoneTask" scoped="" ref="0x7f37a28e2ad0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="deliverTask" scoped="" ref="0x7f37a28e3a50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a28a84a0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f37a3863860"/></to>
    </wire>
    <wire loc="58:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f37a28a6a10"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f37a3861760"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a28a8dd0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f37a38622b0"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a28a7560"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a3862a10"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f37a28a6270"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f37a3878160"/></to>
    </wire>
    <wire loc="56:../../../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f37a3878160"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f37a3872100"/></to>
    </wire>
    <wire loc="78:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <from><interface-ref name="calcNextRandom" scoped="" ref="0x7f37a28a5610"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7f37a3879060"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7f37a3873020"/></to>
    </wire>
    <wire loc="54:../../../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f37a387b230"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a38746e0"/></to>
    </wire>
    <wire loc="76:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f37a3813d60"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f37a380c4b0"/></to>
    </wire>
    <wire loc="73:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f37a380f7c0"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7f37a3808120"/></to>
    </wire>
    <wire loc="70:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x7f37a3811840"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x7f37a380a020"/></to>
    </wire>
    <wire loc="74:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f37a380d020"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f37a38088c0"/></to>
    </wire>
    <wire loc="80:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f37a380de00"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f37a3806760"/></to>
    </wire>
    <wire loc="78:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f37a3811270"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7f37a380b950"/></to>
    </wire>
    <wire loc="77:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f37a3812880"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7f37a380b020"/></to>
    </wire>
    <wire loc="61:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x7f37a28514c0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f37a35dbcd0"/></to>
    </wire>
    <wire loc="63:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a2853250"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a35dcc00"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f37a28523f0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f37a37b2a50"/></to>
    </wire>
    <wire loc="26:../../../../tos/system/LocalTimeMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f37a37b2a50"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f37a379b160"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x7f37a2854640"/></from>
      <to><interface-ref name="TimeStampFlag" scoped="" ref="0x7f37a35dab00"/></to>
    </wire>
    <wire loc="65:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f37a379b160"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f37a3600790"/></to>
    </wire>
    <wire loc="61:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f37a37a0d60"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f37a360f150"/></to>
    </wire>
    <wire loc="59:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f37a37ae540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a3799920"/></to>
    </wire>
    <wire loc="35:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f37a3799920"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a368f980"/></to>
    </wire>
    <wire loc="62:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f37a3609640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f37a365f830"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f37a365acd0"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x7f37a3796350"/></to>
    </wire>
    <wire loc="36:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x7f37a3796350"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f37a368e1d0"/></to>
    </wire>
    <wire loc="66:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f37a35ffa60"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x7f37a378c910"/></to>
    </wire>
    <wire loc="37:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x7f37a378c910"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f37a368a650"/></to>
    </wire>
    <wire loc="72:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f37a368a650"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f37a282bd50"/></to>
    </wire>
    <wire loc="70:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f37a368f980"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a282f1b0"/></to>
    </wire>
    <wire loc="71:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f37a368e1d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f37a282f9c0"/></to>
    </wire>
    <wire loc="74:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f37a2828020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f37a3708910"/></to>
    </wire>
    <wire loc="94:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f37a3708910"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f37a36f79c0"/></to>
    </wire>
    <wire loc="75:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a2823190"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a3701c10"/></to>
    </wire>
    <wire loc="95:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a3701c10"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a36f2c10"/></to>
    </wire>
    <wire loc="76:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f37a28223e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f37a36ff060"/></to>
    </wire>
    <wire loc="96:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f37a36ff060"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f37a36f0060"/></to>
    </wire>
    <wire loc="77:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7f37a281e780"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7f37a36fb580"/></to>
    </wire>
    <wire loc="97:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x7f37a36fb580"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x7f37a36ecc00"/></to>
    </wire>
    <wire loc="74:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f37a3655020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f37a3604a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f37a35ed2e0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f37a37a0d60"/></to>
    </wire>
    <wire loc="76:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f37a35b00e0"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f37a35aa920"/></to>
    </wire>
    <wire loc="73:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x7f37a35adb60"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x7f37a35a65a0"/></to>
    </wire>
    <wire loc="74:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x7f37a35ab400"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x7f37a35a6d40"/></to>
    </wire>
    <wire loc="80:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f37a35aa2b0"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f37a35a5b40"/></to>
    </wire>
    <wire loc="78:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f37a35af590"/></from>
      <to><interface-ref name="SubBareReceive" scoped="" ref="0x7f37a35a9d70"/></to>
    </wire>
    <wire loc="77:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f37a35b0b60"/></from>
      <to><interface-ref name="SubBareSend" scoped="" ref="0x7f37a35a9440"/></to>
    </wire>
    <wire loc="75:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f37a3472ac0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f37a32756e0"/></to>
    </wire>
    <wire loc="92:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f37a3594940"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f37a356c020"/></to>
    </wire>
    <wire loc="81:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a346d020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f37a326d3a0"/></to>
    </wire>
    <wire loc="84:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f37a3554b50"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f37a35861f0"/></to>
    </wire>
    <wire loc="87:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f37a3553a10"/></from>
      <to><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f37a3581110"/></to>
    </wire>
    <wire loc="90:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x7f37a35526a0"/></from>
      <to><interface-ref name="RSSIFlag" scoped="" ref="0x7f37a3581ca0"/></to>
    </wire>
    <wire loc="93:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f37a35513a0"/></from>
      <to><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f37a35808d0"/></to>
    </wire>
    <wire loc="96:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f37a3550200"/></from>
      <to><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f37a35852e0"/></to>
    </wire>
    <wire loc="99:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f37a355b9d0"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a346d020"/></to>
    </wire>
    <wire loc="102:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a354cb70"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a357f470"/></to>
    </wire>
    <wire loc="104:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7f37a3565020"/></from>
      <to><interface-ref name="SELN" scoped="" ref="0x7f37a347a940"/></to>
    </wire>
    <wire loc="69:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x7f37a347a940"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7f37a4014cb0"/></to>
    </wire>
    <wire loc="105:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f37a3564380"/></from>
      <to><interface-ref name="SpiResource" scoped="" ref="0x7f37a3477b50"/></to>
    </wire>
    <wire loc="63:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f37a3477b50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f37a3448a60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f37a355e270"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f37a3476920"/></to>
    </wire>
    <wire loc="64:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f37a3476920"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f37a344b020"/></to>
    </wire>
    <wire loc="108:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7f37a355edd0"/></from>
      <to><interface-ref name="SLP_TR" scoped="" ref="0x7f37a34754e0"/></to>
    </wire>
    <wire loc="67:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x7f37a34754e0"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x7f37a400a350"/></to>
    </wire>
    <wire loc="109:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f37a3561020"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7f37a34747f0"/></to>
    </wire>
    <wire loc="68:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f37a34747f0"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x7f37a4016670"/></to>
    </wire>
    <wire loc="111:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7f37a3558b30"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7f37a3473b10"/></to>
    </wire>
    <wire loc="57:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x7f37a3473b10"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x7f37a346c9c0"/></to>
    </wire>
    <wire loc="112:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x7f37a354c080"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x7f37a357e110"/></to>
    </wire>
    <wire loc="113:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f37a35554d0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f37a321b9a0"/></to>
    </wire>
    <wire loc="856:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <from><interface-ref name="releaseSpi" scoped="" ref="0x7f37a34b9190"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:../../../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f37a32756e0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f37a274f870"/></to>
    </wire>
    <wire loc="95:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f37a344b020"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f37a343d480"/></to>
    </wire>
    <wire loc="48:../../../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f37a326d3a0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f37a3226b60"/></to>
    </wire>
    <wire loc="59:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortCLKM" scoped="" ref="0x7f37a345c3d0"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x7f37a3ff8350"/></to>
    </wire>
    <wire loc="60:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortIRQ" scoped="" ref="0x7f37a345b680"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x7f37a3ffbe40"/></to>
    </wire>
    <wire loc="72:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f37a34607f0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f37a336d850"/></to>
    </wire>
    <wire loc="91:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f37a336d850"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f37a33539e0"/></to>
    </wire>
    <wire loc="96:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f37a3440c80"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f37a343c020"/></to>
    </wire>
    <wire loc="94:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f37a3449840"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f37a343ee00"/></to>
    </wire>
    <wire loc="92:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f37a344c1f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a343e7e0"/></to>
    </wire>
    <wire loc="97:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f37a3448a60"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f37a3382900"/></to>
    </wire>
    <wire loc="98:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f37a3382900"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f37a278e490"/></to>
    </wire>
    <wire loc="99:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f37a337f730"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f37a343cd70"/></to>
    </wire>
    <wire loc="100:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Spi" scoped="" ref="0x7f37a341e800"/></from>
      <to><interface-ref name="SpiBus" scoped="" ref="0x7f37a33de710"/></to>
    </wire>
    <wire loc="83:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SpiBus" scoped="" ref="0x7f37a33de710"/></from>
      <to><interface-ref name="SPI" scoped="" ref="0x7f37a33d66b0"/></to>
    </wire>
    <wire loc="101:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7f37a341d620"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f37a40d6a50"/></to>
    </wire>
    <wire loc="294:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <from><interface-ref name="zeroTask" scoped="" ref="0x7f37a33fdde0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="Mcu" scoped="" ref="0x7f37a33cb060"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f37a40d6a50"/></to>
    </wire>
    <wire loc="86:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SS" scoped="" ref="0x7f37a33d26c0"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x7f37a4014cb0"/></to>
    </wire>
    <wire loc="87:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x7f37a33d1970"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x7f37a4012020"/></to>
    </wire>
    <wire loc="88:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MOSI" scoped="" ref="0x7f37a33ceb20"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x7f37a4011350"/></to>
    </wire>
    <wire loc="89:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MISO" scoped="" ref="0x7f37a33cde30"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x7f37a4010670"/></to>
    </wire>
    <wire loc="99:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f37a33806c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f37a278c220"/></to>
    </wire>
    <wire loc="100:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f37a3380e40"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f37a278c9a0"/></to>
    </wire>
    <wire loc="101:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f37a278b400"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f37a337f730"/></to>
    </wire>
    <wire loc="103:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f37a278bbc0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f37a2790410"/></to>
    </wire>
    <wire loc="68:../../../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f37a278a7a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a336e020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a33542c0"/></to>
    </wire>
    <wire loc="89:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f37a3377bf0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f37a3359020"/></to>
    </wire>
    <wire loc="93:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f37a3362ad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7f37a334e5a0"/></to>
    </wire>
    <wire loc="94:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f37a3362ad0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7f37a334aba0"/></to>
    </wire>
    <wire loc="95:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f37a3362ad0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7f37a3345120"/></to>
    </wire>
    <wire loc="43:../../../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f37a274baa0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f37a3377bf0"/></to>
    </wire>
    <wire loc="44:../../../../tos/platforms/mica/AlarmOne16C.nc">
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f37a2746db0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f37a3362ad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="27:../../../../tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f37a32b2410"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f37a3377bf0"/></to>
    </wire>
    <wire loc="49:../../../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f37a3224e40"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f37a3247cf0"/></to>
    </wire>
    <wire loc="50:../../../../tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f37a32290f0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f37a3269200"/></to>
    </wire>
    <wire loc="31:../../../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f37a3269200"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f37a3252020"/></to>
    </wire>
    <wire loc="32:../../../../tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f37a3250280"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f37a3377bf0"/></to>
    </wire>
    <wire loc="67:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f37a314f4e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f37a3126c80"/></to>
    </wire>
    <wire loc="67:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a31ba800"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3156400"/></to>
    </wire>
    <wire loc="69:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f37a3152e50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f37a3126630"/></to>
    </wire>
    <wire loc="60:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f37a314c940"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f37a31b9300"/></to>
    </wire>
    <wire loc="69:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f37a3156d90"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f37a314d020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f37a3155a50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a314e4c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f37a314c020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f37a2dfd1e0"/></to>
    </wire>
    <wire loc="64:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f37a314d020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f37a2ff5830"/></to>
    </wire>
    <wire loc="65:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f37a314e4c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f37a2ff5110"/></to>
    </wire>
    <wire loc="66:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f37a2ff3760"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f37a314c020"/></to>
    </wire>
    <wire loc="70:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f37a311e430"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f37a314c940"/></to>
    </wire>
    <wire loc="71:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f37a2ff1590"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f37a314c940"/></to>
    </wire>
    <wire loc="72:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f37a2fe9cc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f37a314c940"/></to>
    </wire>
    <wire loc="74:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f37a2ff20e0"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f37a3123080"/></to>
    </wire>
    <wire loc="75:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f37a2ff29d0"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f37a3120b10"/></to>
    </wire>
    <wire loc="77:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f37a3115410"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f37a2fedb60"/></to>
    </wire>
    <wire loc="78:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f37a3110530"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f37a2fc2150"/></to>
    </wire>
    <wire loc="48:../../../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f37a2fc2150"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f37a2fbc4b0"/></to>
    </wire>
    <wire loc="80:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f37a2fdfd20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f37a2fc2960"/></to>
    </wire>
    <wire loc="49:../../../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f37a2fc2960"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f37a2fb8850"/></to>
    </wire>
    <wire loc="332:../../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f37a30bfe40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f37a30f6d50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f37a30c1400"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f37a30ba0c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f37a2ff0c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f37a2fef480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f37a2fc0020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f37a2fbccb0"/></to>
    </wire>
    <wire loc="51:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f37a2fbccb0"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f37a2f6c5a0"/></to>
    </wire>
    <wire loc="52:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f37a2fb8850"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f37a2f6b0c0"/></to>
    </wire>
    <wire loc="50:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f37a2fbc4b0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f37a2fb2d80"/></to>
    </wire>
    <wire loc="53:../../../../tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f37a2fb7c20"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f37a2ed6dd0"/></to>
    </wire>
    <wire loc="33:../../../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f37a2ed6dd0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f37a2e0ecd0"/></to>
    </wire>
    <wire loc="53:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f37a2f67810"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f37a2fb7c20"/></to>
    </wire>
    <wire loc="56:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x7f37a2f6a0a0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7f37a2f440f0"/></to>
    </wire>
    <wire loc="60:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x7f37a2f440f0"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x7f37a2f3c3f0"/></to>
    </wire>
    <wire loc="57:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x7f37a2f6a880"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7f37a2f44990"/></to>
    </wire>
    <wire loc="61:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x7f37a2f44990"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x7f37a2f3ccd0"/></to>
    </wire>
    <wire loc="58:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x7f37a2f680a0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7f37a2f433a0"/></to>
    </wire>
    <wire loc="62:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x7f37a2f433a0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x7f37a2f3a5f0"/></to>
    </wire>
    <wire loc="66:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x7f37a2f41c40"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x7f37a2f375f0"/></to>
    </wire>
    <wire loc="64:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x7f37a2f429f0"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x7f37a2f383f0"/></to>
    </wire>
    <wire loc="65:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x7f37a2f413b0"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x7f37a2f38cd0"/></to>
    </wire>
    <wire loc="68:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f37a2f36b20"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f37a403e020"/></to>
    </wire>
    <wire loc="69:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x7f37a2f35980"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x7f37a40d6a50"/></to>
    </wire>
    <wire loc="34:../../../../tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f37a2e0a0f0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f37a2ed0df0"/></to>
    </wire>
    <wire loc="31:../../../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f37a2ed0df0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f37a2e1a3c0"/></to>
    </wire>
    <wire loc="32:../../../../tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f37a2e17660"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f37a2ecbcc0"/></to>
    </wire>
    <wire loc="89:../../../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f37a2ecbcc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f37a2eb4020"/></to>
    </wire>
    <wire loc="90:../../../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a2ec3020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a2eaf2c0"/></to>
    </wire>
    <wire loc="91:../../../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x7f37a2ec2850"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f37a2eae9e0"/></to>
    </wire>
    <wire loc="93:../../../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f37a2ebdad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x7f37a2ea95a0"/></to>
    </wire>
    <wire loc="94:../../../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f37a2ebdad0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x7f37a2ea5ba0"/></to>
    </wire>
    <wire loc="95:../../../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x7f37a2ebdad0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x7f37a2ea0120"/></to>
    </wire>
    <wire loc="27:../../../../tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f37a2e21410"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f37a2ecbcc0"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="BaseStationC" loc="77:../InterceptBase/BaseStationC.nc">
      <documentation loc="41:../InterceptBase/BaseStationC.nc">
        <short>&#10; The TinyOS 2.x base station that forwards packets between the UART&#10; and radio.It replaces the GenericBase of TinyOS 1.0 and the&#10; TOSBase of TinyOS 1.1.</short>
        <long>&#10; The TinyOS 2.x base station that forwards packets between the UART&#10; and radio.It replaces the GenericBase of TinyOS 1.0 and the&#10; TOSBase of TinyOS 1.1.&#10;&#10; &#60;p>On the serial link, BaseStation sends and receives simple active&#10; messages (not particular radio packets): on the radio link, it&#10; sends radio active messages, whose format depends on the network&#10; stack being used. BaseStation will copy its compiled-in group ID to&#10; messages moving from the serial link to the radio, and will filter&#10; out incoming radio messages that do not contain that group ID.&#60;/p>&#10;&#10; &#60;p>BaseStation includes queues in both directions, with a guarantee&#10; that once a message enters a queue, it will eventually leave on the&#10; other interface. The queues allow the BaseStation to handle load&#10; spikes.&#60;/p>&#10;&#10; &#60;p>BaseStation acknowledges a message arriving over the serial link&#10; only if that message was successfully enqueued for delivery to the&#10; radio link.&#60;/p>&#10;&#10; &#60;p>The LEDS are programmed to toggle as follows:&#60;/p>&#10; &#60;ul>&#10; &#60;li>&#60;b>RED Toggle:&#60;/b>: Message bridged from serial to radio&#60;/li>&#10; &#60;li>&#60;b>GREEN Toggle:&#60;/b> Message bridged from radio to serial&#60;/li>&#10; &#60;li>&#60;b>YELLOW/BLUE Toggle:&#60;/b> Dropped message due to queue overflow in either direction&#60;/li>&#10; &#60;/ul>&#10;&#10; @author Phil Buonadonna&#10; @author Gilman Tolle&#10; @author David Gay&#10; @author Philip Levis&#10; @author Dimas Abreu Dutra&#10; @date January 29 2008&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MainC" loc="56:../../../../tos/system/MainC.nc">
      <documentation loc="1:../../../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:../../../../tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:../../../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:../../../../tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:../../../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../../tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="33:../../../../tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="41:../../../../tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="35:../../../../tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="40:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <documentation loc="34:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G5" loc="42(HplAtm128GeneralIOC.G5):../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="56:../../../../tos/platforms/iris/MeasureClockC.nc">
      <documentation loc="47:../../../../tos/platforms/iris/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="80:../../../../tos/chips/atm1281/McuSleepC.nc" safe="">
      <documentation loc="65:../../../../tos/chips/atm1281/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.6 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @date   October 30, 2007&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BaseStationP" loc="58:../InterceptBase/BaseStationP.nc" safe="">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../../../tos/system/LedsC.nc">
      <documentation loc="34:../../../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="42:../../../../tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:../../../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="ActiveMessageC" loc="37:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230ActiveMessageC" loc="41:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC" loc="37:../../../../tos/chips/rf230/RF230RadioC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC.TaskletC" loc="42(RF230RadioC.TaskletC):../../../../tos/lib/rfxlink/util/TaskletC.nc">
      <instance number="0">
        <component-ref qname="TaskletC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC" loc="35(RF230RadioC.NeighborhoodC):../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.NeighborhoodC.NeighborhoodP" loc="37(RF230RadioC.NeighborhoodC.NeighborhoodP):../../../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioP" loc="39:../../../../tos/chips/rf230/RF230RadioP.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC" loc="37(RF230RadioC.RadioAlarmC):../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.RadioAlarmC.RadioAlarmP" loc="50(RF230RadioC.RadioAlarmC.RadioAlarmP):../../../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <instance number="0">
        <component-ref qname="RadioAlarmP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC" loc="35(RF230RadioC.ActiveMessageLayerC):../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP" loc="38(RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP):../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <instance number="0">
        <component-ref qname="ActiveMessageLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.AutoResourceAcquireLayerC" loc="35(RF230RadioC.AutoResourceAcquireLayerC):../../../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <instance number="0">
        <component-ref qname="AutoResourceAcquireLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC" loc="83(RF230RadioC.SendResourceC):../../../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:RADIO_SEND_RESOURCE">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Queue" loc="42(RF230RadioC.SendResourceC.Queue):../../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Arbiter" loc="49(RF230RadioC.SendResourceC.Arbiter):../../../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154MessageLayerC" loc="35(RF230RadioC.Ieee154MessageLayerC):../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154MessageLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TinyosNetworkLayerC" loc="50(RF230RadioC.TinyosNetworkLayerC):../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <instance number="0">
        <component-ref qname="TinyosNetworkLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC" loc="35(RF230RadioC.Ieee154PacketLayerC):../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP" loc="37(RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP):../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <instance number="0">
        <component-ref qname="Ieee154PacketLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC" loc="35(RF230RadioC.UniqueLayerC):../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.UniqueLayerC.UniqueLayerP" loc="37(RF230RadioC.UniqueLayerC.UniqueLayerP):../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <instance number="0">
        <component-ref qname="UniqueLayerP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.PacketLinkLayerC" loc="73(RF230RadioC.PacketLinkLayerC):../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <documentation loc="64:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketLinkLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC" loc="35(RF230RadioC.LowPowerListeningLayerC):../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP" loc="35(RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP):../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <instance number="0">
        <component-ref qname="LowPowerListeningDummyP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC" loc="35(RF230RadioC.MessageBufferLayerC):../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP" loc="39(RF230RadioC.MessageBufferLayerC.MessageBufferLayerP):../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <instance number="0">
        <component-ref qname="MessageBufferLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC" loc="35(RF230RadioC.CollisionAvoidanceLayerC):../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP" loc="38(RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP):../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <instance number="0">
        <component-ref qname="RandomCollisionLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="43:../../../../tos/system/RandomC.nc">
      <documentation loc="33:../../../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.SoftwareAckLayerC" loc="38(RF230RadioC.SoftwareAckLayerC):../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <instance number="0">
        <component-ref qname="SoftwareAckLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.CsmaLayerC" loc="35(RF230RadioC.CsmaLayerC):../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="0">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC" loc="37(RF230RadioC.TimeStampingLayerC):../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP" loc="38(RF230RadioC.TimeStampingLayerC.TimeStampingLayerP):../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <instance number="0">
        <component-ref qname="TimeStampingLayerP"/>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMilliC" loc="19:../../../../tos/system/LocalTimeMilliC.nc">
      <documentation loc="11:../../../../tos/system/LocalTimeMilliC.nc">
        <short>&#10; Provide current time via the LocalTime&#60;TMilli> interface.</short>
        <long>&#10; Provide current time via the LocalTime&#60;TMilli> interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:../../../../tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC):../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="45:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP" loc="58(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP):../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <documentation loc="45:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm1281AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f37a378b9e0"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm1281Timer2AsyncC" loc="77:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <documentation loc="66:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer2AsyncP" loc="78:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc" safe="">
      <documentation loc="65:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
        <short>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 2 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RF230RadioC.MetadataFlagsLayerC" loc="38(RF230RadioC.MetadataFlagsLayerC):../../../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <instance number="0">
        <component-ref qname="MetadataFlagsLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.TrafficMonitorLayerC" loc="35(RF230RadioC.TrafficMonitorLayerC):../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <instance number="1">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230DriverLayerC" loc="38:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <configuration/>
    </component>
    <component qname="RF230DriverLayerP" loc="42:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <module/>
    </component>
    <component qname="HplRF230C" loc="37:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <configuration/>
    </component>
    <component qname="HplRF230P" loc="35:../../../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <module/>
    </component>
    <component qname="Atm128SpiC" loc="80:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <documentation loc="66:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
        <short>&#10; The HAL of the SPI bus on the atm128.</short>
        <long>&#10; The HAL of the SPI bus on the atm128.&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiC.nc,v 1.7 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10; @author Joe Polastre&#10; @date   September 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128SpiP" loc="89:../../../../tos/chips/atm128/spi/Atm128SpiP.nc" safe="">
      <documentation loc="67:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
        <short>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.</short>
        <long>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.  This module assumes the bus has been reserved and&#10; checks that the bus owner is in fact the person using the bus.&#10; SpiPacket provides an asynchronous send interface where the&#10; transmit data length is equal to the receive data length, while&#10; SpiByte provides an interface for sending a single byte&#10; synchronously. SpiByte allows a component to send a few bytes&#10; in a simple fashion: if more than a handful need to be sent,&#10; SpiPacket should be used.&#10;&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiP.nc,v 1.12 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128SpiC" loc="75:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <documentation loc="63:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
        <short>&#10; Configuration encapsulating the basic SPI HPL for the atm128.</short>
        <long>&#10; Configuration encapsulating the basic SPI HPL for the atm128.&#10;&#10; &#60;pre>&#10; $Id: HplAtm128SpiC.nc,v 1.5 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128SpiP" loc="73:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc" safe="">
      <documentation loc="63:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
        <short>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.</short>
        <long>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter" loc="83(Atm128SpiC.Arbiter):../../../../tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:../../../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128SpiC.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Queue" loc="42(Atm128SpiC.Arbiter.Queue):../../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Arbiter" loc="49(Atm128SpiC.Arbiter.Arbiter):../../../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer1C" loc="75:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <documentation loc="67:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer1P" loc="75:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc" safe="">
      <documentation loc="66:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC" loc="28(HplRF230C.AlarmC):../../../../tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:../../../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="InitOneP.InitOne" loc="44(InitOneP.InitOne):../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC.NAlarm" loc="51(HplRF230C.AlarmC.NAlarm):../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TOne" ref="0x7f37a40fd410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC" loc="37:../../../../tos/platforms/iris/LocalTimeMicroC.nc">
      <configuration/>
    </component>
    <component qname="CounterOne16C" loc="22:../../../../tos/platforms/mica/CounterOne16C.nc">
      <documentation loc="11:../../../../tos/platforms/mica/CounterOne16C.nc">
        <short>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C.NCounter" loc="42(CounterOne16C.NCounter):../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TOne" ref="0x7f37a40fd410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.TransformCounterC" loc="54(LocalTimeMicroC.TransformCounterC):../../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.CounterToLocalTimeC" loc="46(LocalTimeMicroC.CounterToLocalTimeC):../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="34:../../../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:../../../../tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:../../../../tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:../../../../tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):../../../../tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:../../../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="38:../../../../tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="112:../../../../tos/chips/atm1281/HplAtm128UartP.nc">
      <documentation loc="102:../../../../tos/chips/atm1281/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega1281 serial port HPL.</short>
        <long> &#10; Private component of the Atmega1281 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:../../../../tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:../../../../tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:../../../../tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:../../../../tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="75:../../../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <documentation loc="67:../../../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer3P" loc="75:../../../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc" safe="">
      <documentation loc="66:../../../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="44(InitThreeP.InitThree):../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="42(CounterThree16C.NCounter):../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TThree" ref="0x7f37a40fd7b0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="54(CounterMicro32C.Transform32):../../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TThree" ref="0x7f37a40fd7b0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x7f37a40fc0d0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RssiBaseC" loc="39:RssiBaseC.nc">
      <documentation loc="32:../RssiDemoMessages.h">
        <short>&#10; </short>
        <long>&#10; @author Dimas Abreu Dutra&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f37a3fd7590" loc="40:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f37a3fd7900" loc="40:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f37a3fd7c70" loc="40:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f37a3fca9e0" loc="41:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f37a3fcad70" loc="42:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f37a3fc7170" loc="43:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f37a3fc74c0" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f37a3f320d0" loc="42:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f37a3f32460" loc="43:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f37a3f327f0" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f37a3f32b40" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TaskletC" loc="42:../../../../tos/lib/rfxlink/util/TaskletC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="NeighborhoodC" loc="35:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7f37a3cff7e0" loc="35:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
          <component-ref qname="NeighborhoodC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="NeighborhoodP" loc="37:../../../../tos/lib/rfxlink/util/NeighborhoodP.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x7f37a3cee020" loc="37:../../../../tos/lib/rfxlink/util/NeighborhoodP.nc">
          <component-ref qname="NeighborhoodP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="RadioAlarmC" loc="37:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RadioAlarmP" loc="50:../../../../tos/lib/rfxlink/util/RadioAlarmP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ActiveMessageLayerC" loc="35:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ActiveMessageLayerP" loc="38:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AutoResourceAcquireLayerC" loc="35:../../../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleFcfsArbiterC" loc="83:../../../../tos/system/SimpleFcfsArbiterC.nc" abstract="">
      <documentation loc="62:../../../../tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f37a3b11590" loc="83:../../../../tos/system/SimpleFcfsArbiterC.nc">
          <component-ref qname="SimpleFcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f37a3b03060" loc="42:../../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154MessageLayerC" loc="35:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TinyosNetworkLayerC" loc="50:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Ieee154PacketLayerC" loc="35:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Ieee154PacketLayerP" loc="37:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="UniqueLayerC" loc="35:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7f37a3998830" loc="35:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
          <component-ref qname="UniqueLayerC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="UniqueLayerP" loc="37:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc" abstract="">
      <parameters>
        <constant name="neigborhoodSize" ref="0x7f37a398b020" loc="37:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
          <component-ref qname="UniqueLayerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="PacketLinkLayerC" loc="73:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc" abstract="">
      <documentation loc="64:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyC" loc="35:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyP" loc="35:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="MessageBufferLayerC" loc="35:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="MessageBufferLayerP" loc="39:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="RandomCollisionLayerC" loc="35:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RandomCollisionLayerP" loc="38:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SoftwareAckLayerC" loc="38:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="DummyLayerC" loc="35:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerC" loc="37:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerP" loc="38:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="58:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="45:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7f37a378b9e0" loc="58:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f37a378b9e0"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7f37a378bcf0" loc="58:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm1281AlarmAsyncP" loc="58:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="45:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7f37a377d5e0" loc="58:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7f37a377d5e0"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7f37a377d8f0" loc="58:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f37a3683020" loc="46:../../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f37a3683020"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f37a3650230" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f37a3650230"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f37a3650560" loc="46:../../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f37a3602de0" loc="46:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f37a3602de0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="MetadataFlagsLayerC" loc="38:../../../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmOne16C" loc="28:../../../../tos/platforms/mica/AlarmOne16C.nc" abstract="">
      <documentation loc="11:../../../../tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128TimerInitC" loc="44:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7f37a32bd290" loc="44:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f37a32bd290"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x7f37a32bd600" loc="44:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmC" loc="51:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f37a32c2d60" loc="51:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f37a32c2d60"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7f37a32a9580" loc="52:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f37a32a9580"/></type-var>
        </typedef>
        <constant name="mindt" ref="0x7f37a32a98a0" loc="53:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="42:../../../../tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f37a3265910" loc="42:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f37a3265910"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x7f37a3262120" loc="43:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f37a3262120"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f37a3246600" loc="55:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f37a3246600"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f37a3246dd0" loc="56:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f37a3246dd0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f37a3245220" loc="57:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f37a3245220"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f37a3245a00" loc="58:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f37a3245a00"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f37a3245dd0" loc="59:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f37a3244630" loc="60:../../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f37a3244630"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:../../../../tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:../../../../tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="1" name="SerialIntercept" ref="0x7f37a404c210" loc="79:../InterceptBase/BaseStationC.nc">
      <component-ref qname="BaseStationC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIntercept" scoped="" ref="0x7f37a404c210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0x7f37a404c590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioIntercept" ref="0x7f37a404d540" loc="78:../InterceptBase/BaseStationC.nc">
      <component-ref qname="BaseStationC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioIntercept" scoped="" ref="0x7f37a404d540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0x7f37a404d8c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f37a40414d0" loc="58:../../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a40414d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a4041850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f37a4045020" loc="57:../../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f37a4045020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f37a40453a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f37a403ed50" loc="52:../../../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f37a403ed50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a403d100"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a4044c70" loc="46:../../../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a4044c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a403f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7f37a403e020" loc="50:../../../../tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f37a403e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f37a403e3a0"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f37a403e530"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f37a403e6c0"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f37a403e850"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f37a403e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f37a40367a0" loc="45:../../../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x7f37a40367a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a4036b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a40360c0" loc="44:../../../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a40360c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a4036440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x7f37a4035020" loc="46:../../../../tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x7f37a4035020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a40353a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f37a4030110" loc="41:../../../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f37a4030110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a4030490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f37a40389e0" loc="40:../../../../tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f37a40389e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a4038d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x7f37a4029cd0" loc="45:../../../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x7f37a4029cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a40280a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x7f37a4023ad0" loc="44:../../../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x7f37a4023ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a4023e50"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4029020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a40291b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4029340"/>
        <function-ref name="get" scoped="" ref="0x7f37a40294d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4029660"/>
        <function-ref name="set" scoped="" ref="0x7f37a40297f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4029980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f37a402a530" loc="43:../../../../tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f37a402a530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a402a8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x7f37a3fe2cb0" loc="98:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x7f37a3fe2cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fe1610"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fe17a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fe1930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fe1ac0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fe1c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fe1de0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fe0020"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fe01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x7f37a3ffe4e0" loc="72:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x7f37a3ffe4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ffe860"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ffe9f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ffeb80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ffed10"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ffd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ffd1b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ffd340"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ffd4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x7f37a3ff2350" loc="83:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x7f37a3ff2350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ff26d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ff2860"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ff29f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ff2b80"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ff2d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ff1020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ff11b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ff1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x7f37a3fe8cb0" loc="92:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x7f37a3fe8cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fe70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fe7230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fe73c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fe7550"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fe76e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fe7870"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fe7a00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fe7b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG5" ref="0x7f37a3fdb060" loc="103:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG5" scoped="" ref="0x7f37a3fdb060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fdb3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fdb570"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fdb700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fdb890"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fdba20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fdbbb0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fdbd40"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fda020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x7f37a4016670" loc="50:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x7f37a4016670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40169f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4016b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a4016d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4015020"/>
        <function-ref name="get" scoped="" ref="0x7f37a40151b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4015340"/>
        <function-ref name="set" scoped="" ref="0x7f37a40154d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4015660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x7f37a3fea670" loc="90:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x7f37a3fea670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fea9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3feab80"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fead10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fe9020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fe91b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fe9340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fe94d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fe9660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x7f37a4014cb0" loc="53:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x7f37a4014cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40130a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4013230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a40133c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4013550"/>
        <function-ref name="get" scoped="" ref="0x7f37a40136e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4013870"/>
        <function-ref name="set" scoped="" ref="0x7f37a4013a00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4013b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x7f37a4007cb0" loc="64:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x7f37a4007cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40060a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4006230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a40063c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4006550"/>
        <function-ref name="get" scoped="" ref="0x7f37a40066e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4006870"/>
        <function-ref name="set" scoped="" ref="0x7f37a4006a00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4006b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x7f37a3ffbe40" loc="75:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x7f37a3ffbe40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ffa1e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ffa370"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ffa500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ffa690"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ffa820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ffa9b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ffab40"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ffacd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x7f37a3feecb0" loc="86:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x7f37a3feecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fed0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fed230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fed3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fed550"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fed6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fed870"/>
        <function-ref name="set" scoped="" ref="0x7f37a3feda00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fedb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x7f37a401c800" loc="45:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x7f37a401c800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a401cb80"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a401cd10"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a401b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a401b1b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a401b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a401b4d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a401b660"/>
        <function-ref name="clr" scoped="" ref="0x7f37a401b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x7f37a4010670" loc="56:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x7f37a4010670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40109f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4010b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a4010d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a400f020"/>
        <function-ref name="get" scoped="" ref="0x7f37a400f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a400f340"/>
        <function-ref name="set" scoped="" ref="0x7f37a400f4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a400f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x7f37a4003670" loc="67:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x7f37a4003670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40039f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4003b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a4003d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4002020"/>
        <function-ref name="get" scoped="" ref="0x7f37a40021b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4002340"/>
        <function-ref name="set" scoped="" ref="0x7f37a40024d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4002660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x7f37a3ff7670" loc="78:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x7f37a3ff7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ff79f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ff7b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ff7d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ff6020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ff61b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ff6340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ff64d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ff6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x7f37a3fe4670" loc="95:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x7f37a3fe4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fe49f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fe4b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fe4d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fe3020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fe31b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fe3340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fe34d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fe3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x7f37a3fdeb20" loc="101:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x7f37a3fdeb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fdd020"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fdd1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fdd340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fdd4d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fdd660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fdd7f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fdd980"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fddb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x7f37a3ff5cb0" loc="81:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x7f37a3ff5cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ff40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ff4230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ff43c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ff4550"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ff46e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ff4870"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ff4a00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ff4b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x7f37a4018060" loc="48:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x7f37a4018060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40183e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4018570"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a4018700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4018890"/>
        <function-ref name="get" scoped="" ref="0x7f37a4018a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4018bb0"/>
        <function-ref name="set" scoped="" ref="0x7f37a4018d40"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4017020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x7f37a400b020" loc="59:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x7f37a400b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a400b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a400b530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a400b6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a400b850"/>
        <function-ref name="get" scoped="" ref="0x7f37a400b9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a400bb70"/>
        <function-ref name="set" scoped="" ref="0x7f37a400bd00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a400a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x7f37a3fe04e0" loc="99:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x7f37a3fe04e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fe0860"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fe09f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fe0b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fe0d10"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fdf020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fdf1b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fdf340"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fdf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x7f37a4009670" loc="62:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x7f37a4009670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40099f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4009b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a4009d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4008020"/>
        <function-ref name="get" scoped="" ref="0x7f37a40081b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4008340"/>
        <function-ref name="set" scoped="" ref="0x7f37a40084d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4008660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x7f37a3ffd800" loc="73:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x7f37a3ffd800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ffdb80"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ffdd10"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ffc020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ffc1b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ffc340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ffc4d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ffc660"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ffc7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x7f37a3ff1670" loc="84:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x7f37a3ff1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ff19f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ff1b80"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ff1d10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ff0020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ff01b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ff0340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ff04d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ff0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x7f37a3fe6020" loc="93:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x7f37a3fe6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fe63a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fe6530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fe66c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fe6850"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fe69e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fe6b70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fe6d00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fe5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x7f37a4015990" loc="51:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x7f37a4015990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a4015d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4014020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a40141b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4014340"/>
        <function-ref name="get" scoped="" ref="0x7f37a40144d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4014660"/>
        <function-ref name="set" scoped="" ref="0x7f37a40147f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4014980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x7f37a4012020" loc="54:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x7f37a4012020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40123a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4012530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a40126c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4012850"/>
        <function-ref name="get" scoped="" ref="0x7f37a40129e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4012b70"/>
        <function-ref name="set" scoped="" ref="0x7f37a4012d00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4011020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x7f37a4005020" loc="65:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x7f37a4005020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40053a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4005530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a40056c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4005850"/>
        <function-ref name="get" scoped="" ref="0x7f37a40059e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4005b70"/>
        <function-ref name="set" scoped="" ref="0x7f37a4005d00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4004020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x7f37a3ff9060" loc="76:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x7f37a3ff9060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ff93e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ff9570"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ff9700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ff9890"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ff9a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ff9bb0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ff9d40"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ff8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x7f37a3fec020" loc="87:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x7f37a3fec020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fec3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fec530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fec6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fec850"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fec9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fecb70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fecd00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3feb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x7f37a401bb20" loc="46:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x7f37a401bb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a401a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a401a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a401a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a401a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a401a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a401a7f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a401a980"/>
        <function-ref name="clr" scoped="" ref="0x7f37a401ab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x7f37a400f990" loc="57:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x7f37a400f990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a400fe10"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a400e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a400e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a400e340"/>
        <function-ref name="get" scoped="" ref="0x7f37a400e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a400e660"/>
        <function-ref name="set" scoped="" ref="0x7f37a400e7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a400e980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x7f37a4002990" loc="68:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x7f37a4002990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a4002d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4001020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a40011b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4001340"/>
        <function-ref name="get" scoped="" ref="0x7f37a40014d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4001660"/>
        <function-ref name="set" scoped="" ref="0x7f37a40017f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4001980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x7f37a3fe3990" loc="96:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x7f37a3fe3990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fe3d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fe2020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fe21b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fe2340"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fe24d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fe2660"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fe27f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fe2980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x7f37a3fff020" loc="71:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x7f37a3fff020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fff5a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fff730"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fff8c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fffa50"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fffbe0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fffd70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ffe020"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ffe1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x7f37a3ff3020" loc="82:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x7f37a3ff3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ff33a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ff3530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ff36c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ff3850"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ff39e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ff3b70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ff3d00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ff2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x7f37a3fe9990" loc="91:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x7f37a3fe9990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fe9d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fe8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fe81b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fe8340"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fe84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fe8660"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fe87f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fe8980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x7f37a3fdde40" loc="102:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x7f37a3fdde40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fdc1e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fdc370"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fdc500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fdc690"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fdc820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fdc9b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fdcb40"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fdccd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x7f37a4017350" loc="49:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x7f37a4017350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40176d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4017860"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a40179f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4017b80"/>
        <function-ref name="get" scoped="" ref="0x7f37a4017d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4016020"/>
        <function-ref name="set" scoped="" ref="0x7f37a40161b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4016340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x7f37a400a350" loc="60:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x7f37a400a350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a400a6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a400a860"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a400a9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a400ab80"/>
        <function-ref name="get" scoped="" ref="0x7f37a400ad10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4009020"/>
        <function-ref name="set" scoped="" ref="0x7f37a40091b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4009340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x7f37a3feb350" loc="89:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x7f37a3feb350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3feb6d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3feb860"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3feb9f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3febb80"/>
        <function-ref name="get" scoped="" ref="0x7f37a3febd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fea020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fea1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fea340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x7f37a4008990" loc="63:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x7f37a4008990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a4008d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4007020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a40071b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4007340"/>
        <function-ref name="get" scoped="" ref="0x7f37a40074d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4007660"/>
        <function-ref name="set" scoped="" ref="0x7f37a40077f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4007980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x7f37a3ffcb20" loc="74:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x7f37a3ffcb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ffb020"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ffb1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ffb340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ffb4d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ffb660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ffb7f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ffb980"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ffbb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x7f37a3ff0990" loc="85:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x7f37a3ff0990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ff0d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fee020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fee1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fee340"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fee4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fee660"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fee7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fee980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x7f37a3fe5350" loc="94:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x7f37a3fe5350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fe56d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fe5860"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fe59f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fe5b80"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fe5d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fe4020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fe41b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fe4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x7f37a402b540" loc="44:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x7f37a402b540"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a402b8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a402ba50"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a402bbe0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a402bd70"/>
        <function-ref name="get" scoped="" ref="0x7f37a401c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a401c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a401c340"/>
        <function-ref name="clr" scoped="" ref="0x7f37a401c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x7f37a4011350" loc="55:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x7f37a4011350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40116d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4011860"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a40119f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4011b80"/>
        <function-ref name="get" scoped="" ref="0x7f37a4011d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4010020"/>
        <function-ref name="set" scoped="" ref="0x7f37a40101b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4010340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x7f37a4004350" loc="66:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x7f37a4004350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40046d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4004860"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a40049f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4004b80"/>
        <function-ref name="get" scoped="" ref="0x7f37a4004d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4003020"/>
        <function-ref name="set" scoped="" ref="0x7f37a40031b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4003340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x7f37a3ff8350" loc="77:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x7f37a3ff8350"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ff86d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ff8860"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ff89f0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ff8b80"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ff8d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ff7020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ff71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ff7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x7f37a3fdf800" loc="100:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x7f37a3fdf800"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3fdfb80"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3fdfd10"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3fde020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3fde1b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3fde340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3fde4d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3fde660"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3fde7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x7f37a3ff6990" loc="80:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x7f37a3ff6990"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ff6d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ff5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ff51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ff5340"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ff54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ff5660"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ff57f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ff5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x7f37a4001cb0" loc="69:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x7f37a4001cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40000a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4000230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a40003c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4000550"/>
        <function-ref name="get" scoped="" ref="0x7f37a40006e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a4000870"/>
        <function-ref name="set" scoped="" ref="0x7f37a4000a00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4000b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x7f37a401ae40" loc="47:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x7f37a401ae40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a40191e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a4019370"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a4019500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a4019690"/>
        <function-ref name="get" scoped="" ref="0x7f37a4019820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a40199b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a4019b40"/>
        <function-ref name="clr" scoped="" ref="0x7f37a4019cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x7f37a400ecb0" loc="58:../../../../tos/chips/atm1281/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x7f37a400ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a400d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a400d230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a400d3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a400d550"/>
        <function-ref name="get" scoped="" ref="0x7f37a400d6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a400d870"/>
        <function-ref name="set" scoped="" ref="0x7f37a400da00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a400db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f37a3f8fa80" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f37a3f8fa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f8fe00"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f8e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f8e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f8e340"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f8e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f8e660"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f8e7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f8e980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f37a3f8b020" loc="49:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f37a3f8b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f8b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f8b530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f8b6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f8b850"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f8b9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f8bb70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f8bd00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f8a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f37a3f916b0" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f37a3f916b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f91a30"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f91bc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f91d50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f90020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f901b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f90340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f904d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f90660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f37a3f8ec10" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f37a3f8ec10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f8d020"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f8d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f8d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f8d4d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f8d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f8d7f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f8d980"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f8db10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f37a3f8a2b0" loc="50:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f37a3f8a2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f8a630"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f8a7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f8a950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f8aae0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f8ac70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f8ae00"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f88020"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f881b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f37a3f908f0" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f37a3f908f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f90c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f90e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f8f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f8f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f8f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f8f4d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f8f660"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f8f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f37a3f8dda0" loc="48:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f37a3f8dda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f8c180"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f8c310"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f8c4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f8c630"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f8c7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f8c950"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f8cae0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f8cc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f37a3f88440" loc="51:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f37a3f88440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f887c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f88950"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f88ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f88c70"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f88e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f87020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f871b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f87340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2da17e0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2da17e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2da1b60"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2da1cf0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2da1e80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2da0030"/>
        <function-ref name="get" scoped="" ref="0x7f37a2da01c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2da0350"/>
        <function-ref name="set" scoped="" ref="0x7f37a2da04e0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2da0670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d9e9b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d9e9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d9ed30"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d9d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d9d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d9d340"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d9d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d9d660"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d9d7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d9d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d9be20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d9be20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d9a1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d9a350"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d9a4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d9a670"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d9a800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d9a990"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d9ab20"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d9acb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d970a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d970a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d97420"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d975b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d97740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d978d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d97a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d97bf0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d97d80"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d96020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d943f0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d943f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d94770"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d94900"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d94a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d94c20"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d94db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d93020"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d931b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d93340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d916d0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d916d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d91a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d91be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d91d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d90020"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d901b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d90340"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d904d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d90660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d8e9b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d8e9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d8ed30"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d8d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d8d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d8d340"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d8d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d8d660"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d8d7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d8d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d86e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d86e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d851c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d85350"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d854e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d85670"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d85800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d85990"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d85b20"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d85cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f37a3f80da0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f37a3f80da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f7f180"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f7f310"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f7f4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f7f630"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f7f7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f7f950"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f7fae0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f7fc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f37a3f7b440" loc="49:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f37a3f7b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f7b7c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f7b950"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f7bae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f7bc70"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f7be00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f7a020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f7a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f7a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f37a3f82a20" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f37a3f82a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f82da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f81020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f811b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f81340"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f814d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f81660"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f817f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f81980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f37a3f7e020" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f37a3f7e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f7e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f7e530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f7e6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f7e850"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f7e9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f7eb70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f7ed00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f7c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f37a3f7a5d0" loc="50:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f37a3f7a5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f7a950"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f7aae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f7ac70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f7ae00"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f79020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f791b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f79340"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f794d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f37a3f81c10" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f37a3f81c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f80020"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f801b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f80340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f804d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f80660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f807f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f80980"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f80b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f37a3f7c2b0" loc="48:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f37a3f7c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f7c630"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f7c7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f7c950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f7cae0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f7cc70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f7ce00"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f7b020"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f7b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f37a3f79760" loc="51:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f37a3f79760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f79ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f79c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f79e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f78020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f781b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f78340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f784d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f78660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d31a60" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d31a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d31de0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d30020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d301b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d30340"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d304d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d30660"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d307f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d30980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d2ee20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d2ee20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d2d1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d2d350"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d2d4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d2d670"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d2d800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d2d990"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d2db20"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d2dcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d2a0a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d2a0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d2a420"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d2a5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d2a740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d2a8d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d2aa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d2abf0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d2ad80"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d29020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d273f0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d273f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d27770"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d27900"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d27a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d27c20"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d27db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d26020"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d261b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d26340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d246d0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d246d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d24a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d24be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d24d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d23020"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d231b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d23340"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d234d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d23660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d219b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d219b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d21d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d20020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d201b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d20340"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d204d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d20660"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d207f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d20980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d1ee20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d1ee20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d1d1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d1d350"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d1d4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d1d670"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d1d800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d1d990"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d1db20"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d1dcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2d1a0a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2d1a0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2d1a420"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2d1a5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2d1a740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2d1a8d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2d1aa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2d1abf0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2d1ad80"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2d19020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f37a3f6f020" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f37a3f6f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f6f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f6f530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f6f6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f6f850"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f6f9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f6fb70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f6fd00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f6e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f37a3f6c5d0" loc="49:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f37a3f6c5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f6c950"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f6cae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f6cc70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f6ce00"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f6b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f6b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f6b340"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f6b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f37a3f73d30" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f37a3f73d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f710e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f71270"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f71400"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f71590"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f71720"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f718b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f71a40"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f71bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f37a3f6e2b0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f37a3f6e2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f6e630"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f6e7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f6e950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f6eae0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f6ec70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f6ee00"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f6d020"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f6d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f37a3f6b760" loc="50:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f37a3f6b760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f6bae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f6bc70"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f6be00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f6a020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f6a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f6a340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f6a4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f6a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f37a3f71e60" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f37a3f71e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f70210"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f703a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f70530"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f706c0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f70850"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f709e0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f70b70"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f70d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f37a3f6d440" loc="48:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f37a3f6d440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f6d7c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f6d950"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f6dae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f6dc70"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f6de00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f6c020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f6c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f6c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f37a3f6a8f0" loc="51:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f37a3f6a8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f6ac70"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f6ae00"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f69020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f691b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f69340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f694d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f69660"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f697f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2cc6c90" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2cc6c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2cc50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2cc5230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2cc53c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2cc5550"/>
        <function-ref name="get" scoped="" ref="0x7f37a2cc56e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2cc5870"/>
        <function-ref name="set" scoped="" ref="0x7f37a2cc5a00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2cc5b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2cc3e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2cc3e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2cc21c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2cc2350"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2cc24e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2cc2670"/>
        <function-ref name="get" scoped="" ref="0x7f37a2cc2800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2cc2990"/>
        <function-ref name="set" scoped="" ref="0x7f37a2cc2b20"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2cc2cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2cbf0a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2cbf0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2cbf420"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2cbf5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2cbf740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2cbf8d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2cbfa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2cbfbf0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2cbfd80"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2cbe020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2cbc3f0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2cbc3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2cbc770"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2cbc900"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2cbca90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2cbcc20"/>
        <function-ref name="get" scoped="" ref="0x7f37a2cbcdb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2cbb020"/>
        <function-ref name="set" scoped="" ref="0x7f37a2cbb1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2cbb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2cb96d0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2cb96d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2cb9a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2cb9be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2cb9d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2cb8020"/>
        <function-ref name="get" scoped="" ref="0x7f37a2cb81b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2cb8340"/>
        <function-ref name="set" scoped="" ref="0x7f37a2cb84d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2cb8660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2cb69b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2cb69b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2cb6d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2cb5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2cb51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2cb5340"/>
        <function-ref name="get" scoped="" ref="0x7f37a2cb54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2cb5660"/>
        <function-ref name="set" scoped="" ref="0x7f37a2cb57f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2cb5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2cb3e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2cb3e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2cb21c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2cb2350"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2cb24e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2cb2670"/>
        <function-ref name="get" scoped="" ref="0x7f37a2cb2800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2cb2990"/>
        <function-ref name="set" scoped="" ref="0x7f37a2cb2b20"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2cb2cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2caf0a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2caf0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2caf420"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2caf5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2caf740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2caf8d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2cafa60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2cafbf0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2cafd80"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2cae020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f37a3f60440" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f37a3f60440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f607c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f60950"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f60ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f60c70"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f60e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f5f020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f5f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f5f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f37a3f5d8f0" loc="49:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f37a3f5d8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f5dc70"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f5de00"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f5c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f5c1b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f5c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f5c4d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f5c660"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f5c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f37a3f62020" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f37a3f62020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f623a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f62530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f626c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f62850"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f629e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f62b70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f62d00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f61020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f37a3f5f5d0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f37a3f5f5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f5f950"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f5fae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f5fc70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f5fe00"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f5e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f5e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f5e340"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f5e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f37a3f5ca80" loc="50:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f37a3f5ca80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f5ce00"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f5b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f5b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f5b340"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f5b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f5b660"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f5b7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f5b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f37a3f612b0" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f37a3f612b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f61630"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f617c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f61950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f61ae0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f61c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f61e00"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f60020"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f601b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f37a3f5e760" loc="48:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f37a3f5e760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f5eae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f5ec70"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f5ee00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f5d020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f5d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f5d340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f5d4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f5d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f37a3f5bc10" loc="51:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f37a3f5bc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f5a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f5a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f5a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f5a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f5a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f5a7f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f5a980"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f5ab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2c5bc90" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2c5bc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2c5a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2c5a230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2c5a3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2c5a550"/>
        <function-ref name="get" scoped="" ref="0x7f37a2c5a6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2c5a870"/>
        <function-ref name="set" scoped="" ref="0x7f37a2c5aa00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2c5ab90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2c58e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2c58e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2c571c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2c57350"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2c574e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2c57670"/>
        <function-ref name="get" scoped="" ref="0x7f37a2c57800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2c57990"/>
        <function-ref name="set" scoped="" ref="0x7f37a2c57b20"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2c57cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2c540a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2c540a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2c54420"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2c545b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2c54740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2c548d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2c54a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2c54bf0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2c54d80"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2c53020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2c513f0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2c513f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2c51770"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2c51900"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2c51a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2c51c20"/>
        <function-ref name="get" scoped="" ref="0x7f37a2c51db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2c50020"/>
        <function-ref name="set" scoped="" ref="0x7f37a2c501b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2c50340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2c4e6d0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2c4e6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2c4ea50"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2c4ebe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2c4ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2c4d020"/>
        <function-ref name="get" scoped="" ref="0x7f37a2c4d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2c4d340"/>
        <function-ref name="set" scoped="" ref="0x7f37a2c4d4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2c4d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2c4b9b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2c4b9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2c4bd30"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2c4a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2c4a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2c4a340"/>
        <function-ref name="get" scoped="" ref="0x7f37a2c4a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2c4a660"/>
        <function-ref name="set" scoped="" ref="0x7f37a2c4a7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2c4a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2c48e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2c48e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2c471c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2c47350"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2c474e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2c47670"/>
        <function-ref name="get" scoped="" ref="0x7f37a2c47800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2c47990"/>
        <function-ref name="set" scoped="" ref="0x7f37a2c47b20"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2c47cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2c440a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2c440a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2c44420"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2c445b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2c44740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2c448d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2c44a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2c44bf0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2c44d80"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2c43020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f37a3f51760" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f37a3f51760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f51ae0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f51c70"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f51e00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f50020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f501b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f50340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f504d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f50660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f37a3f4ec10" loc="49:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f37a3f4ec10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f4c020"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f4c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f4c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f4c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f4c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f4c7f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f4c980"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f4cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f37a3f533f0" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f37a3f533f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f53770"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f53900"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f53a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f53c20"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f53db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f52020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f521b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f52340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f37a3f508f0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f37a3f508f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f50c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f50e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f4f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f4f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f4f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f4f4d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f4f660"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f4f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f37a3f4cda0" loc="50:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f37a3f4cda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f4b180"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f4b310"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f4b4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f4b630"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f4b7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f4b950"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f4bae0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f4bc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f37a3f525d0" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f37a3f525d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f52950"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f52ae0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f52c70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f52e00"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f51020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f511b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f51340"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f514d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f37a3f4fa80" loc="48:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f37a3f4fa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f4fe00"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f4e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f4e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f4e340"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f4e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f4e660"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f4e7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f4e980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f37a3f4a020" loc="51:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f37a3f4a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f4a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f4a530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f4a6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f4a850"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f4a9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f4ab70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f4ad00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f49020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2befc90" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2befc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2bed0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2bed230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2bed3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2bed550"/>
        <function-ref name="get" scoped="" ref="0x7f37a2bed6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2bed870"/>
        <function-ref name="set" scoped="" ref="0x7f37a2beda00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2bedb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2bebe20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2bebe20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2bea1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2bea350"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2bea4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2bea670"/>
        <function-ref name="get" scoped="" ref="0x7f37a2bea800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2bea990"/>
        <function-ref name="set" scoped="" ref="0x7f37a2beab20"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2beacb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2be70a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2be70a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2be7420"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2be75b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2be7740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2be78d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2be7a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2be7bf0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2be7d80"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2be6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2be43f0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2be43f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2be4770"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2be4900"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2be4a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2be4c20"/>
        <function-ref name="get" scoped="" ref="0x7f37a2be4db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2be3020"/>
        <function-ref name="set" scoped="" ref="0x7f37a2be31b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2be3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2be16d0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2be16d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2be1a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2be1be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2be1d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2be0020"/>
        <function-ref name="get" scoped="" ref="0x7f37a2be01b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2be0340"/>
        <function-ref name="set" scoped="" ref="0x7f37a2be04d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2be0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2bde9b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2bde9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2bded30"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2bdd020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2bdd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2bdd340"/>
        <function-ref name="get" scoped="" ref="0x7f37a2bdd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2bdd660"/>
        <function-ref name="set" scoped="" ref="0x7f37a2bdd7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2bdd980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2bdbe20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2bdbe20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2bda1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2bda350"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2bda4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2bda670"/>
        <function-ref name="get" scoped="" ref="0x7f37a2bda800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2bda990"/>
        <function-ref name="set" scoped="" ref="0x7f37a2bdab20"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2bdacb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2bd70a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2bd70a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2bd7420"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2bd75b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2bd7740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2bd78d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2bd7a60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2bd7bf0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2bd7d80"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2bd6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x7f37a3f42a80" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x7f37a3f42a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f42e00"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f40020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f401b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f40340"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f404d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f40660"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f407f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f40980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x7f37a3f3d020" loc="49:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x7f37a3f3d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f3d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f3d530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f3d6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f3d850"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f3d9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f3db70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f3dd00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f3c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x7f37a3f447a0" loc="44:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x7f37a3f447a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f44b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f44cb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f44e40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f43020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f431b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f43340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f434d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f43660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x7f37a3f40c10" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x7f37a3f40c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f3f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f3f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f3f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f3f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f3f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f3f7f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f3f980"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f3fb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x7f37a3f3c2b0" loc="50:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x7f37a3f3c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f3c630"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f3c7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f3c950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f3cae0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f3cc70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f3ce00"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f3b020"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f3b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x7f37a3f438f0" loc="45:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x7f37a3f438f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f43c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f43e00"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f42020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f421b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f42340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f424d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f42660"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f427f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x7f37a3f3fda0" loc="48:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x7f37a3f3fda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f3e180"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f3e310"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f3e4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f3e630"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f3e7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f3e950"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f3eae0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f3ec70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x7f37a3f3b440" loc="51:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x7f37a3f3b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f3b7c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f3b950"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f3bae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f3bc70"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f3be00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f3a020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f3a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f3a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2b84c90" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2b84c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2b820a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2b82230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2b823c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2b82550"/>
        <function-ref name="get" scoped="" ref="0x7f37a2b826e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2b82870"/>
        <function-ref name="set" scoped="" ref="0x7f37a2b82a00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2b82b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2b80e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2b80e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2b7f1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2b7f350"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2b7f4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2b7f670"/>
        <function-ref name="get" scoped="" ref="0x7f37a2b7f800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2b7f990"/>
        <function-ref name="set" scoped="" ref="0x7f37a2b7fb20"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2b7fcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2b7c0a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2b7c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2b7c420"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2b7c5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2b7c740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2b7c8d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2b7ca60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2b7cbf0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2b7cd80"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2b7b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2b793f0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2b793f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2b79770"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2b79900"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2b79a90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2b79c20"/>
        <function-ref name="get" scoped="" ref="0x7f37a2b79db0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2b78020"/>
        <function-ref name="set" scoped="" ref="0x7f37a2b781b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2b78340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2b766d0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2b766d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2b76a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2b76be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2b76d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2b75020"/>
        <function-ref name="get" scoped="" ref="0x7f37a2b751b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2b75340"/>
        <function-ref name="set" scoped="" ref="0x7f37a2b754d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2b75660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2b739b0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2b739b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2b73d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2b72020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2b721b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2b72340"/>
        <function-ref name="get" scoped="" ref="0x7f37a2b724d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2b72660"/>
        <function-ref name="set" scoped="" ref="0x7f37a2b727f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2b72980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2b70e20" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2b70e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2b6f1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2b6f350"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2b6f4e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2b6f670"/>
        <function-ref name="get" scoped="" ref="0x7f37a2b6f800"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2b6f990"/>
        <function-ref name="set" scoped="" ref="0x7f37a2b6fb20"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2b6fcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a2b6c0a0" loc="46:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a2b6c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a2b6c420"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a2b6c5b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a2b6c740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a2b6c8d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2b6ca60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a2b6cbf0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2b6cd80"/>
        <function-ref name="clr" scoped="" ref="0x7f37a2b6b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3f33a20" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3f33a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f33da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f1d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f1d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f1d340"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f1d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f1d660"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f1d7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f1d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3f186d0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3f186d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f18a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f18be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f18d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f17020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f171b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f17340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f174d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f17660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3f13160" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3f13160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f134e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f13670"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f13800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f13990"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f13b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f13cb0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f13e40"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f11020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3f0ec90" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3f0ec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f0d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f0d230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f0d3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f0d550"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f0d6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f0d870"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f0da00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f0db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3f086d0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3f086d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f08a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f08be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f08d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f07020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f071b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f07340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f074d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f07660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3f03160" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3f03160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3f034e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3f03670"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3f03800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3f03990"/>
        <function-ref name="get" scoped="" ref="0x7f37a3f03b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3f03cb0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3f03e40"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3f01020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3efec90" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3efec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3efd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3efd230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3efd3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3efd550"/>
        <function-ref name="get" scoped="" ref="0x7f37a3efd6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3efd870"/>
        <function-ref name="set" scoped="" ref="0x7f37a3efda00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3efdb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3ef86d0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3ef86d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ef8a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ef8be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ef8d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ef7020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ef71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ef7340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ef74d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ef7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3ef3160" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3ef3160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ef34e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ef3670"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ef3800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ef3990"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ef3b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ef3cb0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ef3e40"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ef2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3eeec90" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3eeec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3eed0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3eed230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3eed3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3eed550"/>
        <function-ref name="get" scoped="" ref="0x7f37a3eed6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3eed870"/>
        <function-ref name="set" scoped="" ref="0x7f37a3eeda00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3eedb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3ee86d0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3ee86d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ee8a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ee8be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ee8d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ee7020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ee71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ee7340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ee74d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ee7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3ee3160" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3ee3160"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ee34e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ee3670"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ee3800"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ee3990"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ee3b20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ee3cb0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ee3e40"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ee2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3edec90" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3edec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3edd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3edd230"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3edd3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3edd550"/>
        <function-ref name="get" scoped="" ref="0x7f37a3edd6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3edd870"/>
        <function-ref name="set" scoped="" ref="0x7f37a3edda00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3eddb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f37a3ed86d0" loc="47:../../../../tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x7f37a3ed86d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3ed8a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3ed8be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3ed8d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3ed7020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3ed71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3ed7340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3ed74d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3ed7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a3e9c0f0" loc="61:../../../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a3e9c0f0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f37a41ee3a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f37a41ee3a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3e9c470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x7f37a3e9c760" loc="62:../../../../tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f37a3e9c760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f37a3e9cae0"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f37a3e9cc70"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f37a3e9ce00"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f37a3e9b020"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f37a3e9b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f37a3e7c720" loc="60:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a3e7c720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3e7caa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f37a4040dc0" loc="57:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f37a4040dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f37a3e7d180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f37a3e7c020" loc="59:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f37a3e7c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3e7c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f37a3e7d470" loc="58:../../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f37a3e7d470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3e7d7f0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f37a3e7d980"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f37a3e7db10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f37a41bd940" loc="48:../../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f37a41bd940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a41bdcc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a41bde50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f37a41c6510" loc="47:../../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f37a41c6510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a41c6890"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f37a41c6a20"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f37a41c6bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f37a40f8850" loc="56:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x7f37a40f8850"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a40f8bd0"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a40f8d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f37a40f3c90" loc="57:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f37a40f3c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f37a40f50a0"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f37a40f5230"/>
        <function-ref name="sleep" scoped="" ref="0x7f37a40f53c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f37a40f98a0" loc="55:../../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x7f37a40f98a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a40f9c20"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f37a40f9db0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f37a40f8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f37a40d49e0" loc="86:../../../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f37a40d49e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f37a40d4d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f37a410f140" loc="82:../../../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x7f37a410f140"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f37a410f4c0"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f37a410f650"/>
        <function-ref name="sleep" scoped="" ref="0x7f37a410f7e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f37a40d6a50" loc="83:../../../../tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f37a40d6a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f37a40d6dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f37a3e6d1c0" loc="60:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x7f37a3e6d1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f37a3e6d540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f37a3e68a80" loc="61:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7f37a3e68a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a3e68e00"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a3e6c020"/>
        <function-ref name="start" scoped="" ref="0x7f37a3e6c1b0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3e6c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartReceive" ref="0x7f37a3e5d430" loc="65:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartReceive" scoped="" ref="0x7f37a3e5d430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3e5d7b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAMPacket" ref="0x7f37a3e3ae70" loc="73:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAMPacket" scoped="" ref="0x7f37a3e3ae70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f37a3e39220"/>
        <function-ref name="source" scoped="" ref="0x7f37a3e393b0"/>
        <function-ref name="address" scoped="" ref="0x7f37a3e39540"/>
        <function-ref name="destination" scoped="" ref="0x7f37a3e396d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a3e39860"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a3e399f0"/>
        <function-ref name="type" scoped="" ref="0x7f37a3e39b80"/>
        <function-ref name="setType" scoped="" ref="0x7f37a3e39d10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a3e38020"/>
        <function-ref name="setGroup" scoped="" ref="0x7f37a3e381b0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f37a3e38340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="uartSendTask" ref="0x7f37a3e26720" loc="99:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="uartSendTask" scoped="" ref="0x7f37a3e26720"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a3e26aa0"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a3e26c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0x7f37a3e6c6d0" loc="62:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0x7f37a3e6c6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a3e6ca50"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a3e6cbe0"/>
        <function-ref name="start" scoped="" ref="0x7f37a3e6cd70"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3e6b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPacket" ref="0x7f37a3e3a130" loc="72:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a3e3a130"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3e3a4b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3e3a640"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3e3a7d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3e3a960"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3e3aaf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7f37a3e3ed70" loc="70:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f37a3e3ed70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3e3c180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="radioSendTask" ref="0x7f37a3e25610" loc="100:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="radioSendTask" scoped="" ref="0x7f37a3e25610"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a3e25990"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a3e25b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialIntercept" ref="0x7f37a3e36e70" loc="79:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIntercept" scoped="" ref="0x7f37a3e36e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0x7f37a3e2b220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioIntercept" ref="0x7f37a3e361d0" loc="78:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioIntercept" scoped="" ref="0x7f37a3e361d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0x7f37a3e36550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f37a3e2c330" loc="75:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f37a3e2c330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f37a3e2c7b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f37a3e2c940"/>
        <function-ref name="led1On" scoped="" ref="0x7f37a3e2cad0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f37a3e2cc60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f37a3e2cdf0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3e37020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f37a3e371b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f37a3e377f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3e37340"/>
        <function-ref name="led0On" scoped="" ref="0x7f37a3e374d0"/>
        <function-ref name="led2On" scoped="" ref="0x7f37a3e37660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartPacket" ref="0x7f37a3e4ed00" loc="66:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartPacket" scoped="" ref="0x7f37a3e4ed00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3e5b0a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3e5b230"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3e5b3c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3e5b550"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3e5b6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7f37a3e4fa20" loc="69:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f37a3e4fa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3e4fda0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3e3e020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3e3e1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3e3e340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3e3e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartSend" ref="0x7f37a3e675a0" loc="64:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartSend" scoped="" ref="0x7f37a3e675a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3e67920"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3e67ab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3e67c40"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3e67dd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3e66020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartAMPacket" ref="0x7f37a3e3dcc0" loc="67:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartAMPacket" scoped="" ref="0x7f37a3e3dcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f37a3e590a0"/>
        <function-ref name="source" scoped="" ref="0x7f37a3e59230"/>
        <function-ref name="address" scoped="" ref="0x7f37a3e593c0"/>
        <function-ref name="destination" scoped="" ref="0x7f37a3e59550"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a3e596e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a3e59870"/>
        <function-ref name="type" scoped="" ref="0x7f37a3e59a00"/>
        <function-ref name="setType" scoped="" ref="0x7f37a3e59b90"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a3e59d20"/>
        <function-ref name="setGroup" scoped="" ref="0x7f37a3e4f020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f37a3e4f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSnoop" ref="0x7f37a3e3ca10" loc="71:../InterceptBase/BaseStationP.nc">
      <component-ref qname="BaseStationP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSnoop" scoped="" ref="0x7f37a3e3ca10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3e3cd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f37a3dd7ce0" loc="46:../../../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f37a3dd7ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f37a3dd40a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f37a3dd4230"/>
        <function-ref name="led1On" scoped="" ref="0x7f37a3dd43c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f37a3dd4550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f37a3dd46e0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3dd4870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f37a3dd4a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f37a3dd31b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3dd4b90"/>
        <function-ref name="led0On" scoped="" ref="0x7f37a3dd4d20"/>
        <function-ref name="led2On" scoped="" ref="0x7f37a3dd3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f37a3dce020" loc="50:../../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7f37a3dce020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3dce3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3dce530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3dce6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3dce850"/>
        <function-ref name="get" scoped="" ref="0x7f37a3dce9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3dceb70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3dced00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3dcd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a3dd0110" loc="46:../../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a3dd0110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3dd0490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f37a3dcd340" loc="51:../../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7f37a3dcd340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3dcd6c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3dcd850"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3dcd9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3dcdb70"/>
        <function-ref name="get" scoped="" ref="0x7f37a3dcdd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3dcc020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3dcc1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3dcc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f37a3dd0710" loc="47:../../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f37a3dd0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f37a3dd0a90"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f37a3dd0c20"/>
        <function-ref name="led1On" scoped="" ref="0x7f37a3dd0db0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f37a3dcf020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f37a3dcf1b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3dcf340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f37a3dcf4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f37a3dcfb10"/>
        <function-ref name="set" scoped="" ref="0x7f37a3dcf660"/>
        <function-ref name="led0On" scoped="" ref="0x7f37a3dcf7f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f37a3dcf980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f37a3dcc660" loc="52:../../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7f37a3dcc660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3dcc9e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3dccb70"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3dccd00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3dcb020"/>
        <function-ref name="get" scoped="" ref="0x7f37a3dcb1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3dcb340"/>
        <function-ref name="set" scoped="" ref="0x7f37a3dcb4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3dcb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f37a3dd1b50" loc="44:../../../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x7f37a3dd1b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3daf020"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3daf1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3daf340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3daf4d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3daf660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3daf7f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3daf980"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3dafb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f37a3dafe70" loc="45:../../../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x7f37a3dafe70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3dae220"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3dae3b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3dae540"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3dae6d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3dae860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3dae9f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3daeb80"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3daed10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f37a3dac2e0" loc="47:../../../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a3dac2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3dac660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f37a3dad0f0" loc="46:../../../../tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x7f37a3dad0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3dad470"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3dad600"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3dad790"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3dad920"/>
        <function-ref name="get" scoped="" ref="0x7f37a3dadab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3dadc40"/>
        <function-ref name="set" scoped="" ref="0x7f37a3daddd0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3dac020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f37a3da5bd0" loc="41:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f37a3da5bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a3da1020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a3da11b0"/>
        <function-ref name="start" scoped="" ref="0x7f37a3da1340"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3da14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f37a3d9c2e0" loc="46:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3d9c2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f37a3d9c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f37a3d9c8f0" loc="48:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f37a3d9c8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3d9cc70"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3d9ce00"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3d9b020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3d9b1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3d9b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f37a3da1ca0" loc="43:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f37a3da1ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3da00a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3da0230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3da03c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3da0550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3da06e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f37a3d9ec00" loc="45:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f37a3d9ec00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3d9d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f37a3d8a5b0" loc="52:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a3d8a5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f37a3d8a930"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f37a3d8aac0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f37a3d8ac50"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f37a3d8ade0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a3d9e020" loc="44:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a3d9e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3d9e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f37a3d919f0" loc="51:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3d919f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f37a3d91d70"/>
        <function-ref name="noAck" scoped="" ref="0x7f37a3d97020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f37a3d971b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f37a3d83880" loc="53:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f37a3d83880"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f37a3d83c00"/>
        <function-ref name="setRetries" scoped="" ref="0x7f37a3d83d90"/>
        <function-ref name="getRetries" scoped="" ref="0x7f37a3d90020"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f37a3d901b0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f37a3d90340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f37a3d9b5f0" loc="49:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f37a3d9b5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f37a3d9b970"/>
        <function-ref name="source" scoped="" ref="0x7f37a3d9bb00"/>
        <function-ref name="address" scoped="" ref="0x7f37a3d9bc90"/>
        <function-ref name="destination" scoped="" ref="0x7f37a3d9be20"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a3d98020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a3d981b0"/>
        <function-ref name="type" scoped="" ref="0x7f37a3d98340"/>
        <function-ref name="setType" scoped="" ref="0x7f37a3d984d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a3d98660"/>
        <function-ref name="setGroup" scoped="" ref="0x7f37a3d987f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f37a3d98980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f37a3d80690" loc="54:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f37a3d80690"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f37a3d80a10"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a3d80ba0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a3d80d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMicro" ref="0x7f37a3d777c0" loc="56:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x7f37a3d777c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a3d82d50"/>
        <function-ref name="clear" scoped="" ref="0x7f37a3d784c0"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a3d82620"/>
        <function-ref name="set" scoped="" ref="0x7f37a3d78bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f37a3d76880" loc="57:../../../../tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a3d76880"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a3d74020"/>
        <function-ref name="clear" scoped="" ref="0x7f37a3d74750"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a3d757c0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3d74e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f37a3d6f140" loc="45:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f37a3d6f140"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a3d6f4c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a3d6f650"/>
        <function-ref name="start" scoped="" ref="0x7f37a3d6f7e0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3d6f970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f37a3d5aa00" loc="62:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a3d5aa00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3d581b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3d59c00"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a3d596b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3d58700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f37a3d6bbb0" loc="50:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3d6bbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f37a3d6a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f37a3d6a2b0" loc="52:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f37a3d6a2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3d6a630"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3d6a7c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3d6a950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3d6aae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3d6ac70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f37a3d6e1d0" loc="47:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f37a3d6e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3d6e550"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3d6e6e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3d6e870"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3d6ea00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3d6eb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f37a3d6b020" loc="49:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f37a3d6b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3d6b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f37a3d5d400" loc="61:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f37a3d5d400"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3d5cc10"/>
        <function-ref name="get" scoped="" ref="0x7f37a3d5c6c0"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a3d5c170"/>
        <function-ref name="set" scoped="" ref="0x7f37a3d5a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f37a3d67320" loc="56:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a3d67320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f37a3d676a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f37a3d67830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f37a3d679c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f37a3d67b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a3d6d3f0" loc="48:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a3d6d3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3d6d770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f37a3d548a0" loc="66:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a3d548a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a3d50e10"/>
        <function-ref name="clear" scoped="" ref="0x7f37a3d4f5a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a3d506e0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3d4fcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f37a3d55270" loc="65:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a3d55270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a3d54020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f37a3d5fdf0" loc="60:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f37a3d5fdf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3d635e0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3d63090"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a3d64ac0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3d63b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f37a3d68800" loc="55:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3d68800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f37a3d68b80"/>
        <function-ref name="noAck" scoped="" ref="0x7f37a3d68d10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f37a3d67020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f37a3d67e10" loc="57:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f37a3d67e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f37a3d661c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f37a3d66350"/>
        <function-ref name="getRetries" scoped="" ref="0x7f37a3d664e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f37a3d66670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f37a3d66800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f37a3d69020" loc="53:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f37a3d69020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f37a3d693a0"/>
        <function-ref name="source" scoped="" ref="0x7f37a3d69530"/>
        <function-ref name="address" scoped="" ref="0x7f37a3d696c0"/>
        <function-ref name="destination" scoped="" ref="0x7f37a3d69850"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a3d699e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a3d69b70"/>
        <function-ref name="type" scoped="" ref="0x7f37a3d69d00"/>
        <function-ref name="setType" scoped="" ref="0x7f37a3d68020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a3d681b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f37a3d68340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f37a3d684d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f37a3d66ad0" loc="58:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f37a3d66ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f37a3d66e50"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a3d65020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a3d651b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f37a3d52520" loc="63:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f37a3d52520"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f37a3d528a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f37a3d4d970" loc="67:../../../../tos/chips/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a3d4d970"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a3d4b020"/>
        <function-ref name="clear" scoped="" ref="0x7f37a3d4b750"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a3d4c7c0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3d4be80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f37a3d46080" loc="41:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f37a3d46080"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a3d46400"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a3d46590"/>
        <function-ref name="start" scoped="" ref="0x7f37a3d46720"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3d468b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f37a3d1d1c0" loc="85:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a3d1d1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3d1c910"/>
        <function-ref name="get" scoped="" ref="0x7f37a3d1c3c0"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a3d1ddf0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3d1ce60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Notifier" ref="0x7f37a3d3e020" loc="65:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Notifier" scoped="" ref="0x7f37a3d3e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f37a3d3e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendResource" ref="0x7f37a3d362c0" loc="67:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendResource" scoped="" ref="0x7f37a3d362c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f37a3d36640"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f37a3d367d0"/>
        <function-ref name="request" scoped="" ref="0x7f37a3d36960"/>
        <function-ref name="granted" scoped="" ref="0x7f37a3d36af0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f37a3d36c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f37a3d43bb0" loc="57:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3d43bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f37a3d42020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f37a3d143f0" loc="90:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a3d143f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a3d13970"/>
        <function-ref name="clear" scoped="" ref="0x7f37a3d120d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a3d13240"/>
        <function-ref name="set" scoped="" ref="0x7f37a3d12800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f37a3d451d0" loc="54:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f37a3d451d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3d45550"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3d456e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3d45870"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3d45a00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3d45b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f37a3d43020" loc="56:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f37a3d43020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3d433a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f37a3d273c0" loc="69:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f37a3d273c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f37a3d27740"/>
        <function-ref name="address" scoped="" ref="0x7f37a3d278d0"/>
        <function-ref name="destination" scoped="" ref="0x7f37a3d27a60"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a3d27bf0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a3d27d80"/>
        <function-ref name="pan" scoped="" ref="0x7f37a3d30020"/>
        <function-ref name="setPan" scoped="" ref="0x7f37a3d301b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a3d30340"/>
        <function-ref name="localPan" scoped="" ref="0x7f37a3d304d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForIeee154Message" ref="0x7f37a3d30890" loc="70:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForIeee154Message" scoped="" ref="0x7f37a3d30890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3d30d10"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3d2f020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3d2f1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3d2f340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3d2f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f37a3d26320" loc="74:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a3d26320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f37a3d266a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f37a3d26830"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f37a3d269c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f37a3d26b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f37a3d22c90" loc="84:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f37a3d22c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3d1f3c0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3d20e30"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a3d208e0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3d1f910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a3d443f0" loc="55:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a3d443f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3d44770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForActiveMessage" ref="0x7f37a3d41a10" loc="59:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForActiveMessage" scoped="" ref="0x7f37a3d41a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3d41d90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3d40020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3d401b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3d40340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3d404d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f37a3d18270" loc="89:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a3d18270"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a3d17800"/>
        <function-ref name="clear" scoped="" ref="0x7f37a3d16020"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a3d170d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3d16750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f37a3d1bd70" loc="88:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a3d1bd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a3d199c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f37a3d246d0" loc="83:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f37a3d246d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3d23e70"/>
        <function-ref name="get" scoped="" ref="0x7f37a3d23920"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a3d233d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3d223f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f37a3d2f800" loc="73:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3d2f800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f37a3d2fb80"/>
        <function-ref name="noAck" scoped="" ref="0x7f37a3d2fd10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f37a3d26020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f37a3d38a60" loc="63:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f37a3d38a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3d38de0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3d3f020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3d3f1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3d3f340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3d3f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f37a3d26e10" loc="75:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f37a3d26e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f37a3d251c0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f37a3d25350"/>
        <function-ref name="getRetries" scoped="" ref="0x7f37a3d254e0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f37a3d25670"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f37a3d25800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f37a3d422d0" loc="58:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f37a3d422d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f37a3d42650"/>
        <function-ref name="source" scoped="" ref="0x7f37a3d427e0"/>
        <function-ref name="address" scoped="" ref="0x7f37a3d42970"/>
        <function-ref name="destination" scoped="" ref="0x7f37a3d42b00"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a3d42c90"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a3d42e20"/>
        <function-ref name="type" scoped="" ref="0x7f37a3d41020"/>
        <function-ref name="setType" scoped="" ref="0x7f37a3d411b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a3d41340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f37a3d414d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f37a3d41660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f37a3d3f840" loc="64:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f37a3d3f840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3d3fbc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f37a3d25ad0" loc="81:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f37a3d25ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f37a3d25e50"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a3d24020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a3d241b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f37a3d1b510" loc="86:../../../../tos/chips/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f37a3d1b510"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f37a3d1b890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Tasklet" ref="0x7f37a3d0fe50" loc="44:../../../../tos/lib/rfxlink/util/TaskletC.nc">
      <component-ref qname="RF230RadioC.TaskletC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f37a3d0fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f37a3d0e210"/>
        <function-ref name="suspend" scoped="" ref="0x7f37a3d0e3a0"/>
        <function-ref name="resume" scoped="" ref="0x7f37a3d0e530"/>
        <function-ref name="run" scoped="" ref="0x7f37a3d0e6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7f37a3cc1570" loc="38:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f37a3cc1570"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3cc1910"/>
        <function-ref name="clearAll" scoped="" ref="0x7f37a3cc1aa0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3cc1c30"/>
        <function-ref name="set" scoped="" ref="0x7f37a3cc1dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7f37a3cc2770" loc="37:../../../../tos/lib/rfxlink/util/NeighborhoodC.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f37a3cc2770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f37a3cc2af0"/>
        <function-ref name="insertNode" scoped="" ref="0x7f37a3cc2c80"/>
        <function-ref name="getNode" scoped="" ref="0x7f37a3cc2e10"/>
        <function-ref name="evicted" scoped="" ref="0x7f37a3cc1020"/>
        <function-ref name="getIndex" scoped="" ref="0x7f37a3cc11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x7f37a2a6ad60" loc="43:../../../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f37a2a6ad60"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a2a69180"/>
        <function-ref name="clearAll" scoped="" ref="0x7f37a2a69310"/>
        <function-ref name="get" scoped="" ref="0x7f37a2a694a0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2a69630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x7f37a2a6a020" loc="42:../../../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f37a2a6a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f37a2a6a3a0"/>
        <function-ref name="insertNode" scoped="" ref="0x7f37a2a6a530"/>
        <function-ref name="getNode" scoped="" ref="0x7f37a2a6a6c0"/>
        <function-ref name="evicted" scoped="" ref="0x7f37a2a6a850"/>
        <function-ref name="getIndex" scoped="" ref="0x7f37a2a6a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a2a6b920" loc="41:../../../../tos/lib/rfxlink/util/NeighborhoodP.nc">
      <component-ref qname="RF230RadioC.NeighborhoodC.NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a2a6b920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a2a6bca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DummyConfig" ref="0x7f37a3c9b080" loc="51:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DummyConfig" scoped="" ref="0x7f37a3c9b080"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f37a3c9b400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TrafficMonitorConfig" ref="0x7f37a3ca52f0" loc="47:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TrafficMonitorConfig" scoped="" ref="0x7f37a3ca52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getBytes" scoped="" ref="0x7f37a3ca5670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageConfig" ref="0x7f37a3c94440" loc="50:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageConfig" scoped="" ref="0x7f37a3c94440"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f37a3c947c0"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f37a3c94950"/>
        <function-ref name="source" scoped="" ref="0x7f37a3c94ae0"/>
        <function-ref name="destination" scoped="" ref="0x7f37a3c94c70"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a3c94e00"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a3ca0020"/>
        <function-ref name="setGroup" scoped="" ref="0x7f37a3ca01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlottedCollisionConfig" ref="0x7f37a3ca6020" loc="49:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlottedCollisionConfig" scoped="" ref="0x7f37a3ca6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getInitialDelay" scoped="" ref="0x7f37a3ca63a0"/>
        <function-ref name="getScheduleExponent" scoped="" ref="0x7f37a3ca6530"/>
        <function-ref name="getCollisionWindowLength" scoped="" ref="0x7f37a3ca66c0"/>
        <function-ref name="getTransmitTime" scoped="" ref="0x7f37a3ca6850"/>
        <function-ref name="getCollisionWindowStart" scoped="" ref="0x7f37a3ca69e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f37a3c72d30" loc="61:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a3c72d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f37a3c750e0"/>
        <function-ref name="wait" scoped="" ref="0x7f37a3c75270"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3c75400"/>
        <function-ref name="isFree" scoped="" ref="0x7f37a3c75590"/>
        <function-ref name="getNow" scoped="" ref="0x7f37a3c75720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RF230Packet" ref="0x7f37a3c6a430" loc="62:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230Packet" scoped="" ref="0x7f37a3c6a430"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3c6a7b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3c6a940"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3c6aad0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3c6ac60"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a3c6adf0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a3c74020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f37a3c745f0" loc="64:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f37a3c745f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a3c71ce0"/>
        <function-ref name="clear" scoped="" ref="0x7f37a3c69460"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a3c715b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3c69b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RF230DriverConfig" ref="0x7f37a3cb7a90" loc="43:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230DriverConfig" scoped="" ref="0x7f37a3cb7a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3cb7e10"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a3cbc020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a3cbc1b0"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f37a3cbc340"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f37a3cbc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaConfig" ref="0x7f37a3ca7b20" loc="46:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaConfig" scoped="" ref="0x7f37a3ca7b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="requiresSoftwareCCA" scoped="" ref="0x7f37a3cac020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareAckConfig" ref="0x7f37a3cafc50" loc="44:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareAckConfig" scoped="" ref="0x7f37a3cafc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7f37a3cbb020"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7f37a3cbb1b0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f37a3cbb340"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7f37a3cbb4d0"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7f37a3cbb660"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7f37a3cbb7f0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f37a3cbb980"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f37a3cbbb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7f37a3c79cf0" loc="60:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f37a3c79cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f37a3c920a0"/>
        <function-ref name="getDSN" scoped="" ref="0x7f37a3c92230"/>
        <function-ref name="setFCF" scoped="" ref="0x7f37a3c923c0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f37a3c92550"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f37a3c926e0"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f37a3c92870"/>
        <function-ref name="setDSN" scoped="" ref="0x7f37a3c92a00"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f37a3c92b90"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f37a3c92d20"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f37a3c91020"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f37a3c911b0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f37a3c91340"/>
        <function-ref name="localAddr" scoped="" ref="0x7f37a3c914d0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f37a3c91760"/>
        <function-ref name="localPan" scoped="" ref="0x7f37a3c918f0"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f37a3c91a80"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f37a3c91c10"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f37a3c91da0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f37a3c78020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a3c781b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f37a3c78340"/>
        <function-ref name="getFCF" scoped="" ref="0x7f37a3c784d0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f37a3c78660"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f37a3c787f0"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f37a3c78980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UniqueConfig" ref="0x7f37a3cad020" loc="45:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7f37a3cad020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f37a3cad3a0"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f37a3cad530"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f37a3cad6c0"/>
        <function-ref name="getSender" scoped="" ref="0x7f37a3cad850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RandomCollisionConfig" ref="0x7f37a3ca1910" loc="48:../../../../tos/chips/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RandomCollisionConfig" scoped="" ref="0x7f37a3ca1910"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f37a3ca1c90"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f37a3ca1e20"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f37a3ca8020"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f37a3ca81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7f37a3c0e8c0" loc="41:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a3c0e8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f37a3c0ec60"/>
        <function-ref name="wait" scoped="" ref="0x7f37a3c0edf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3bdc020"/>
        <function-ref name="isFree" scoped="" ref="0x7f37a3bdc1b0"/>
        <function-ref name="getNow" scoped="" ref="0x7f37a3bdc340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f37a3bdb4a0" loc="47:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f37a3bdb4a0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f37a41ee3a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f37a41ee3a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f37a4079180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a3bd9db0"/>
        <function-ref name="fired" scoped="" ref="0x7f37a3bdada0"/>
        <function-ref name="startAt" scoped="" ref="0x7f37a3bd9760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a3bd92a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f37a3bd82a0"/>
        <function-ref name="start" scoped="" ref="0x7f37a3bda3d0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3bda8e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f37a3bdc5f0" loc="46:../../../../tos/lib/rfxlink/util/RadioAlarmC.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f37a3bdc5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f37a3bdc970"/>
        <function-ref name="suspend" scoped="" ref="0x7f37a3bdcb00"/>
        <function-ref name="resume" scoped="" ref="0x7f37a3bdcc90"/>
        <function-ref name="run" scoped="" ref="0x7f37a3bdce20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x7f37a2a4fa40" loc="54:../../../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a2a4fa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f37a2a4fde0"/>
        <function-ref name="wait" scoped="" ref="0x7f37a2a4e020"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a2a4e1b0"/>
        <function-ref name="isFree" scoped="" ref="0x7f37a2a4e340"/>
        <function-ref name="getNow" scoped="" ref="0x7f37a2a4e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f37a2a4e9c0" loc="59:../../../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f37a2a4e9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f37a4079180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a2a4b260"/>
        <function-ref name="fired" scoped="" ref="0x7f37a2a4c220"/>
        <function-ref name="startAt" scoped="" ref="0x7f37a2a4cba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a2a4c6e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f37a2a4b720"/>
        <function-ref name="start" scoped="" ref="0x7f37a2a4d810"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2a4dd20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f37a2a4bb10" loc="60:../../../../tos/lib/rfxlink/util/RadioAlarmP.nc">
      <component-ref qname="RF230RadioC.RadioAlarmC.RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f37a2a4bb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f37a2a49020"/>
        <function-ref name="suspend" scoped="" ref="0x7f37a2a491b0"/>
        <function-ref name="resume" scoped="" ref="0x7f37a2a49340"/>
        <function-ref name="run" scoped="" ref="0x7f37a2a494d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a3b2e8f0" loc="50:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a3b2e8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3b2ec70"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3b2ee00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3b2d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a3b2d2b0" loc="51:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a3b2d2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3b2d630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f37a3b303a0" loc="44:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3b303a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f37a3b30740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f37a3b33720" loc="40:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f37a3b33720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3b33aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3b33c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3b33dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3b32020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3b321b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f37a3b32530" loc="41:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f37a3b32530"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3b328d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3b32a60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3b32bf0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3b32d80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3b31020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f37a3b31b00" loc="43:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f37a3b31b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3b30020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f37a3b30a30" loc="49:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f37a3b30a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3b30db0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3b2e020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3b2e1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3b2e340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a3b2e4d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a3b2e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f37a3b2d8c0" loc="52:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f37a3b2d8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f37a3b2dc40"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f37a3b2ddd0"/>
        <function-ref name="source" scoped="" ref="0x7f37a3b2c020"/>
        <function-ref name="destination" scoped="" ref="0x7f37a3b2c1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a3b2c340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a3b2c4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f37a3b2c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a3b313a0" loc="42:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a3b313a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3b31740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f37a3b34020" loc="39:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerC.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f37a3b34020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f37a3b343a0"/>
        <function-ref name="source" scoped="" ref="0x7f37a3b34530"/>
        <function-ref name="address" scoped="" ref="0x7f37a3b346c0"/>
        <function-ref name="destination" scoped="" ref="0x7f37a3b34850"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a3b349e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a3b34b70"/>
        <function-ref name="type" scoped="" ref="0x7f37a3b34d00"/>
        <function-ref name="setType" scoped="" ref="0x7f37a3b33020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a3b331b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f37a3b33340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f37a3b334d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a2a2d120" loc="54:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a2a2d120"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a2a2d4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a2a2d630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a2a2d7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a2a2da50" loc="55:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a2a2da50"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a2a2ddd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f37a2a2fb00" loc="48:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f37a2a2fb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f37a2a2e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f37a2a31020" loc="44:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f37a2a31020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a2a313a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a2a31530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a2a316c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a2a31850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a2a319e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f37a2a349f0" loc="42:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a2a349f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a2a34d70"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a2a33020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a2a331b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a2a33340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a2a334d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a2a33660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f37a2a31d60" loc="45:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f37a2a31d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a2a30180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a2a30310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a2a304a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a2a30630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a2a307c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f37a2a2f3e0" loc="47:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x7f37a2a2f3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a2a2f780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f37a2a2e310" loc="53:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f37a2a2e310"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a2a2e690"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a2a2e820"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a2a2e9b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a2a2eb40"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a2a2ecd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a2a2ee60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a2a30b40" loc="46:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a2a30b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a2a2f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f37a2a2c0a0" loc="56:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f37a2a2c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f37a2a2c420"/>
        <function-ref name="checkFrame" scoped="" ref="0x7f37a2a2c5b0"/>
        <function-ref name="source" scoped="" ref="0x7f37a2a2c740"/>
        <function-ref name="destination" scoped="" ref="0x7f37a2a2c8d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a2a2ca60"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a2a2cbf0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f37a2a2cd80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f37a2a2a020" loc="57:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f37a2a2a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f37a2a2a3a0"/>
        <function-ref name="changed" scoped="" ref="0x7f37a2a2a530"/>
        <function-ref name="amGroup" scoped="" ref="0x7f37a2a2a6c0"/>
        <function-ref name="setAddress" scoped="" ref="0x7f37a2a2a850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f37a2a338b0" loc="43:../../../../tos/lib/rfxlink/layers/ActiveMessageLayerP.nc">
      <component-ref qname="RF230RadioC.ActiveMessageLayerC.ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f37a2a338b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f37a2a33c30"/>
        <function-ref name="source" scoped="" ref="0x7f37a2a33dc0"/>
        <function-ref name="address" scoped="" ref="0x7f37a2a32020"/>
        <function-ref name="destination" scoped="" ref="0x7f37a2a321b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a2a32340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a2a324d0"/>
        <function-ref name="type" scoped="" ref="0x7f37a2a32660"/>
        <function-ref name="setType" scoped="" ref="0x7f37a2a327f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a2a32980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f37a2a32b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f37a2a32ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7f37a3b4d260" loc="54:../../../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f37a3b4d260"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f37a3b4d5e0"/>
        <function-ref name="changed" scoped="" ref="0x7f37a3b4d770"/>
        <function-ref name="amGroup" scoped="" ref="0x7f37a3b4d900"/>
        <function-ref name="setAddress" scoped="" ref="0x7f37a3b4da90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a3b26310" loc="44:../../../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a3b26310"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3b26690"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3b26820"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3b269b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f37a3b26c00" loc="45:../../../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f37a3b26c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f37a3b16020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f37a3b161b0"/>
        <function-ref name="request" scoped="" ref="0x7f37a3b16340"/>
        <function-ref name="granted" scoped="" ref="0x7f37a3b164d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f37a3b16660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f37a3b27880" loc="39:../../../../tos/lib/rfxlink/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f37a3b27880"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3b27c00"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3b27d90"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3b26020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f37a3ab2150" loc="86:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f37a3ab2150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f37a3ab24f0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f37a3ab2680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f37a3ab11f0" loc="89:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f37a3ab11f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f37a3ab1590"/>
        <function-ref name="configure" scoped="" ref="0x7f37a3ab1720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f37a3ab3390" loc="85:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f37a3ab3390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f37a3ab3730"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f37a3ab38c0"/>
        <function-ref name="request" scoped="" ref="0x7f37a3ab3a50"/>
        <function-ref name="granted" scoped="" ref="0x7f37a3ab3be0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f37a3ab3d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f37a3ab28d0" loc="87:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f37a3ab28d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f37a3ab2c50"/>
        <function-ref name="userId" scoped="" ref="0x7f37a3ab2de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a29dda00" loc="44:../../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a29dda00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a29ddd80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f37a29dc060" loc="45:../../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7f37a29dc060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f37a29dc3e0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f37a29dc570"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f37a29dc700"/>
        <function-ref name="dequeue" scoped="" ref="0x7f37a29dc890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f37a29d9d80" loc="52:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f37a29d9d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f37a29d8180"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f37a29d8310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f37a29d8e50" loc="56:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f37a29d8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f37a29d7220"/>
        <function-ref name="configure" scoped="" ref="0x7f37a29d73b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f37a29d7640" loc="57:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f37a29d7640"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f37a29d79c0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f37a29d7b50"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f37a29d7ce0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f37a29d7e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f37a29d9020" loc="51:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f37a29d9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f37a29d93c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f37a29d9550"/>
        <function-ref name="request" scoped="" ref="0x7f37a29d96e0"/>
        <function-ref name="granted" scoped="" ref="0x7f37a29d9870"/>
        <function-ref name="isOwner" scoped="" ref="0x7f37a29d9a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f37a29d8560" loc="53:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f37a29d8560"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f37a29d88e0"/>
        <function-ref name="userId" scoped="" ref="0x7f37a29d8a70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f37a29d6170" loc="68:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7f37a29d6170"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a29d64f0"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a29d6680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a3a792b0" loc="49:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a3a792b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3a79630"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3a797c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3a79950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a3a79be0" loc="50:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a3a79be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3a78020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f37a3a7ed30" loc="42:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x7f37a3a7ed30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f37a3a7d0e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f37a3aaee00" loc="39:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f37a3aaee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3a801c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3a80350"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3a804e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3a80670"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3a80800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPacket" ref="0x7f37a3a7a470" loc="48:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a3a7a470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3a7a7f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3a7a980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3a7ab10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3a7aca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a3a7ae30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a3a79020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x7f37a3a7d390" loc="47:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f37a3a7d390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f37a3a7d710"/>
        <function-ref name="getDSN" scoped="" ref="0x7f37a3a7d8a0"/>
        <function-ref name="setFCF" scoped="" ref="0x7f37a3a7da30"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f37a3a7dbc0"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f37a3a7dd50"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f37a3a7c020"/>
        <function-ref name="setDSN" scoped="" ref="0x7f37a3a7c1b0"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f37a3a7c340"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f37a3a7c4d0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f37a3a7c660"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f37a3a7c7f0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f37a3a7c980"/>
        <function-ref name="localAddr" scoped="" ref="0x7f37a3a7cb10"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f37a3a7cda0"/>
        <function-ref name="localPan" scoped="" ref="0x7f37a3a7b020"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f37a3a7b1b0"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f37a3a7b340"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f37a3a7b4d0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f37a3a7b660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a3a7b7f0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f37a3a7b980"/>
        <function-ref name="getFCF" scoped="" ref="0x7f37a3a7bb10"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f37a3a7bca0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f37a3a7be30"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f37a3a7a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f37a3a80a50" loc="40:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f37a3a80a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3a80dd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3a7e020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3a7e1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3a7e340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3a7e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f37a3a7e760" loc="41:../../../../tos/lib/rfxlink/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f37a3a7e760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3a7eae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a3a3c4a0" loc="69:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a3a3c4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3a3c820"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3a3c9b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3a3cb40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a3a3cdd0" loc="70:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a3a3cdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3a3a180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f37a3a3f730" loc="57:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f37a3a3f730"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3a3fab0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3a3fc40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3a3fdd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3a3e020"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a3a3e1b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a3a3e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosReceive" ref="0x7f37a3a3d020" loc="62:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosReceive" scoped="" ref="0x7f37a3a3d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3a3d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f37a3a3a410" loc="71:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f37a3a3a410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3a3a790"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3a3a920"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3a3aab0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3a3ac40"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a3a3add0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a3a39020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosSend" ref="0x7f37a3a3e5d0" loc="61:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosSend" scoped="" ref="0x7f37a3a3e5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3a3e950"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3a3eae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3a3ec70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x7f37a3a727c0" loc="55:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x7f37a3a727c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3a72b40"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3a72cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3a72e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x7f37a3a3f120" loc="56:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x7f37a3a3f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3a3f4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosPacket" ref="0x7f37a3a3d630" loc="63:../../../../tos/lib/rfxlink/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="RF230RadioC.TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosPacket" scoped="" ref="0x7f37a3a3d630"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3a3d9b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3a3db40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3a3dcd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3a3de60"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a3a3c020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a3a3c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a399c440" loc="48:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a399c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a399c7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f37a39a0dd0" loc="40:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f37a39a0dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f37a399f180"/>
        <function-ref name="address" scoped="" ref="0x7f37a399f310"/>
        <function-ref name="destination" scoped="" ref="0x7f37a399f4a0"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a399f630"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a399f7c0"/>
        <function-ref name="pan" scoped="" ref="0x7f37a399f950"/>
        <function-ref name="setPan" scoped="" ref="0x7f37a399fae0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a399fc70"/>
        <function-ref name="localPan" scoped="" ref="0x7f37a399fe00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f37a399e080" loc="41:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a399e080"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a399e400"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a399e590"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a399e720"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a399e8b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a399ea40"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a399ebd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7f37a39a3e00" loc="39:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f37a39a3e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f37a39a21c0"/>
        <function-ref name="getDSN" scoped="" ref="0x7f37a39a2350"/>
        <function-ref name="setFCF" scoped="" ref="0x7f37a39a24e0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f37a39a2670"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f37a39a2800"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f37a39a2990"/>
        <function-ref name="setDSN" scoped="" ref="0x7f37a39a2b20"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f37a39a2cb0"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f37a39a2e40"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f37a39a1020"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f37a39a11b0"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f37a39a1340"/>
        <function-ref name="localAddr" scoped="" ref="0x7f37a39a14d0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f37a39a1760"/>
        <function-ref name="localPan" scoped="" ref="0x7f37a39a18f0"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f37a39a1a80"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f37a39a1c10"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f37a39a1da0"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f37a39a0020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a39a01b0"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f37a39a0340"/>
        <function-ref name="getFCF" scoped="" ref="0x7f37a39a04d0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f37a39a0660"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f37a39a07f0"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f37a39a0980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f37a399d500" loc="47:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f37a399d500"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a399d880"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a399da10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a399dba0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a399dd30"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a399c020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a399c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a399ee60" loc="42:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a399ee60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a399d210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a29698f0" loc="51:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a29698f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a2969c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x7f37a296d790" loc="42:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x7f37a296d790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x7f37a296db10"/>
        <function-ref name="address" scoped="" ref="0x7f37a296dca0"/>
        <function-ref name="destination" scoped="" ref="0x7f37a296de30"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a296c020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a296c1b0"/>
        <function-ref name="pan" scoped="" ref="0x7f37a296c340"/>
        <function-ref name="setPan" scoped="" ref="0x7f37a296c4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a296c660"/>
        <function-ref name="localPan" scoped="" ref="0x7f37a296c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f37a296ca40" loc="43:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a296ca40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a296cdc0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a296b020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a296b1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a296b340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a296b4d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a296b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x7f37a2970740" loc="41:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x7f37a2970740"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x7f37a2970ac0"/>
        <function-ref name="getDSN" scoped="" ref="0x7f37a2970c50"/>
        <function-ref name="setFCF" scoped="" ref="0x7f37a2970de0"/>
        <function-ref name="isAckFrame" scoped="" ref="0x7f37a296f020"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x7f37a296f1b0"/>
        <function-ref name="createDataFrame" scoped="" ref="0x7f37a296f340"/>
        <function-ref name="setDSN" scoped="" ref="0x7f37a296f4d0"/>
        <function-ref name="createAckReply" scoped="" ref="0x7f37a296f660"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x7f37a296f7f0"/>
        <function-ref name="isDataFrame" scoped="" ref="0x7f37a296f980"/>
        <function-ref name="getAckRequired" scoped="" ref="0x7f37a296fb10"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x7f37a296fca0"/>
        <function-ref name="localAddr" scoped="" ref="0x7f37a296fe30"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f37a296e120"/>
        <function-ref name="localPan" scoped="" ref="0x7f37a296e2b0"/>
        <function-ref name="setDestAddr" scoped="" ref="0x7f37a296e440"/>
        <function-ref name="createAckFrame" scoped="" ref="0x7f37a296e5d0"/>
        <function-ref name="setFramePending" scoped="" ref="0x7f37a296e760"/>
        <function-ref name="setDestPan" scoped="" ref="0x7f37a296e8f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a296ea80"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f37a296ec10"/>
        <function-ref name="getFCF" scoped="" ref="0x7f37a296eda0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f37a296d020"/>
        <function-ref name="getDestAddr" scoped="" ref="0x7f37a296d1b0"/>
        <function-ref name="getFramePending" scoped="" ref="0x7f37a296d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f37a296a020" loc="49:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f37a296a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f37a296a3a0"/>
        <function-ref name="changed" scoped="" ref="0x7f37a296a530"/>
        <function-ref name="amGroup" scoped="" ref="0x7f37a296a6c0"/>
        <function-ref name="setAddress" scoped="" ref="0x7f37a296a850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a296b8f0" loc="44:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a296b8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a296bc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f37a296aae0" loc="50:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="RF230RadioC.Ieee154PacketLayerC.Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f37a296aae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a296ae60"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a2969020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a29691b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a2969340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a29694d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a2969660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a3968a70" loc="45:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a3968a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3968df0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3966020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a39661b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a3966440" loc="46:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a3966440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a39667c0"/>
        <function-ref name="header" scoped="" ref="0x7f37a3966950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7f37a3964400" loc="51:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f37a3964400"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3964780"/>
        <function-ref name="clearAll" scoped="" ref="0x7f37a3964910"/>
        <function-ref name="get" scoped="" ref="0x7f37a3964aa0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3964c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f37a3969840" loc="40:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f37a3969840"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3969bc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3969d50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3968020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f37a3966be0" loc="48:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f37a3966be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f37a3965020"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f37a39651b0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f37a3965340"/>
        <function-ref name="getSender" scoped="" ref="0x7f37a39654d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f37a3968270" loc="41:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f37a3968270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a39685f0"/>
        <function-ref name="header" scoped="" ref="0x7f37a3968780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7f37a3965720" loc="50:../../../../tos/lib/rfxlink/layers/UniqueLayerC.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f37a3965720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f37a3965aa0"/>
        <function-ref name="insertNode" scoped="" ref="0x7f37a3965c30"/>
        <function-ref name="getNode" scoped="" ref="0x7f37a3965dc0"/>
        <function-ref name="evicted" scoped="" ref="0x7f37a3964020"/>
        <function-ref name="getIndex" scoped="" ref="0x7f37a39641b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a29168e0" loc="49:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a29168e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a2916c60"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a2916df0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a2915020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a29152b0" loc="50:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a29152b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a2915630"/>
        <function-ref name="header" scoped="" ref="0x7f37a29157c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x7f37a2913270" loc="54:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x7f37a2913270"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a29135f0"/>
        <function-ref name="clearAll" scoped="" ref="0x7f37a2913780"/>
        <function-ref name="get" scoped="" ref="0x7f37a2913910"/>
        <function-ref name="set" scoped="" ref="0x7f37a2913aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f37a2918120" loc="41:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f37a2918120"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a29184a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a2918630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a29187c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x7f37a2914590" loc="53:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x7f37a2914590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x7f37a2914910"/>
        <function-ref name="insertNode" scoped="" ref="0x7f37a2914aa0"/>
        <function-ref name="getNode" scoped="" ref="0x7f37a2914c30"/>
        <function-ref name="evicted" scoped="" ref="0x7f37a2914dc0"/>
        <function-ref name="getIndex" scoped="" ref="0x7f37a2913020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f37a2918a10" loc="42:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f37a2918a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a2918d90"/>
        <function-ref name="header" scoped="" ref="0x7f37a2916020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a2916270" loc="44:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a2916270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a29165f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UniqueConfig" ref="0x7f37a2915a10" loc="52:../../../../tos/lib/rfxlink/layers/UniqueLayerP.nc">
      <component-ref qname="RF230RadioC.UniqueLayerC.UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x7f37a2915a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x7f37a2915d90"/>
        <function-ref name="reportChannelError" scoped="" ref="0x7f37a2914020"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x7f37a29141b0"/>
        <function-ref name="getSender" scoped="" ref="0x7f37a2914340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a3952950" loc="85:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a3952950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3952cd0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3952e60"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3951020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a39512b0" loc="86:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a39512b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3951630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedPacketAcks" ref="0x7f37a394fd90" loc="93:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketAcks" scoped="" ref="0x7f37a394fd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f37a394e180"/>
        <function-ref name="noAck" scoped="" ref="0x7f37a394e310"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f37a394e4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f37a395fe40" loc="77:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f37a395fe40"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a39541e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3954370"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3954500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f37a3953a10" loc="80:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a3953a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3953d90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3952020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a39521b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3952340"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a39524d0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a3952660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f37a39518c0" loc="87:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f37a39518c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3951c40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3951dd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3950020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a39501b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a3950340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a39504d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UnconnectedPacketLink" ref="0x7f37a394f100" loc="92:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedPacketLink" scoped="" ref="0x7f37a394f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f37a394f480"/>
        <function-ref name="setRetries" scoped="" ref="0x7f37a394f610"/>
        <function-ref name="getRetries" scoped="" ref="0x7f37a394f7a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f37a394f930"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f37a394fac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a3954790" loc="78:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a3954790"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3954b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f37a3950720" loc="88:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3950720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f37a3950aa0"/>
        <function-ref name="noAck" scoped="" ref="0x7f37a3950c30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f37a3950dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f37a3954d60" loc="79:../../../../tos/lib/rfxlink/layers/PacketLinkLayerC.nc">
      <component-ref qname="RF230RadioC.PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x7f37a3954d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f37a3953180"/>
        <function-ref name="setRetries" scoped="" ref="0x7f37a3953310"/>
        <function-ref name="getRetries" scoped="" ref="0x7f37a39534a0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f37a3953630"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f37a39537c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f37a39340e0" loc="39:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f37a39340e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a3934460"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a39345f0"/>
        <function-ref name="start" scoped="" ref="0x7f37a3934780"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3934910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a392f120" loc="49:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a392f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a392f4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a392f630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a392f7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a392fa50" loc="50:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a392fa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a392fdd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f37a3934ba0" loc="40:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f37a3934ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3933020"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a39331b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3933340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f37a3933ba0" loc="42:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a3933ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3932020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a39321b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3932340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a39324d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a3932660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a39327f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f37a3932a40" loc="44:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a3932a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f37a3932dc0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f37a3930020"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f37a39301b0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f37a3930340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f37a3930630" loc="48:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f37a3930630"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a39309b0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a3930b40"/>
        <function-ref name="start" scoped="" ref="0x7f37a3930cd0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3930e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a39335d0" loc="41:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a39335d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3933950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f37a392e0a0" loc="51:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f37a392e0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a392e420"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a392e5b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a392e740"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a392e8d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a392ea60"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a392ebf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f37a28f1da0" loc="37:../../../../tos/lib/rfxlink/layers/LowPowerListeningDummyP.nc">
      <component-ref qname="RF230RadioC.LowPowerListeningLayerC.LowPowerListeningDummyP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x7f37a28f1da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f37a28f0180"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f37a28f0310"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f37a28f04a0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f37a28f0630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f37a38bea10" loc="39:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f37a38bea10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a38bed90"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a38bd020"/>
        <function-ref name="start" scoped="" ref="0x7f37a38bd1b0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a38bd340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7f37a38bbaa0" loc="47:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f37a38bbaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f37a38bbe20"/>
        <function-ref name="turnOn" scoped="" ref="0x7f37a38ba020"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a38ba1b0"/>
        <function-ref name="done" scoped="" ref="0x7f37a38ba340"/>
        <function-ref name="standby" scoped="" ref="0x7f37a38ba4d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a38ba660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f37a38bd5d0" loc="40:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f37a38bd5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a38bd950"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a38bdae0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a38bdc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7f37a38b9270" loc="49:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f37a38b9270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a38b95f0"/>
        <function-ref name="header" scoped="" ref="0x7f37a38b9780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a38bc020" loc="41:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a38bc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a38bc3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7f37a38ba8b0" loc="48:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f37a38ba8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a38bac30"/>
        <function-ref name="ready" scoped="" ref="0x7f37a38badc0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a38b9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f37a38bc5f0" loc="42:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f37a38bc5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f37a38bc970"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a38bcb00"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a38bcc90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f37a38bb020" loc="46:../../../../tos/lib/rfxlink/layers/MessageBufferLayerC.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f37a38bb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f37a38bb3a0"/>
        <function-ref name="suspend" scoped="" ref="0x7f37a38bb530"/>
        <function-ref name="resume" scoped="" ref="0x7f37a38bb6c0"/>
        <function-ref name="run" scoped="" ref="0x7f37a38bb850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f37a28e93f0" loc="43:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f37a28e93f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a28e9770"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a28e9900"/>
        <function-ref name="start" scoped="" ref="0x7f37a28e9a90"/>
        <function-ref name="stop" scoped="" ref="0x7f37a28e9c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7f37a28e8020" loc="44:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a28e8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a28e83a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x7f37a28e5020" loc="52:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f37a28e5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f37a28e53a0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f37a28e5530"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a28e56c0"/>
        <function-ref name="done" scoped="" ref="0x7f37a28e5850"/>
        <function-ref name="standby" scoped="" ref="0x7f37a28e59e0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a28e5b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f37a28e8630" loc="46:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f37a28e8630"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a28e89b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a28e8b40"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a28e8cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0x7f37a28e22f0" loc="189:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0x7f37a28e22f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a28e2670"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a28e2800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x7f37a28e3270" loc="55:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f37a28e3270"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a28e35f0"/>
        <function-ref name="header" scoped="" ref="0x7f37a28e3780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stateDoneTask" ref="0x7f37a28e2ad0" loc="144:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stateDoneTask" scoped="" ref="0x7f37a28e2ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a28e2e50"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a28e1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a28e6020" loc="47:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a28e6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a28e63a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="deliverTask" ref="0x7f37a28e3a50" loc="322:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="deliverTask" scoped="" ref="0x7f37a28e3a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a28e3dd0"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a28e2020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x7f37a28e4880" loc="54:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f37a28e4880"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a28e4c00"/>
        <function-ref name="ready" scoped="" ref="0x7f37a28e4d90"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a28e3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x7f37a28e65f0" loc="48:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x7f37a28e65f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x7f37a28e6970"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a28e6b00"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a28e6c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f37a28e5dc0" loc="53:../../../../tos/lib/rfxlink/layers/MessageBufferLayerP.nc">
      <component-ref qname="RF230RadioC.MessageBufferLayerC.MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f37a28e5dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f37a28e4180"/>
        <function-ref name="suspend" scoped="" ref="0x7f37a28e4310"/>
        <function-ref name="resume" scoped="" ref="0x7f37a28e44a0"/>
        <function-ref name="run" scoped="" ref="0x7f37a28e4630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a3863860" loc="44:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a3863860"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3863be0"/>
        <function-ref name="ready" scoped="" ref="0x7f37a3863d70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3862020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a38622b0" loc="45:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a38622b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3862630"/>
        <function-ref name="header" scoped="" ref="0x7f37a38627c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f37a3862a10" loc="46:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a3862a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f37a3862d90"/>
        <function-ref name="wait" scoped="" ref="0x7f37a3861020"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a38611b0"/>
        <function-ref name="isFree" scoped="" ref="0x7f37a3861340"/>
        <function-ref name="getNow" scoped="" ref="0x7f37a38614d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f37a3861760" loc="48:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f37a3861760"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f37a3861ae0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f37a3861c70"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f37a3861e00"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f37a3860020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f37a3863060" loc="40:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f37a3863060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a38633e0"/>
        <function-ref name="header" scoped="" ref="0x7f37a3863570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f37a3864740" loc="39:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f37a3864740"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3864ac0"/>
        <function-ref name="ready" scoped="" ref="0x7f37a3864c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3864de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a28a84a0" loc="47:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a28a84a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a28a8820"/>
        <function-ref name="ready" scoped="" ref="0x7f37a28a89b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a28a8b40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a28a8dd0" loc="48:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a28a8dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a28a7180"/>
        <function-ref name="header" scoped="" ref="0x7f37a28a7310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f37a28a7560" loc="49:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a28a7560"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f37a28a78e0"/>
        <function-ref name="wait" scoped="" ref="0x7f37a28a7a70"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a28a7c00"/>
        <function-ref name="isFree" scoped="" ref="0x7f37a28a7d90"/>
        <function-ref name="getNow" scoped="" ref="0x7f37a28a6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f37a28a6270" loc="50:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f37a28a6270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f37a28a65f0"/>
        <function-ref name="rand32" scoped="" ref="0x7f37a28a6780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f37a28a6a10" loc="51:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f37a28a6a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x7f37a28a6d90"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x7f37a28a5020"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x7f37a28a51b0"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x7f37a28a5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f37a28aab70" loc="43:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f37a28aab70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a28a8020"/>
        <function-ref name="header" scoped="" ref="0x7f37a28a81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f37a28aa280" loc="42:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f37a28aa280"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a28aa600"/>
        <function-ref name="ready" scoped="" ref="0x7f37a28aa790"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a28aa920"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="calcNextRandom" ref="0x7f37a28a5610" loc="78:../../../../tos/lib/rfxlink/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RF230RadioC.CollisionAvoidanceLayerC.RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="calcNextRandom" scoped="" ref="0x7f37a28a5610"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a28a5990"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a28a5b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f37a3878160" loc="46:../../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f37a3878160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f37a38784e0"/>
        <function-ref name="rand32" scoped="" ref="0x7f37a3878670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f37a3879060" loc="45:../../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7f37a3879060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3879c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a387b230" loc="44:../../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a387b230"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a387b5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f37a3872100" loc="48:../../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x7f37a3872100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f37a3872480"/>
        <function-ref name="rand32" scoped="" ref="0x7f37a3872610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f37a3873020" loc="47:../../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x7f37a3873020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3873c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a38746e0" loc="46:../../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a38746e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3874a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a3830630" loc="49:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a3830630"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a38309b0"/>
        <function-ref name="ready" scoped="" ref="0x7f37a3830b40"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3830cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a382f020" loc="50:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a382f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a382f3a0"/>
        <function-ref name="header" scoped="" ref="0x7f37a382f530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f37a382f780" loc="51:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a382f780"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f37a382fb00"/>
        <function-ref name="wait" scoped="" ref="0x7f37a382fc90"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a382fe20"/>
        <function-ref name="isFree" scoped="" ref="0x7f37a382e020"/>
        <function-ref name="getNow" scoped="" ref="0x7f37a382e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AckReceivedFlag" ref="0x7f37a382c5d0" loc="54:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AckReceivedFlag" scoped="" ref="0x7f37a382c5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a382c950"/>
        <function-ref name="get" scoped="" ref="0x7f37a382cae0"/>
        <function-ref name="setValue" scoped="" ref="0x7f37a382cc70"/>
        <function-ref name="set" scoped="" ref="0x7f37a382ce00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f37a382e440" loc="53:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f37a382e440"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x7f37a382e7c0"/>
        <function-ref name="createAckPacket" scoped="" ref="0x7f37a382e950"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x7f37a382eae0"/>
        <function-ref name="isAckPacket" scoped="" ref="0x7f37a382ec70"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x7f37a382ee00"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x7f37a382c020"/>
        <function-ref name="setAckRequired" scoped="" ref="0x7f37a382c1b0"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x7f37a382c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f37a3831400" loc="43:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f37a3831400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3831780"/>
        <function-ref name="header" scoped="" ref="0x7f37a3831910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f37a385cac0" loc="42:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f37a385cac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a385ce40"/>
        <function-ref name="ready" scoped="" ref="0x7f37a3831020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a38311b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f37a3831b60" loc="44:../../../../tos/lib/rfxlink/layers/SoftwareAckLayerC.nc">
      <component-ref qname="RF230RadioC.SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3831b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f37a3830020"/>
        <function-ref name="noAck" scoped="" ref="0x7f37a38301b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f37a3830340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f37a3813d60" loc="39:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f37a3813d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a3812180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a3812310"/>
        <function-ref name="start" scoped="" ref="0x7f37a38124a0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3812630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f37a380f7c0" loc="46:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f37a380f7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f37a380fb40"/>
        <function-ref name="request" scoped="" ref="0x7f37a380fcd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a3809020" loc="59:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a3809020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a38093a0"/>
        <function-ref name="ready" scoped="" ref="0x7f37a3809530"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a38096c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a3809950" loc="60:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a3809950"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3809cd0"/>
        <function-ref name="header" scoped="" ref="0x7f37a3809e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f37a3811840" loc="43:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f37a3811840"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f37a3811bc0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f37a3811d50"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a3810020"/>
        <function-ref name="done" scoped="" ref="0x7f37a38101b0"/>
        <function-ref name="standby" scoped="" ref="0x7f37a3810340"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a38104d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f37a380d020" loc="47:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a380d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a380d3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a380d530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a380d6c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a380d850"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a380d9e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a380db70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7f37a380a020" loc="58:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7f37a380a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f37a380a4a0"/>
        <function-ref name="turnOn" scoped="" ref="0x7f37a380a630"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a380a7c0"/>
        <function-ref name="done" scoped="" ref="0x7f37a380a950"/>
        <function-ref name="standby" scoped="" ref="0x7f37a380aae0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a380ac70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7f37a380de00" loc="49:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f37a380de00"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f37a380c1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f37a380f060" loc="45:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f37a380f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a380f3e0"/>
        <function-ref name="header" scoped="" ref="0x7f37a380f570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7f37a380b950" loc="56:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7f37a380b950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a380bcd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f37a380c4b0" loc="54:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f37a380c4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a380c830"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a380c9c0"/>
        <function-ref name="start" scoped="" ref="0x7f37a380cb50"/>
        <function-ref name="stop" scoped="" ref="0x7f37a380cce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f37a38088c0" loc="62:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f37a38088c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3808c40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3808dd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3806020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a38061b0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a3806340"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a38064d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f37a3811270" loc="41:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7f37a3811270"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a38115f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f37a3806760" loc="64:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f37a3806760"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f37a3806ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7f37a380b020" loc="55:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7f37a380b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a380b3a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a380b530"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a380b6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f37a3810720" loc="44:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f37a3810720"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3810aa0"/>
        <function-ref name="ready" scoped="" ref="0x7f37a3810c30"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3810dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7f37a3808120" loc="61:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7f37a3808120"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f37a38084a0"/>
        <function-ref name="request" scoped="" ref="0x7f37a3808630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f37a3812880" loc="40:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f37a3812880"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3812c00"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3812d90"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3811020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7f37a35dab00" loc="50:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7f37a35dab00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a35dae80"/>
        <function-ref name="get" scoped="" ref="0x7f37a35d9030"/>
        <function-ref name="setValue" scoped="" ref="0x7f37a35d91c0"/>
        <function-ref name="set" scoped="" ref="0x7f37a35d9350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f37a35ddc20" loc="43:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a35ddc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a35dc020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a35dc1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a35dc340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a35dc4d0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a35dc660"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a35dc7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f37a35dbcd0" loc="49:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f37a35dbcd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a35da0a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a35da230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a35da3c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a35da550"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a35da6e0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a35da870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f37a35e0020" loc="42:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a35e0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a35df5a0"/>
        <function-ref name="clear" scoped="" ref="0x7f37a35dfcd0"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a35e0e30"/>
        <function-ref name="set" scoped="" ref="0x7f37a35dd460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f37a35dcc00" loc="48:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a35dcc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a35db8a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f37a35e4020" loc="41:../../../../tos/lib/rfxlink/layers/TimeStampingLayerC.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a35e4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a35e25a0"/>
        <function-ref name="clear" scoped="" ref="0x7f37a35e2cd0"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a35e4e30"/>
        <function-ref name="set" scoped="" ref="0x7f37a35e1460"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x7f37a2854640" loc="49:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x7f37a2854640"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a28549c0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2854b50"/>
        <function-ref name="setValue" scoped="" ref="0x7f37a2854ce0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2854e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f37a28557e0" loc="44:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a28557e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a2855b60"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a2855cf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a2855e80"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a2854030"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a28541c0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a2854350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f37a28514c0" loc="54:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f37a28514c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a2851840"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a28519d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a2851b60"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a2851cf0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a2851e80"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a2850030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x7f37a2859bb0" loc="43:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x7f37a2859bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a2857170"/>
        <function-ref name="clear" scoped="" ref="0x7f37a28578a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a2858a00"/>
        <function-ref name="set" scoped="" ref="0x7f37a2855020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x7f37a2853250" loc="51:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a2853250"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a2853e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f37a28523f0" loc="52:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f37a28523f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a2851090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f37a285dcb0" loc="42:../../../../tos/lib/rfxlink/layers/TimeStampingLayerP.nc">
      <component-ref qname="RF230RadioC.TimeStampingLayerC.TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f37a285dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a285b2e0"/>
        <function-ref name="clear" scoped="" ref="0x7f37a285ba10"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a285cb60"/>
        <function-ref name="set" scoped="" ref="0x7f37a2859170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f37a37b2a50" loc="20:../../../../tos/system/LocalTimeMilliC.nc">
      <component-ref qname="LocalTimeMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f37a37b2a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a37af6b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f37a37a0d60" loc="46:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7f37a37a0d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a379d220"/>
        <function-ref name="fired" scoped="" ref="0x7f37a37aa7d0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f37a379e590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f37a379e110"/>
        <function-ref name="getdt" scoped="" ref="0x7f37a379db20"/>
        <function-ref name="gett0" scoped="" ref="0x7f37a379d6a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a37aac50"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f37a37ab980"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f37a379eba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f37a37abe50"/>
        <function-ref name="stop" scoped="" ref="0x7f37a37aa350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f37a379b160" loc="47:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f37a379b160"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a379bd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a37ae540" loc="45:../../../../tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a37ae540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a37ae8c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x7f37a378c910" loc="29:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x7f37a378c910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a3791780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a3790150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a3791c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a3790610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a3799920" loc="27:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a3799920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3799ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x7f37a3796350" loc="28:../../../../tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x7f37a3796350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a3794ba0"/>
        <function-ref name="fired" scoped="" ref="0x7f37a3795b80"/>
        <function-ref name="startAt" scoped="" ref="0x7f37a3794550"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a3794090"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f37a3792090"/>
        <function-ref name="start" scoped="" ref="0x7f37a37951b0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a37956c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f37a368e1d0" loc="61:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f37a368e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a368bb30"/>
        <function-ref name="fired" scoped="" ref="0x7f37a368d9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f37a368b4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a368b020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f37a368a020"/>
        <function-ref name="start" scoped="" ref="0x7f37a368d020"/>
        <function-ref name="stop" scoped="" ref="0x7f37a368d530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a368f980" loc="60:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a368f980"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f37a41ee020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f37a41ee020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a368fd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f37a368a650" loc="62:../../../../tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a368a650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a36895b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a3688020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a3689a70"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a36884e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x7f37a2823190" loc="66:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a2823190"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f37a2823510"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f37a28236a0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f37a2823830"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f37a28239c0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f37a2823b50"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f37a2823ce0"/>
        <function-ref name="getControlB" scoped="" ref="0x7f37a2823e70"/>
        <function-ref name="setControlA" scoped="" ref="0x7f37a2822030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f37a282f9c0" loc="61:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f37a282f9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a282b260"/>
        <function-ref name="fired" scoped="" ref="0x7f37a282d220"/>
        <function-ref name="startAt" scoped="" ref="0x7f37a282dba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a282d6e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f37a282b720"/>
        <function-ref name="start" scoped="" ref="0x7f37a282e810"/>
        <function-ref name="stop" scoped="" ref="0x7f37a282ed20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a282f1b0" loc="60:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a282f1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a282f530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f37a282bd50" loc="62:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a282bd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a282aba0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a2829550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a2829090"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2829a10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x7f37a281e780" loc="68:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f37a281e780"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f37a281eb00"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f37a281ec90"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f37a281ee20"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f37a281d020"/>
        <function-ref name="countBusy" scoped="" ref="0x7f37a281d1b0"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f37a281d340"/>
        <function-ref name="getAssr" scoped="" ref="0x7f37a281d4d0"/>
        <function-ref name="setAssr" scoped="" ref="0x7f37a281d660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x7f37a28223e0" loc="67:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f37a28223e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f37a281fe60"/>
        <function-ref name="fired" scoped="" ref="0x7f37a2820a60"/>
        <function-ref name="get" scoped="" ref="0x7f37a2820090"/>
        <function-ref name="reset" scoped="" ref="0x7f37a281f020"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a281e350"/>
        <function-ref name="set" scoped="" ref="0x7f37a2820550"/>
        <function-ref name="start" scoped="" ref="0x7f37a281f4e0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a281f9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f37a2828020" loc="65:../../../../tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a2828020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f37a2824350"/>
        <function-ref name="test" scoped="" ref="0x7f37a28259a0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2828c50"/>
        <function-ref name="setScale" scoped="" ref="0x7f37a2824810"/>
        <function-ref name="getScale" scoped="" ref="0x7f37a2824d20"/>
        <function-ref name="reset" scoped="" ref="0x7f37a2826b20"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2826660"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a2825e60"/>
        <function-ref name="set" scoped="" ref="0x7f37a2826150"/>
        <function-ref name="start" scoped="" ref="0x7f37a2825020"/>
        <function-ref name="stop" scoped="" ref="0x7f37a28254e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f37a3701c10" loc="82:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a3701c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f37a3700020"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f37a37001b0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f37a3700340"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f37a37004d0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f37a3700660"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f37a37007f0"/>
        <function-ref name="getControlB" scoped="" ref="0x7f37a3700980"/>
        <function-ref name="setControlA" scoped="" ref="0x7f37a3700b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7f37a36fb580" loc="84:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f37a36fb580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f37a36fb900"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f37a36fba90"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f37a36fbc20"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f37a36fbdb0"/>
        <function-ref name="countBusy" scoped="" ref="0x7f37a36fa020"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f37a36fa1b0"/>
        <function-ref name="getAssr" scoped="" ref="0x7f37a36fa340"/>
        <function-ref name="setAssr" scoped="" ref="0x7f37a36fa4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f37a36ff060" loc="83:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f37a36ff060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f37a36fda10"/>
        <function-ref name="fired" scoped="" ref="0x7f37a36fe6c0"/>
        <function-ref name="get" scoped="" ref="0x7f37a36ffc90"/>
        <function-ref name="reset" scoped="" ref="0x7f37a36feb80"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a36fb020"/>
        <function-ref name="set" scoped="" ref="0x7f37a36fe1b0"/>
        <function-ref name="start" scoped="" ref="0x7f37a36fd090"/>
        <function-ref name="stop" scoped="" ref="0x7f37a36fd550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f37a3708910" loc="81:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a3708910"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f37a3703cd0"/>
        <function-ref name="test" scoped="" ref="0x7f37a3703350"/>
        <function-ref name="get" scoped="" ref="0x7f37a37055a0"/>
        <function-ref name="setScale" scoped="" ref="0x7f37a37011b0"/>
        <function-ref name="getScale" scoped="" ref="0x7f37a37016c0"/>
        <function-ref name="reset" scoped="" ref="0x7f37a37044e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a3704020"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a3703810"/>
        <function-ref name="set" scoped="" ref="0x7f37a3705a60"/>
        <function-ref name="start" scoped="" ref="0x7f37a37049a0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3704e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f37a36f2c10" loc="83:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a36f2c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f37a36f1020"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f37a36f11b0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f37a36f1340"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f37a36f14d0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f37a36f1660"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f37a36f17f0"/>
        <function-ref name="getControlB" scoped="" ref="0x7f37a36f1980"/>
        <function-ref name="setControlA" scoped="" ref="0x7f37a36f1b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f37a36ec4c0" loc="85:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f37a36ec4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f37a36ec840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x7f37a36ecc00" loc="86:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x7f37a36ecc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x7f37a36eb020"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x7f37a36eb1b0"/>
        <function-ref name="controlABusy" scoped="" ref="0x7f37a36eb340"/>
        <function-ref name="controlBBusy" scoped="" ref="0x7f37a36eb4d0"/>
        <function-ref name="countBusy" scoped="" ref="0x7f37a36eb660"/>
        <function-ref name="compareABusy" scoped="" ref="0x7f37a36eb7f0"/>
        <function-ref name="getAssr" scoped="" ref="0x7f37a36eb980"/>
        <function-ref name="setAssr" scoped="" ref="0x7f37a36ebb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f37a36f0060" loc="84:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f37a36f0060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f37a36eda10"/>
        <function-ref name="fired" scoped="" ref="0x7f37a36ef6c0"/>
        <function-ref name="get" scoped="" ref="0x7f37a36f0c90"/>
        <function-ref name="reset" scoped="" ref="0x7f37a36efb80"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a36ec020"/>
        <function-ref name="set" scoped="" ref="0x7f37a36ef1b0"/>
        <function-ref name="start" scoped="" ref="0x7f37a36ed090"/>
        <function-ref name="stop" scoped="" ref="0x7f37a36ed550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f37a36f79c0" loc="82:../../../../tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a36f79c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f37a36f4cd0"/>
        <function-ref name="test" scoped="" ref="0x7f37a36f4350"/>
        <function-ref name="get" scoped="" ref="0x7f37a36f6630"/>
        <function-ref name="setScale" scoped="" ref="0x7f37a36f21b0"/>
        <function-ref name="getScale" scoped="" ref="0x7f37a36f26c0"/>
        <function-ref name="reset" scoped="" ref="0x7f37a36f54e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a36f5020"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a36f4810"/>
        <function-ref name="set" scoped="" ref="0x7f37a36f6af0"/>
        <function-ref name="start" scoped="" ref="0x7f37a36f59a0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a36f5e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f37a3655020" loc="74:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x7f37a3655020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a36553a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a3655530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f37a365acd0" loc="49:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f37a365acd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a3656670"/>
        <function-ref name="fired" scoped="" ref="0x7f37a3657550"/>
        <function-ref name="startAt" scoped="" ref="0x7f37a3656020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a3657a10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f37a3656b30"/>
        <function-ref name="start" scoped="" ref="0x7f37a3659b60"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3657090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f37a365f830" loc="48:../../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a365f830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a365bcf0"/>
        <function-ref name="fired" scoped="" ref="0x7f37a365c300"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f37a365b0d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f37a365cc00"/>
        <function-ref name="getdt" scoped="" ref="0x7f37a365a660"/>
        <function-ref name="gett0" scoped="" ref="0x7f37a365a1e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a365c780"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f37a365e480"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f37a365b6e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f37a365e950"/>
        <function-ref name="stop" scoped="" ref="0x7f37a365ee20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f37a3604a00" loc="71:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x7f37a3604a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a3604d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a3603020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f37a3609640" loc="49:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x7f37a3609640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a3605c40"/>
        <function-ref name="fired" scoped="" ref="0x7f37a36061e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f37a3605020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f37a3606ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f37a3604590"/>
        <function-ref name="gett0" scoped="" ref="0x7f37a3604110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a3606660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f37a3608390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f37a3605630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f37a3608860"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3608d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f37a360f150" loc="48:../../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a360f150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a360a700"/>
        <function-ref name="fired" scoped="" ref="0x7f37a360ec30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f37a360ca50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f37a360c5b0"/>
        <function-ref name="getdt" scoped="" ref="0x7f37a3609090"/>
        <function-ref name="gett0" scoped="" ref="0x7f37a360aba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a360c110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f37a360fd60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f37a360a0d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f37a360e2a0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a360e790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f37a3600790" loc="48:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f37a3600790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a35ff3f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f37a35ffa60" loc="49:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a35ffa60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a35f5890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a35f4260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a35f5d50"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a35f4720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f37a35ed2e0" loc="49:../../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x7f37a35ed2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a41439b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f37a4143d20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a35e9870"/>
        <function-ref name="fired" scoped="" ref="0x7f37a35ece40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f37a35eac00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f37a35ea780"/>
        <function-ref name="getdt" scoped="" ref="0x7f37a35e81e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f37a35e9cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a35ea300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f37a35ec020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f37a35e9260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f37a35ec4f0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a35ec9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f37a35d3590" loc="43:../../../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a35d3590"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a35d3910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a35d3aa0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a35d3c30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a35d3dc0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a35b3020"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a35b31b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f37a35b34a0" loc="48:../../../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f37a35b34a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a35b3820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a35b39b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a35b3b40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a35b3cd0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a35b3e60"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a35b2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x7f37a35d49b0" loc="42:../../../../tos/lib/rfxlink/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="RF230RadioC.MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x7f37a35d49b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a35d4d50"/>
        <function-ref name="get" scoped="" ref="0x7f37a35d3020"/>
        <function-ref name="setValue" scoped="" ref="0x7f37a35d31b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a35d3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f37a35b00e0" loc="39:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f37a35b00e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a35b0460"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a35b05f0"/>
        <function-ref name="start" scoped="" ref="0x7f37a35b0780"/>
        <function-ref name="stop" scoped="" ref="0x7f37a35b0910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f37a35adb60" loc="46:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f37a35adb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f37a35ab020"/>
        <function-ref name="request" scoped="" ref="0x7f37a35ab1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a35a7440" loc="59:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a35a7440"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a35a77c0"/>
        <function-ref name="ready" scoped="" ref="0x7f37a35a7950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a35a7ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a35a7d70" loc="60:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a35a7d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a35a6180"/>
        <function-ref name="header" scoped="" ref="0x7f37a35a6310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f37a35afb60" loc="43:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f37a35afb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f37a35ae020"/>
        <function-ref name="turnOn" scoped="" ref="0x7f37a35ae1b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a35ae340"/>
        <function-ref name="done" scoped="" ref="0x7f37a35ae4d0"/>
        <function-ref name="standby" scoped="" ref="0x7f37a35ae660"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a35ae7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f37a35ab400" loc="47:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a35ab400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a35ab780"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a35ab910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a35abaa0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a35abc30"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a35abdc0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a35aa020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x7f37a35a8410" loc="58:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x7f37a35a8410"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f37a35a8890"/>
        <function-ref name="turnOn" scoped="" ref="0x7f37a35a8a20"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a35a8bb0"/>
        <function-ref name="done" scoped="" ref="0x7f37a35a8d40"/>
        <function-ref name="standby" scoped="" ref="0x7f37a35a7020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a35a71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x7f37a35aa2b0" loc="49:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x7f37a35aa2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f37a35aa630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f37a35ad400" loc="45:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f37a35ad400"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a35ad780"/>
        <function-ref name="header" scoped="" ref="0x7f37a35ad910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareReceive" ref="0x7f37a35a9d70" loc="56:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareReceive" scoped="" ref="0x7f37a35a9d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a35a8180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f37a35aa920" loc="54:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x7f37a35aa920"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a35aaca0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a35aae30"/>
        <function-ref name="start" scoped="" ref="0x7f37a35a9020"/>
        <function-ref name="stop" scoped="" ref="0x7f37a35a91b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x7f37a35a6d40" loc="62:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x7f37a35a6d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a35a50e0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a35a5270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a35a5400"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a35a5590"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a35a5720"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a35a58b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f37a35af590" loc="41:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareReceive" scoped="" ref="0x7f37a35af590"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a35af910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f37a35a5b40" loc="64:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f37a35a5b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x7f37a35a4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBareSend" ref="0x7f37a35a9440" loc="55:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubBareSend" scoped="" ref="0x7f37a35a9440"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a35a97c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a35a9950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a35a9ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f37a35aea40" loc="44:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f37a35aea40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a35aedc0"/>
        <function-ref name="ready" scoped="" ref="0x7f37a35ad020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a35ad1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x7f37a35a65a0" loc="61:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x7f37a35a65a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f37a35a6920"/>
        <function-ref name="request" scoped="" ref="0x7f37a35a6ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f37a35b0b60" loc="40:../../../../tos/lib/rfxlink/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x7f37a35b0b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a35af020"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a35af1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a35af340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f37a359b5c0" loc="45:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f37a359b5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f37a359b940"/>
        <function-ref name="request" scoped="" ref="0x7f37a359bad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f37a35963b0" loc="49:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a35963b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3595ac0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3595570"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a3595020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3594090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7f37a3581ca0" loc="64:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7f37a3581ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a35800a0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3580230"/>
        <function-ref name="setValue" scoped="" ref="0x7f37a35803c0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3580550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f37a35852e0" loc="61:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f37a35852e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a3584840"/>
        <function-ref name="clear" scoped="" ref="0x7f37a3583020"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a3584110"/>
        <function-ref name="set" scoped="" ref="0x7f37a3583750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f37a359f610" loc="42:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f37a359f610"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f37a359f990"/>
        <function-ref name="turnOn" scoped="" ref="0x7f37a359fb20"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a359fcb0"/>
        <function-ref name="done" scoped="" ref="0x7f37a359fe40"/>
        <function-ref name="standby" scoped="" ref="0x7f37a359c020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a359c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f37a357f470" loc="66:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a357f470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f37a357f7f0"/>
        <function-ref name="wait" scoped="" ref="0x7f37a357f980"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a357fb10"/>
        <function-ref name="isFree" scoped="" ref="0x7f37a357fca0"/>
        <function-ref name="getNow" scoped="" ref="0x7f37a357fe30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f37a359ae80" loc="48:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f37a359ae80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a35985e0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3598090"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a3599ad0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3598b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f37a359bd90" loc="46:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a359bd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a359a180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a359a310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a359a4a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a359a630"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a359a7c0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a359a950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f37a35861f0" loc="60:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f37a35861f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3586670"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a3586800"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a3586990"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f37a3586b20"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f37a3586cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f37a359cdd0" loc="44:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f37a359cdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a359b180"/>
        <function-ref name="header" scoped="" ref="0x7f37a359b310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f37a358cdd0" loc="55:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f37a358cdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f37a4079180"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a35886e0"/>
        <function-ref name="fired" scoped="" ref="0x7f37a35896b0"/>
        <function-ref name="startAt" scoped="" ref="0x7f37a3588090"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a3589b70"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f37a3588ba0"/>
        <function-ref name="start" scoped="" ref="0x7f37a358aca0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a35891f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f37a3594940" loc="50:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f37a3594940"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3591090"/>
        <function-ref name="get" scoped="" ref="0x7f37a3592af0"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a35925a0"/>
        <function-ref name="set" scoped="" ref="0x7f37a35915e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f37a358da40" loc="54:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a358da40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a358c6b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f37a359c460" loc="43:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f37a359c460"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a359c7e0"/>
        <function-ref name="ready" scoped="" ref="0x7f37a359c970"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a359cb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f37a3591e70" loc="51:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f37a3591e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a358e5e0"/>
        <function-ref name="get" scoped="" ref="0x7f37a358e090"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a358fad0"/>
        <function-ref name="set" scoped="" ref="0x7f37a358eb30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7f37a35808d0" loc="65:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f37a35808d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3580c50"/>
        <function-ref name="get" scoped="" ref="0x7f37a3580de0"/>
        <function-ref name="setValue" scoped="" ref="0x7f37a357f020"/>
        <function-ref name="set" scoped="" ref="0x7f37a357f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7f37a3581110" loc="63:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f37a3581110"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3581490"/>
        <function-ref name="get" scoped="" ref="0x7f37a3581620"/>
        <function-ref name="setValue" scoped="" ref="0x7f37a35817b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3581940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f37a358d1e0" loc="52:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f37a358d1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f37a358d560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f37a357e110" loc="67:../../../../tos/chips/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f37a357e110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f37a357e490"/>
        <function-ref name="suspend" scoped="" ref="0x7f37a357e620"/>
        <function-ref name="resume" scoped="" ref="0x7f37a357e7b0"/>
        <function-ref name="run" scoped="" ref="0x7f37a357e940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x7f37a3575c40" loc="52:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x7f37a3575c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x7f37a3574020"/>
        <function-ref name="request" scoped="" ref="0x7f37a35741b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f37a35554d0" loc="74:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f37a35554d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f37a355b3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x7f37a3570a40" loc="56:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a3570a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a356e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a356fc00"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a356f6b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a356e700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x7f37a35526a0" loc="80:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x7f37a35526a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3552a20"/>
        <function-ref name="get" scoped="" ref="0x7f37a3552bb0"/>
        <function-ref name="setValue" scoped="" ref="0x7f37a3552d40"/>
        <function-ref name="set" scoped="" ref="0x7f37a3551020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x7f37a3577600" loc="47:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x7f37a3577600"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f37a41ee3a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f37a41ee3a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3577980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f37a3550200" loc="83:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f37a3550200"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f37a354f970"/>
        <function-ref name="clear" scoped="" ref="0x7f37a354d0d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f37a354f240"/>
        <function-ref name="set" scoped="" ref="0x7f37a354d800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7f37a3561020" loc="70:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7f37a3561020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a35613a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3561530"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a35616c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3561850"/>
        <function-ref name="get" scoped="" ref="0x7f37a35619e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3561b70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3561d00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a355d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x7f37a354cb70" loc="86:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x7f37a354cb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f37a354b020"/>
        <function-ref name="wait" scoped="" ref="0x7f37a354b1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a354b340"/>
        <function-ref name="isFree" scoped="" ref="0x7f37a354b4d0"/>
        <function-ref name="getNow" scoped="" ref="0x7f37a354b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x7f37a3577c40" loc="49:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x7f37a3577c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x7f37a3576020"/>
        <function-ref name="turnOn" scoped="" ref="0x7f37a35761b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f37a3576340"/>
        <function-ref name="done" scoped="" ref="0x7f37a35764d0"/>
        <function-ref name="standby" scoped="" ref="0x7f37a3576660"/>
        <function-ref name="getChannel" scoped="" ref="0x7f37a35767f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7f37a355b9d0" loc="75:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f37a355b9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a3554630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x7f37a3573550" loc="55:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x7f37a3573550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3572c50"/>
        <function-ref name="get" scoped="" ref="0x7f37a3572700"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a35721b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a35701f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x7f37a3574470" loc="53:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x7f37a3574470"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a35747f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3574980"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3574b10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a3574ca0"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a3574e30"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a3573020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SLP_TR" ref="0x7f37a355edd0" loc="69:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7f37a355edd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3562180"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3562310"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a35624a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3562630"/>
        <function-ref name="get" scoped="" ref="0x7f37a35627c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3562950"/>
        <function-ref name="set" scoped="" ref="0x7f37a3562ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3562c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f37a3554b50" loc="77:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x7f37a3554b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3553020"/>
        <function-ref name="headerLength" scoped="" ref="0x7f37a35531b0"/>
        <function-ref name="metadataLength" scoped="" ref="0x7f37a3553340"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x7f37a35534d0"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x7f37a3553660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x7f37a3575480" loc="51:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x7f37a3575480"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3575800"/>
        <function-ref name="header" scoped="" ref="0x7f37a3575990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="releaseSpi" ref="0x7f37a34b9190" loc="856:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="releaseSpi" scoped="" ref="0x7f37a34b9190"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a34b9510"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a34b96a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f37a356c020" loc="57:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f37a356c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a356b740"/>
        <function-ref name="get" scoped="" ref="0x7f37a356b1f0"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a356cc50"/>
        <function-ref name="set" scoped="" ref="0x7f37a356bc90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f37a3579a60" loc="46:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f37a3579a60"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x7f37a41ee3a0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x7f37a41ee3a0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3579de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f37a3564380" loc="65:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7f37a3564380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f37a3564700"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f37a3564890"/>
        <function-ref name="request" scoped="" ref="0x7f37a3564a20"/>
        <function-ref name="granted" scoped="" ref="0x7f37a3564bb0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f37a3564d40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SELN" ref="0x7f37a3565020" loc="64:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7f37a3565020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a35654a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3565630"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a35657c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3565950"/>
        <function-ref name="get" scoped="" ref="0x7f37a3565ae0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a3565c70"/>
        <function-ref name="set" scoped="" ref="0x7f37a3565e00"/>
        <function-ref name="clr" scoped="" ref="0x7f37a3564020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x7f37a3569560" loc="58:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x7f37a3569560"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3568c90"/>
        <function-ref name="get" scoped="" ref="0x7f37a3568740"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a35681f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3567230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x7f37a3576aa0" loc="50:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x7f37a3576aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3576e20"/>
        <function-ref name="ready" scoped="" ref="0x7f37a3575020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a35751b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IRQ" ref="0x7f37a3558b30" loc="72:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f37a3558b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f37a355c020"/>
        <function-ref name="disable" scoped="" ref="0x7f37a355c1b0"/>
        <function-ref name="captured" scoped="" ref="0x7f37a355c340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f37a355c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FastSpiByte" ref="0x7f37a355e270" loc="67:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f37a355e270"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f37a355e5f0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f37a355e780"/>
        <function-ref name="splitRead" scoped="" ref="0x7f37a355e910"/>
        <function-ref name="write" scoped="" ref="0x7f37a355eaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x7f37a35513a0" loc="81:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x7f37a35513a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3551720"/>
        <function-ref name="get" scoped="" ref="0x7f37a35518b0"/>
        <function-ref name="setValue" scoped="" ref="0x7f37a3551a40"/>
        <function-ref name="set" scoped="" ref="0x7f37a3551bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x7f37a3553a10" loc="79:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x7f37a3553a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3553d90"/>
        <function-ref name="get" scoped="" ref="0x7f37a3552020"/>
        <function-ref name="setValue" scoped="" ref="0x7f37a35521b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3552340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f37a35678b0" loc="59:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f37a35678b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f37a3567c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x7f37a354c080" loc="85:../../../../tos/chips/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x7f37a354c080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x7f37a354c400"/>
        <function-ref name="suspend" scoped="" ref="0x7f37a354c590"/>
        <function-ref name="resume" scoped="" ref="0x7f37a354c720"/>
        <function-ref name="run" scoped="" ref="0x7f37a354c8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7f37a34747f0" loc="46:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x7f37a34747f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3474b70"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a3474d00"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3473020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a34731b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3473340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a34734d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3473660"/>
        <function-ref name="clr" scoped="" ref="0x7f37a34737f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SLP_TR" ref="0x7f37a34754e0" loc="45:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x7f37a34754e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a3475860"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a34759f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3475b80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a3475d10"/>
        <function-ref name="get" scoped="" ref="0x7f37a3474020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a34741b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3474340"/>
        <function-ref name="clr" scoped="" ref="0x7f37a34744d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f37a3472ac0" loc="49:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f37a3472ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a346e390"/>
        <function-ref name="fired" scoped="" ref="0x7f37a3470360"/>
        <function-ref name="startAt" scoped="" ref="0x7f37a3470ce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a3470820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f37a346e850"/>
        <function-ref name="start" scoped="" ref="0x7f37a3471970"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3471e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiResource" ref="0x7f37a3477b50" loc="42:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x7f37a3477b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f37a3476020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f37a34761b0"/>
        <function-ref name="request" scoped="" ref="0x7f37a3476340"/>
        <function-ref name="granted" scoped="" ref="0x7f37a34764d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f37a3476660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SELN" ref="0x7f37a347a940" loc="41:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x7f37a347a940"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a347acc0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a347ae50"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a3477020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a34771b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3477340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a34774d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3477660"/>
        <function-ref name="clr" scoped="" ref="0x7f37a34777f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7f37a3473b10" loc="48:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f37a3473b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f37a3472020"/>
        <function-ref name="disable" scoped="" ref="0x7f37a34721b0"/>
        <function-ref name="captured" scoped="" ref="0x7f37a3472340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f37a34724d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f37a3476920" loc="43:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f37a3476920"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f37a3476ca0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f37a3476e30"/>
        <function-ref name="splitRead" scoped="" ref="0x7f37a3475020"/>
        <function-ref name="write" scoped="" ref="0x7f37a34751b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x7f37a346d020" loc="50:../../../../tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x7f37a346d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TRadio" ref="0x7f37a407ad20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a346dc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortCLKM" ref="0x7f37a345c3d0" loc="46:../../../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortCLKM" scoped="" ref="0x7f37a345c3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a345c750"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a345c8e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a345ca70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a345cc00"/>
        <function-ref name="get" scoped="" ref="0x7f37a345cd90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a345b020"/>
        <function-ref name="set" scoped="" ref="0x7f37a345b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a345b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Capture" ref="0x7f37a34607f0" loc="45:../../../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f37a34607f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f37a345ee60"/>
        <function-ref name="test" scoped="" ref="0x7f37a345e4e0"/>
        <function-ref name="get" scoped="" ref="0x7f37a34674c0"/>
        <function-ref name="captured" scoped="" ref="0x7f37a3466020"/>
        <function-ref name="reset" scoped="" ref="0x7f37a3466530"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a345e9a0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3467980"/>
        <function-ref name="start" scoped="" ref="0x7f37a34669f0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a345e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortIRQ" ref="0x7f37a345b680" loc="47:../../../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortIRQ" scoped="" ref="0x7f37a345b680"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a345ba00"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a345bb90"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a345bd20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a345a020"/>
        <function-ref name="get" scoped="" ref="0x7f37a345a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a345a340"/>
        <function-ref name="set" scoped="" ref="0x7f37a345a4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a345a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x7f37a3469680" loc="40:../../../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x7f37a3469680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a3469a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x7f37a346c9c0" loc="39:../../../../tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x7f37a346c9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f37a346cd40"/>
        <function-ref name="disable" scoped="" ref="0x7f37a3469020"/>
        <function-ref name="captured" scoped="" ref="0x7f37a34691b0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f37a3469340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f37a3440c80" loc="84:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7f37a3440c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a34480a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3448230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f37a3449840" loc="82:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7f37a3449840"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f37a3449bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a344c1f0" loc="81:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a344c1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a344c570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f37a344b020" loc="83:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f37a344b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f37a344b3a0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f37a344b530"/>
        <function-ref name="splitRead" scoped="" ref="0x7f37a344b6c0"/>
        <function-ref name="write" scoped="" ref="0x7f37a344b850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f37a3448a60" loc="85:../../../../tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f37a3448a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f37a3448de0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f37a3447020"/>
        <function-ref name="request" scoped="" ref="0x7f37a34471b0"/>
        <function-ref name="granted" scoped="" ref="0x7f37a3447340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f37a34474d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f37a343cd70" loc="95:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f37a343cd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f37a343a180"/>
        <function-ref name="configure" scoped="" ref="0x7f37a343a310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="zeroTask" ref="0x7f37a33fdde0" loc="294:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="zeroTask" scoped="" ref="0x7f37a33fdde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a33fc180"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a33fc310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f37a343c020" loc="94:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x7f37a343c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a343c3a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a343c530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f37a343ee00" loc="92:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x7f37a343ee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f37a343d1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a343e7e0" loc="91:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a343e7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a343eb60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Spi" ref="0x7f37a341e800" loc="98:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Spi" scoped="" ref="0x7f37a341e800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f37a341eb80"/>
        <function-ref name="sleep" scoped="" ref="0x7f37a341d1b0"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f37a3439020"/>
        <function-ref name="dataReady" scoped="" ref="0x7f37a341d340"/>
        <function-ref name="initMaster" scoped="" ref="0x7f37a3439340"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f37a34394d0"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f37a3439660"/>
        <function-ref name="read" scoped="" ref="0x7f37a34397f0"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f37a3439980"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f37a3439b10"/>
        <function-ref name="setClock" scoped="" ref="0x7f37a3439ca0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f37a3439e30"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f37a3438020"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f37a34382b0"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f37a3438440"/>
        <function-ref name="write" scoped="" ref="0x7f37a34385d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f37a3438760"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f37a34388f0"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f37a3438a80"/>
        <function-ref name="getClock" scoped="" ref="0x7f37a3438c10"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f37a3438da0"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f37a341ed10"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f37a34391b0"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f37a341d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f37a343d480" loc="93:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x7f37a343d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f37a343d800"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f37a343d990"/>
        <function-ref name="splitRead" scoped="" ref="0x7f37a343db20"/>
        <function-ref name="write" scoped="" ref="0x7f37a343dcb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7f37a341d620" loc="99:../../../../tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f37a341d620"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f37a341d9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiBus" ref="0x7f37a33de710" loc="76:../../../../tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <component-ref qname="HplAtm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiBus" scoped="" ref="0x7f37a33de710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f37a33dea90"/>
        <function-ref name="sleep" scoped="" ref="0x7f37a33d9020"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f37a33dedb0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f37a33d91b0"/>
        <function-ref name="initMaster" scoped="" ref="0x7f37a33db1b0"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f37a33db340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f37a33db4d0"/>
        <function-ref name="read" scoped="" ref="0x7f37a33db660"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f37a33db7f0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f37a33db980"/>
        <function-ref name="setClock" scoped="" ref="0x7f37a33dbb10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f37a33dbca0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f37a33dbe30"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f37a33da120"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f37a33da2b0"/>
        <function-ref name="write" scoped="" ref="0x7f37a33da440"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f37a33da5d0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f37a33da760"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f37a33da8f0"/>
        <function-ref name="getClock" scoped="" ref="0x7f37a33daa80"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f37a33dac10"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f37a33dec20"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f37a33db020"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f37a33dada0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MISO" ref="0x7f37a33cde30" loc="81:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MISO" scoped="" ref="0x7f37a33cde30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a33cc1e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a33cc370"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a33cc500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a33cc690"/>
        <function-ref name="get" scoped="" ref="0x7f37a33cc820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a33cc9b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a33ccb40"/>
        <function-ref name="clr" scoped="" ref="0x7f37a33cccd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x7f37a33d1970" loc="79:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0x7f37a33d1970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a33d1cf0"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a33d1e80"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a33ce030"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a33ce1c0"/>
        <function-ref name="get" scoped="" ref="0x7f37a33ce350"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a33ce4e0"/>
        <function-ref name="set" scoped="" ref="0x7f37a33ce670"/>
        <function-ref name="clr" scoped="" ref="0x7f37a33ce800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SS" ref="0x7f37a33d26c0" loc="78:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SS" scoped="" ref="0x7f37a33d26c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a33d2a40"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a33d2bd0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a33d2d60"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a33d1020"/>
        <function-ref name="get" scoped="" ref="0x7f37a33d11b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a33d1340"/>
        <function-ref name="set" scoped="" ref="0x7f37a33d14d0"/>
        <function-ref name="clr" scoped="" ref="0x7f37a33d1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f37a33d0e00" loc="75:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f37a33d0e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a33d21c0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a33d2350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Mcu" ref="0x7f37a33cb060" loc="82:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Mcu" scoped="" ref="0x7f37a33cb060"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f37a33cb3e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SPI" ref="0x7f37a33d66b0" loc="74:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SPI" scoped="" ref="0x7f37a33d66b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x7f37a33d6a30"/>
        <function-ref name="sleep" scoped="" ref="0x7f37a33d3020"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x7f37a33d6d50"/>
        <function-ref name="dataReady" scoped="" ref="0x7f37a33d31b0"/>
        <function-ref name="initMaster" scoped="" ref="0x7f37a33d51b0"/>
        <function-ref name="setMasterBit" scoped="" ref="0x7f37a33d5340"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x7f37a33d54d0"/>
        <function-ref name="read" scoped="" ref="0x7f37a33d5660"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x7f37a33d57f0"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x7f37a33d5980"/>
        <function-ref name="setClock" scoped="" ref="0x7f37a33d5b10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f37a33d5ca0"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x7f37a33d5e30"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x7f37a33d4120"/>
        <function-ref name="setDataOrder" scoped="" ref="0x7f37a33d42b0"/>
        <function-ref name="write" scoped="" ref="0x7f37a33d4440"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f37a33d45d0"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x7f37a33d4760"/>
        <function-ref name="getClockPhase" scoped="" ref="0x7f37a33d48f0"/>
        <function-ref name="getClock" scoped="" ref="0x7f37a33d4a80"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x7f37a33d4c10"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x7f37a33d6bc0"/>
        <function-ref name="setClockPhase" scoped="" ref="0x7f37a33d5020"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x7f37a33d4da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MOSI" ref="0x7f37a33ceb20" loc="80:../../../../tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MOSI" scoped="" ref="0x7f37a33ceb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f37a33cd020"/>
        <function-ref name="isInput" scoped="" ref="0x7f37a33cd1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f37a33cd340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f37a33cd4d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a33cd660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f37a33cd7f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a33cd980"/>
        <function-ref name="clr" scoped="" ref="0x7f37a33cdb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f37a33806c0" loc="86:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f37a33806c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f37a3380a60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f37a3380bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f37a337f730" loc="89:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f37a337f730"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f37a337fad0"/>
        <function-ref name="configure" scoped="" ref="0x7f37a337fc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f37a3382900" loc="85:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f37a3382900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f37a3382ca0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f37a3382e30"/>
        <function-ref name="request" scoped="" ref="0x7f37a3380020"/>
        <function-ref name="granted" scoped="" ref="0x7f37a33801b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f37a3380340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f37a3380e40" loc="87:../../../../tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f37a3380e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f37a337f1e0"/>
        <function-ref name="userId" scoped="" ref="0x7f37a337f370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a2791d70" loc="44:../../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a2791d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a2790180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f37a2790410" loc="45:../../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x7f37a2790410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f37a2790790"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f37a2790920"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f37a2790ab0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f37a2790c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f37a278c220" loc="52:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x7f37a278c220"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f37a278c5c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f37a278c750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f37a278b400" loc="56:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f37a278b400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f37a278b7a0"/>
        <function-ref name="configure" scoped="" ref="0x7f37a278b930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f37a278bbc0" loc="57:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x7f37a278bbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f37a278a020"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f37a278a1b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f37a278a340"/>
        <function-ref name="dequeue" scoped="" ref="0x7f37a278a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f37a278e490" loc="51:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x7f37a278e490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f37a278e830"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f37a278e9c0"/>
        <function-ref name="request" scoped="" ref="0x7f37a278eb50"/>
        <function-ref name="granted" scoped="" ref="0x7f37a278ece0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f37a278ee70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f37a278c9a0" loc="53:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f37a278c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f37a278cd20"/>
        <function-ref name="userId" scoped="" ref="0x7f37a278b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f37a278a7a0" loc="68:../../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x7f37a278a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a278ab20"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a278acb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f37a336e020" loc="80:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a336e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f37a336e3a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f37a336e530"/>
        <function-ref name="getControlA" scoped="" ref="0x7f37a336e6c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f37a336e850"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f37a336e9e0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f37a336eb70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f37a336ed00"/>
        <function-ref name="getControlB" scoped="" ref="0x7f37a336d020"/>
        <function-ref name="setControlC" scoped="" ref="0x7f37a336d1b0"/>
        <function-ref name="setControlA" scoped="" ref="0x7f37a336d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f37a336d850" loc="81:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f37a336d850"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f37a3363e60"/>
        <function-ref name="test" scoped="" ref="0x7f37a33634e0"/>
        <function-ref name="get" scoped="" ref="0x7f37a33664c0"/>
        <function-ref name="captured" scoped="" ref="0x7f37a3364020"/>
        <function-ref name="reset" scoped="" ref="0x7f37a3364530"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a33639a0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3366980"/>
        <function-ref name="start" scoped="" ref="0x7f37a33649f0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3363020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f37a3362ad0" loc="82:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f37a3362ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f37a335e4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f37a335f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3361790"/>
        <function-ref name="reset" scoped="" ref="0x7f37a335f670"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a335e9a0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3361c50"/>
        <function-ref name="start" scoped="" ref="0x7f37a335fb30"/>
        <function-ref name="stop" scoped="" ref="0x7f37a335e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f37a3377bf0" loc="79:../../../../tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a3377bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f37a3371020"/>
        <function-ref name="test" scoped="" ref="0x7f37a33725d0"/>
        <function-ref name="get" scoped="" ref="0x7f37a33748a0"/>
        <function-ref name="setScale" scoped="" ref="0x7f37a33714e0"/>
        <function-ref name="getScale" scoped="" ref="0x7f37a33719f0"/>
        <function-ref name="reset" scoped="" ref="0x7f37a3373760"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a33732a0"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a3372a90"/>
        <function-ref name="set" scoped="" ref="0x7f37a3374d60"/>
        <function-ref name="start" scoped="" ref="0x7f37a3373c20"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3372110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f37a33542c0" loc="80:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a33542c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f37a3354640"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f37a33547d0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f37a3354960"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f37a3354af0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f37a3354c80"/>
        <function-ref name="setControlB" scoped="" ref="0x7f37a3354e10"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f37a3353020"/>
        <function-ref name="getControlB" scoped="" ref="0x7f37a33531b0"/>
        <function-ref name="setControlC" scoped="" ref="0x7f37a3353340"/>
        <function-ref name="setControlA" scoped="" ref="0x7f37a33534d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7f37a334e5a0" loc="82:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7f37a334e5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f37a334a020"/>
        <function-ref name="fired" scoped="" ref="0x7f37a334dc10"/>
        <function-ref name="get" scoped="" ref="0x7f37a334d240"/>
        <function-ref name="reset" scoped="" ref="0x7f37a334c110"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a334a4e0"/>
        <function-ref name="set" scoped="" ref="0x7f37a334d700"/>
        <function-ref name="start" scoped="" ref="0x7f37a334c5d0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a334ca90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f37a33539e0" loc="81:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f37a33539e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f37a334fe60"/>
        <function-ref name="test" scoped="" ref="0x7f37a334f4e0"/>
        <function-ref name="get" scoped="" ref="0x7f37a33526b0"/>
        <function-ref name="captured" scoped="" ref="0x7f37a33510d0"/>
        <function-ref name="reset" scoped="" ref="0x7f37a33515e0"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a334f9a0"/>
        <function-ref name="set" scoped="" ref="0x7f37a3352b70"/>
        <function-ref name="start" scoped="" ref="0x7f37a3351aa0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a334f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7f37a334aba0" loc="83:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7f37a334aba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f37a3346550"/>
        <function-ref name="fired" scoped="" ref="0x7f37a33481f0"/>
        <function-ref name="get" scoped="" ref="0x7f37a33497f0"/>
        <function-ref name="reset" scoped="" ref="0x7f37a33486b0"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a3346a10"/>
        <function-ref name="set" scoped="" ref="0x7f37a3349cb0"/>
        <function-ref name="start" scoped="" ref="0x7f37a3348b70"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3346090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7f37a3345120" loc="84:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7f37a3345120"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f37a3343a90"/>
        <function-ref name="fired" scoped="" ref="0x7f37a3344770"/>
        <function-ref name="get" scoped="" ref="0x7f37a3345d50"/>
        <function-ref name="reset" scoped="" ref="0x7f37a3344c30"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a3341020"/>
        <function-ref name="set" scoped="" ref="0x7f37a3344260"/>
        <function-ref name="start" scoped="" ref="0x7f37a3343110"/>
        <function-ref name="stop" scoped="" ref="0x7f37a33435d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f37a3359020" loc="79:../../../../tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a3359020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f37a3355350"/>
        <function-ref name="test" scoped="" ref="0x7f37a33579a0"/>
        <function-ref name="get" scoped="" ref="0x7f37a3359c50"/>
        <function-ref name="setScale" scoped="" ref="0x7f37a3355810"/>
        <function-ref name="getScale" scoped="" ref="0x7f37a3355d20"/>
        <function-ref name="reset" scoped="" ref="0x7f37a3358b20"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a3358660"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a3357e60"/>
        <function-ref name="set" scoped="" ref="0x7f37a3358150"/>
        <function-ref name="start" scoped="" ref="0x7f37a3357020"/>
        <function-ref name="stop" scoped="" ref="0x7f37a33574e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f37a32756e0" loc="30:../../../../tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="HplRF230C.AlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f37a32756e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TOne" ref="0x7f37a40fd410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a3271020"/>
        <function-ref name="fired" scoped="" ref="0x7f37a3273020"/>
        <function-ref name="startAt" scoped="" ref="0x7f37a32739a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a32734e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f37a32714e0"/>
        <function-ref name="start" scoped="" ref="0x7f37a32745b0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3274ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a32beb50" loc="46:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a32beb50"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f37a41ee020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f37a41ee020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a32b2020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f37a32b2410" loc="47:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a32b2410"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f37a32ae810"/>
        <function-ref name="test" scoped="" ref="0x7f37a32b0e60"/>
        <function-ref name="get" scoped="" ref="0x7f37a32b1090"/>
        <function-ref name="setScale" scoped="" ref="0x7f37a32aecd0"/>
        <function-ref name="getScale" scoped="" ref="0x7f37a32ad260"/>
        <function-ref name="reset" scoped="" ref="0x7f37a32b0020"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a32b1a60"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a32ae350"/>
        <function-ref name="set" scoped="" ref="0x7f37a32b1550"/>
        <function-ref name="start" scoped="" ref="0x7f37a32b04e0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a32b09a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f37a274f870" loc="55:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x7f37a274f870"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x7f37a41efc00"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x7f37a41efc00"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TOne" ref="0x7f37a40fd410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f37a274b090"/>
        <function-ref name="fired" scoped="" ref="0x7f37a274d090"/>
        <function-ref name="startAt" scoped="" ref="0x7f37a274da10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f37a274d550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f37a274b550"/>
        <function-ref name="start" scoped="" ref="0x7f37a274e6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a274ebb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x7f37a2746db0" loc="58:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x7f37a2746db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f37a27439a0"/>
        <function-ref name="fired" scoped="" ref="0x7f37a2744530"/>
        <function-ref name="get" scoped="" ref="0x7f37a2745a10"/>
        <function-ref name="reset" scoped="" ref="0x7f37a27449f0"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a2743e60"/>
        <function-ref name="set" scoped="" ref="0x7f37a2744020"/>
        <function-ref name="start" scoped="" ref="0x7f37a2743020"/>
        <function-ref name="stop" scoped="" ref="0x7f37a27434e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x7f37a274baa0" loc="57:../../../../tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x7f37a274baa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f37a2748e60"/>
        <function-ref name="test" scoped="" ref="0x7f37a27484e0"/>
        <function-ref name="get" scoped="" ref="0x7f37a274a6f0"/>
        <function-ref name="setScale" scoped="" ref="0x7f37a2746350"/>
        <function-ref name="getScale" scoped="" ref="0x7f37a2746860"/>
        <function-ref name="reset" scoped="" ref="0x7f37a27495d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2749110"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a27489a0"/>
        <function-ref name="set" scoped="" ref="0x7f37a274abb0"/>
        <function-ref name="start" scoped="" ref="0x7f37a2749a90"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2748020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f37a326d3a0" loc="39:../../../../tos/platforms/iris/LocalTimeMicroC.nc">
      <component-ref qname="LocalTimeMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f37a326d3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a326c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f37a3269200" loc="24:../../../../tos/platforms/mica/CounterOne16C.nc">
      <component-ref qname="CounterOne16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a3269200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TOne" ref="0x7f37a40fd410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a3268090"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a3268a10"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a3268550"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a3266020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f37a3252020" loc="45:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a3252020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TOne" ref="0x7f37a40fd410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a3252e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a3251800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a3251340"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a3251cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f37a3250280" loc="46:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a3250280"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f37a324c810"/>
        <function-ref name="test" scoped="" ref="0x7f37a324de60"/>
        <function-ref name="get" scoped="" ref="0x7f37a324f020"/>
        <function-ref name="setScale" scoped="" ref="0x7f37a324ccd0"/>
        <function-ref name="getScale" scoped="" ref="0x7f37a324b260"/>
        <function-ref name="reset" scoped="" ref="0x7f37a324d020"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a324f9f0"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a324c350"/>
        <function-ref name="set" scoped="" ref="0x7f37a324f4e0"/>
        <function-ref name="start" scoped="" ref="0x7f37a324d4e0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a324d9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f37a32290f0" loc="63:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f37a32290f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a3228020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a32289a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a32284e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a3228e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f37a3247cf0" loc="62:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a3247cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a322cb60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a322b550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a322b090"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a322ba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f37a3226b60" loc="48:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x7f37a3226b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a32247d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f37a3224e40" loc="49:../../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a3224e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a3223ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a3222670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a32221b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a3222b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f37a321b9a0" loc="36:../../../../tos/platforms/micaz/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x7f37a321b9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f37a32177e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f37a31c2710" loc="46:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f37a31c2710"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a31c2a90"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a31c2c20"/>
        <function-ref name="start" scoped="" ref="0x7f37a31c2db0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a31bf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f37a31bf7f0" loc="47:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f37a31bf7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a31bfb70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a31bfd00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a31be020"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a31be1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a31be340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f37a31bc2b0" loc="49:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f37a31bc2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a31bc630"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a31bc7c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a31bc950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a31bcae0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a31bcc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a31beb20" loc="48:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a31beb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a31bc020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f37a31b9300" loc="53:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f37a31b9300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f37a31b9680"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f37a31b9810"/>
        <function-ref name="led1On" scoped="" ref="0x7f37a31b99a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f37a31b9b30"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f37a31b9cc0"/>
        <function-ref name="get" scoped="" ref="0x7f37a31b9e50"/>
        <function-ref name="led1Off" scoped="" ref="0x7f37a31b8020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f37a31b8660"/>
        <function-ref name="set" scoped="" ref="0x7f37a31b81b0"/>
        <function-ref name="led0On" scoped="" ref="0x7f37a31b8340"/>
        <function-ref name="led2On" scoped="" ref="0x7f37a31b84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f37a31ba800" loc="51:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a31ba800"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f37a31bab80"/>
        <function-ref name="noAck" scoped="" ref="0x7f37a31bad10"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f37a31b9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f37a31bb020" loc="50:../../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f37a31bb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f37a31bb3a0"/>
        <function-ref name="source" scoped="" ref="0x7f37a31bb530"/>
        <function-ref name="address" scoped="" ref="0x7f37a31bb6c0"/>
        <function-ref name="destination" scoped="" ref="0x7f37a31bb850"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a31bb9e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a31bbb70"/>
        <function-ref name="type" scoped="" ref="0x7f37a31bbd00"/>
        <function-ref name="setType" scoped="" ref="0x7f37a31ba020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a31ba1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f37a31ba340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f37a31ba4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f37a3156d90" loc="54:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x7f37a3156d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3155180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3155310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a31554a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a3155630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a31557c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f37a3155a50" loc="55:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x7f37a3155a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3155dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f37a31b6b40" loc="47:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x7f37a31b6b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a3159020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a31591b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3159340"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a31594d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a3159660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f37a3157720" loc="50:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x7f37a3157720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a3157aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f37a3157c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a3157dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a3156020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f37a31561b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a31599e0" loc="48:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a31599e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a3159d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f37a3156400" loc="51:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f37a3156400"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f37a3156780"/>
        <function-ref name="noAck" scoped="" ref="0x7f37a3156910"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f37a3156aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f37a3158020" loc="49:../../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x7f37a3158020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f37a31583a0"/>
        <function-ref name="source" scoped="" ref="0x7f37a3158530"/>
        <function-ref name="address" scoped="" ref="0x7f37a31586c0"/>
        <function-ref name="destination" scoped="" ref="0x7f37a3158850"/>
        <function-ref name="setSource" scoped="" ref="0x7f37a31589e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f37a3158b70"/>
        <function-ref name="type" scoped="" ref="0x7f37a3158d00"/>
        <function-ref name="setType" scoped="" ref="0x7f37a3157020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f37a31571b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f37a3157340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f37a31574d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f37a314f4e0" loc="50:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f37a314f4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a314f860"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a314f9f0"/>
        <function-ref name="start" scoped="" ref="0x7f37a314fb80"/>
        <function-ref name="stop" scoped="" ref="0x7f37a314fd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f37a314d020" loc="52:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f37a314d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f37a4060be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a314d3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a314d530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a314d6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a314d850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a314d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a3152e50" loc="49:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a3152e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a314f210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a314e4c0" loc="51:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a314e4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f37a4060be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a314e840"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f37a314c940" loc="56:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f37a314c940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f37a314ccc0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f37a314ce50"/>
        <function-ref name="led1On" scoped="" ref="0x7f37a314b020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f37a314b1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f37a314b340"/>
        <function-ref name="get" scoped="" ref="0x7f37a314b4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f37a314b660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f37a314bca0"/>
        <function-ref name="set" scoped="" ref="0x7f37a314b7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f37a314b980"/>
        <function-ref name="led2On" scoped="" ref="0x7f37a314bb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f37a314c020" loc="55:../../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f37a314c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f37a4060be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f37a314c3a0"/>
        <function-ref name="offset" scoped="" ref="0x7f37a314c530"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f37a314c6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f37a3126c80" loc="66:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x7f37a3126c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f37a31250a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f37a3125230"/>
        <function-ref name="start" scoped="" ref="0x7f37a31253c0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3125550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f37a30bfe40" loc="332:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x7f37a30bfe40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a30be1e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a30be370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f37a3110530" loc="74:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x7f37a3110530"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a31108b0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a3110a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f37a30f6d50" loc="191:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x7f37a30f6d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a30f5100"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a30f5290"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a3126630" loc="65:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a3126630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a31269b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f37a310e130" loc="75:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x7f37a310e130"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f37a310e4b0"/>
        <function-ref name="flush" scoped="" ref="0x7f37a310e640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f37a30c1400" loc="322:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x7f37a30c1400"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a30c1780"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a30c1910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f37a3115410" loc="72:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f37a3115410"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f37a3115790"/>
        <function-ref name="resetSend" scoped="" ref="0x7f37a3115920"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f37a3115ab0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f37a3115c40"/>
        <function-ref name="putData" scoped="" ref="0x7f37a3115dd0"/>
        <function-ref name="putDone" scoped="" ref="0x7f37a311e020"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f37a311e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f37a311e430" loc="73:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f37a311e430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f37a311e7b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f37a311e940"/>
        <function-ref name="led1On" scoped="" ref="0x7f37a311ead0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f37a311ec60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f37a311edf0"/>
        <function-ref name="get" scoped="" ref="0x7f37a311b020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f37a311b1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f37a311b7f0"/>
        <function-ref name="set" scoped="" ref="0x7f37a311b340"/>
        <function-ref name="led0On" scoped="" ref="0x7f37a311b4d0"/>
        <function-ref name="led2On" scoped="" ref="0x7f37a311b660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f37a30ba0c0" loc="341:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f37a30ba0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a30ba440"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a30ba5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f37a3120b10" loc="67:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7f37a3120b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f37a3124020"/>
        <function-ref name="nextByte" scoped="" ref="0x7f37a31241b0"/>
        <function-ref name="startSend" scoped="" ref="0x7f37a3124340"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f37a31244d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f37a3123080" loc="68:../../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f37a3123080"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f37a3123400"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f37a3123590"/>
        <function-ref name="endPacket" scoped="" ref="0x7f37a3123720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f37a2ff0c50" loc="275:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x7f37a2ff0c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a2fef020"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a2fef1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f37a2ff5830" loc="51:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x7f37a2ff5830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f37a4060be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a2ff5bd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f37a2ff5d60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f37a2ff3020"/>
        <function-ref name="cancel" scoped="" ref="0x7f37a2ff31b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a2ff3340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f37a2fef480" loc="158:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x7f37a2fef480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f37a2fef800"/>
        <function-ref name="runTask" scoped="" ref="0x7f37a2fef990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f37a2ff5110" loc="50:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x7f37a2ff5110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f37a4060be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f37a2ff54b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f37a2ff3760" loc="54:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x7f37a2ff3760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f37a4060be0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f37a2ff3b00"/>
        <function-ref name="offset" scoped="" ref="0x7f37a2ff3c90"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f37a2ff3e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f37a2ff1590" loc="57:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f37a2ff1590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f37a2ff1910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f37a2ff1aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f37a2ff1c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f37a2ff1dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f37a2ff0020"/>
        <function-ref name="get" scoped="" ref="0x7f37a2ff01b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f37a2ff0340"/>
        <function-ref name="led2On" scoped="" ref="0x7f37a2ff0980"/>
        <function-ref name="set" scoped="" ref="0x7f37a2ff0660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f37a2ff04d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f37a2ff07f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f37a2ff29d0" loc="56:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x7f37a2ff29d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f37a2ff2d50"/>
        <function-ref name="nextByte" scoped="" ref="0x7f37a2ff1020"/>
        <function-ref name="startSend" scoped="" ref="0x7f37a2ff11b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f37a2ff1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f37a2ff20e0" loc="55:../../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f37a2ff20e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f37a2ff2460"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f37a2ff25f0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f37a2ff2780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f37a2fdfd20" loc="50:../../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f37a2fdfd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a2fe90e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f37a2fe9270"/>
        <function-ref name="receive" scoped="" ref="0x7f37a2fe9400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f37a2fe9590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f37a2fe9720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f37a2fe98b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a2fe9a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f37a2fedb60" loc="48:../../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f37a2fedb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f37a2fea020"/>
        <function-ref name="resetSend" scoped="" ref="0x7f37a2fea1b0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f37a2fea340"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f37a2fea4d0"/>
        <function-ref name="putData" scoped="" ref="0x7f37a2fea660"/>
        <function-ref name="putDone" scoped="" ref="0x7f37a2fea7f0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f37a2fea980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f37a2fe9cc0" loc="51:../../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x7f37a2fe9cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f37a2fe80a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f37a2fe8230"/>
        <function-ref name="led1On" scoped="" ref="0x7f37a2fe83c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f37a2fe8550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f37a2fe86e0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2fe8870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f37a2fe8a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f37a2fdd1b0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2fe8b90"/>
        <function-ref name="led0On" scoped="" ref="0x7f37a2fe8d20"/>
        <function-ref name="led2On" scoped="" ref="0x7f37a2fdd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f37a2fc0020" loc="42:../../../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f37a2fc0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a2fc03a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f37a2fc0530"/>
        <function-ref name="receive" scoped="" ref="0x7f37a2fc06c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f37a2fc0850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f37a2fc2960" loc="41:../../../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f37a2fc2960"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a2fc2ce0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f37a2fc2e70"/>
        <function-ref name="receive" scoped="" ref="0x7f37a2fc1030"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f37a2fc11c0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f37a2fc1350"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f37a2fc14e0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a2fc1670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f37a2fc2150" loc="40:../../../../tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f37a2fc2150"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2fc24d0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2fc2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f37a2fbccb0" loc="41:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f37a2fbccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a2fb80a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f37a2fb8230"/>
        <function-ref name="receive" scoped="" ref="0x7f37a2fb83c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f37a2fb8550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f37a2fb8850" loc="42:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f37a2fb8850"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a2fb8bd0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f37a2fb8d60"/>
        <function-ref name="receive" scoped="" ref="0x7f37a2fb7020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f37a2fb71b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f37a2fb7340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f37a2fb74d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a2fb7660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f37a2fb7c20" loc="43:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a2fb7c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a2fb6a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a2fb54e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a2fb5020"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2fb59a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f37a2fbc4b0" loc="40:../../../../tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f37a2fbc4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2fbc830"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2fbc9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f37a2f6c5a0" loc="50:../../../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x7f37a2f6c5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a2f6c920"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f37a2f6cab0"/>
        <function-ref name="receive" scoped="" ref="0x7f37a2f6cc40"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f37a2f6cdd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x7f37a2f6a0a0" loc="53:../../../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x7f37a2f6a0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2f6a420"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2f6a5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a2fb2770" loc="48:../../../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a2fb2770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a2fb2af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f37a2f6b0c0" loc="51:../../../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x7f37a2f6b0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f37a2f6b440"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f37a2f6b5d0"/>
        <function-ref name="receive" scoped="" ref="0x7f37a2f6b760"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f37a2f6b8f0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f37a2f6ba80"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f37a2f6bc10"/>
        <function-ref name="sendDone" scoped="" ref="0x7f37a2f6bda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f37a2f67810" loc="56:../../../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a2f67810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a2f666a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a2f65090"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a2f66b60"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2f65550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x7f37a2f680a0" loc="55:../../../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x7f37a2f680a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f37a2f68420"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f37a2f685b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7f37a2f68740"/>
        <function-ref name="txDone" scoped="" ref="0x7f37a2f688d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f37a2f68a60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f37a2f68bf0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f37a2f68d80"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f37a2f67020"/>
        <function-ref name="tx" scoped="" ref="0x7f37a2f671b0"/>
        <function-ref name="rx" scoped="" ref="0x7f37a2f67340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f37a2fb2d80" loc="49:../../../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x7f37a2fb2d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2f6c180"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2f6c310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x7f37a2f6a880" loc="54:../../../../tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x7f37a2f6a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2f6ac00"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2f6ad90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7f37a2f433a0" loc="49:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7f37a2f433a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f37a2f43720"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f37a2f438b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7f37a2f43a40"/>
        <function-ref name="txDone" scoped="" ref="0x7f37a2f43bd0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f37a2f43d60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f37a2f42020"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f37a2f421b0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f37a2f42340"/>
        <function-ref name="tx" scoped="" ref="0x7f37a2f424d0"/>
        <function-ref name="rx" scoped="" ref="0x7f37a2f42660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7f37a2f41c40" loc="53:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7f37a2f41c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f37a2f40020"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f37a2f401b0"/>
        <function-ref name="rxDone" scoped="" ref="0x7f37a2f40340"/>
        <function-ref name="txDone" scoped="" ref="0x7f37a2f404d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f37a2f40660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f37a2f407f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f37a2f40980"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f37a2f40b10"/>
        <function-ref name="tx" scoped="" ref="0x7f37a2f40ca0"/>
        <function-ref name="rx" scoped="" ref="0x7f37a2f40e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7f37a2f44990" loc="48:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7f37a2f44990"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2f44d10"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2f43020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7f37a2f429f0" loc="51:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7f37a2f429f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2f42d70"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2f41020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7f37a2f413b0" loc="52:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7f37a2f413b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2f41730"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2f418c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7f37a2f440f0" loc="47:../../../../tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7f37a2f440f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2f44470"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2f44600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x7f37a2f3fbc0" loc="114:../../../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x7f37a2f3fbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a2f3c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x7f37a2f3a5f0" loc="117:../../../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x7f37a2f3a5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f37a2f3a970"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f37a2f3ab00"/>
        <function-ref name="rxDone" scoped="" ref="0x7f37a2f3ac90"/>
        <function-ref name="txDone" scoped="" ref="0x7f37a2f3ae20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f37a2f39020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f37a2f391b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f37a2f39340"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f37a2f394d0"/>
        <function-ref name="tx" scoped="" ref="0x7f37a2f39660"/>
        <function-ref name="rx" scoped="" ref="0x7f37a2f397f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x7f37a2f39b50" loc="119:../../../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x7f37a2f39b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a2f38020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x7f37a2f375f0" loc="122:../../../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x7f37a2f375f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f37a2f37970"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f37a2f37b00"/>
        <function-ref name="rxDone" scoped="" ref="0x7f37a2f37c90"/>
        <function-ref name="txDone" scoped="" ref="0x7f37a2f37e20"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f37a2f36020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f37a2f361b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f37a2f36340"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x7f37a2f364d0"/>
        <function-ref name="tx" scoped="" ref="0x7f37a2f36660"/>
        <function-ref name="rx" scoped="" ref="0x7f37a2f367f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x7f37a2f3ccd0" loc="116:../../../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x7f37a2f3ccd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2f3a0a0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2f3a230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x7f37a2f383f0" loc="120:../../../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x7f37a2f383f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2f38770"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2f38900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x7f37a2f38cd0" loc="121:../../../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x7f37a2f38cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2f370a0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2f37230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x7f37a2f36b20" loc="124:../../../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x7f37a2f36b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x7f37a2f35020"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x7f37a2f351b0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x7f37a2f35340"/>
        <function-ref name="actualMicro" scoped="" ref="0x7f37a2f354d0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x7f37a2f35660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x7f37a2f35980" loc="125:../../../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x7f37a2f35980"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f37a2f35d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x7f37a2f3c3f0" loc="115:../../../../tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x7f37a2f3c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f37a2f3c770"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2f3c900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f37a2ed6dd0" loc="24:../../../../tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a2ed6dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a2ed3ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a2ed2670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a2ed21b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2ed2b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f37a2ed0df0" loc="24:../../../../tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a2ed0df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TThree" ref="0x7f37a40fd7b0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a2ecdca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a2ecc670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a2ecc1b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2eccb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f37a2ec3020" loc="80:../../../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a2ec3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f37a2ec33a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f37a2ec3530"/>
        <function-ref name="getControlA" scoped="" ref="0x7f37a2ec36c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f37a2ec3850"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f37a2ec39e0"/>
        <function-ref name="setControlB" scoped="" ref="0x7f37a2ec3b70"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f37a2ec3d00"/>
        <function-ref name="getControlB" scoped="" ref="0x7f37a2ec2020"/>
        <function-ref name="setControlC" scoped="" ref="0x7f37a2ec21b0"/>
        <function-ref name="setControlA" scoped="" ref="0x7f37a2ec2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f37a2ec2850" loc="81:../../../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f37a2ec2850"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f37a2ebee60"/>
        <function-ref name="test" scoped="" ref="0x7f37a2ebe4e0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2ec14c0"/>
        <function-ref name="captured" scoped="" ref="0x7f37a2ebf020"/>
        <function-ref name="reset" scoped="" ref="0x7f37a2ebf530"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a2ebe9a0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2ec1980"/>
        <function-ref name="start" scoped="" ref="0x7f37a2ebf9f0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2ebe020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f37a2ebdad0" loc="82:../../../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x7f37a2ebdad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f37a2eb94e0"/>
        <function-ref name="fired" scoped="" ref="0x7f37a2eba1b0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2ebc790"/>
        <function-ref name="reset" scoped="" ref="0x7f37a2eba670"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a2eb99a0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2ebcc50"/>
        <function-ref name="start" scoped="" ref="0x7f37a2ebab30"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2eb9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f37a2ecbcc0" loc="79:../../../../tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a2ecbcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f37a2ec4090"/>
        <function-ref name="test" scoped="" ref="0x7f37a2ec56e0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2ec8980"/>
        <function-ref name="setScale" scoped="" ref="0x7f37a2ec4550"/>
        <function-ref name="getScale" scoped="" ref="0x7f37a2ec4a60"/>
        <function-ref name="reset" scoped="" ref="0x7f37a2ec7840"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2ec7380"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a2ec5ba0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2ec8e40"/>
        <function-ref name="start" scoped="" ref="0x7f37a2ec7d00"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2ec5220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x7f37a2eaf2c0" loc="80:../../../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x7f37a2eaf2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x7f37a2eaf640"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x7f37a2eaf7d0"/>
        <function-ref name="getControlA" scoped="" ref="0x7f37a2eaf960"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x7f37a2eafaf0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x7f37a2eafc80"/>
        <function-ref name="setControlB" scoped="" ref="0x7f37a2eafe10"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x7f37a2eae020"/>
        <function-ref name="getControlB" scoped="" ref="0x7f37a2eae1b0"/>
        <function-ref name="setControlC" scoped="" ref="0x7f37a2eae340"/>
        <function-ref name="setControlA" scoped="" ref="0x7f37a2eae4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x7f37a2ea95a0" loc="82:../../../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x7f37a2ea95a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f37a2ea5020"/>
        <function-ref name="fired" scoped="" ref="0x7f37a2ea8c10"/>
        <function-ref name="get" scoped="" ref="0x7f37a2ea8240"/>
        <function-ref name="reset" scoped="" ref="0x7f37a2ea7110"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a2ea54e0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2ea8700"/>
        <function-ref name="start" scoped="" ref="0x7f37a2ea75d0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2ea7a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f37a2eae9e0" loc="81:../../../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x7f37a2eae9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x7f37a2eaae60"/>
        <function-ref name="test" scoped="" ref="0x7f37a2eaa4e0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2ead6b0"/>
        <function-ref name="captured" scoped="" ref="0x7f37a2eac0d0"/>
        <function-ref name="reset" scoped="" ref="0x7f37a2eac5e0"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a2eaa9a0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2eadb70"/>
        <function-ref name="start" scoped="" ref="0x7f37a2eacaa0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2eaa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x7f37a2ea5ba0" loc="83:../../../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x7f37a2ea5ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f37a2ea1550"/>
        <function-ref name="fired" scoped="" ref="0x7f37a2ea31f0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2ea47f0"/>
        <function-ref name="reset" scoped="" ref="0x7f37a2ea36b0"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a2ea1a10"/>
        <function-ref name="set" scoped="" ref="0x7f37a2ea4cb0"/>
        <function-ref name="start" scoped="" ref="0x7f37a2ea3b70"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2ea1090"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x7f37a2ea0120" loc="84:../../../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x7f37a2ea0120"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x7f37a2e9ea90"/>
        <function-ref name="fired" scoped="" ref="0x7f37a2e9f770"/>
        <function-ref name="get" scoped="" ref="0x7f37a2ea0d50"/>
        <function-ref name="reset" scoped="" ref="0x7f37a2e9fc30"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a2e9c020"/>
        <function-ref name="set" scoped="" ref="0x7f37a2e9f260"/>
        <function-ref name="start" scoped="" ref="0x7f37a2e9e110"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2e9e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f37a2eb4020" loc="79:../../../../tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a2eb4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f37a2eb0350"/>
        <function-ref name="test" scoped="" ref="0x7f37a2eb29a0"/>
        <function-ref name="get" scoped="" ref="0x7f37a2eb4c50"/>
        <function-ref name="setScale" scoped="" ref="0x7f37a2eb0810"/>
        <function-ref name="getScale" scoped="" ref="0x7f37a2eb0d20"/>
        <function-ref name="reset" scoped="" ref="0x7f37a2eb3b20"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2eb3660"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a2eb2e60"/>
        <function-ref name="set" scoped="" ref="0x7f37a2eb3150"/>
        <function-ref name="start" scoped="" ref="0x7f37a2eb2020"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2eb24e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f37a2e23c60" loc="46:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x7f37a2e23c60"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f37a41ee020"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f37a41ee020"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f37a2e21020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f37a2e21410" loc="47:../../../../tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a2e21410"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f37a2e1e810"/>
        <function-ref name="test" scoped="" ref="0x7f37a2e1fe60"/>
        <function-ref name="get" scoped="" ref="0x7f37a2e20090"/>
        <function-ref name="setScale" scoped="" ref="0x7f37a2e1ecd0"/>
        <function-ref name="getScale" scoped="" ref="0x7f37a2e1c260"/>
        <function-ref name="reset" scoped="" ref="0x7f37a2e1f020"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2e20a60"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a2e1e350"/>
        <function-ref name="set" scoped="" ref="0x7f37a2e20550"/>
        <function-ref name="start" scoped="" ref="0x7f37a2e1f4e0"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2e1f9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f37a2e1a3c0" loc="45:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a2e1a3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TThree" ref="0x7f37a40fd7b0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a2e18240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a2e18bc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a2e18700"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2e170d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f37a2e17660" loc="46:../../../../tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x7f37a2e17660"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x7f37a2e13a90"/>
        <function-ref name="test" scoped="" ref="0x7f37a2e13110"/>
        <function-ref name="get" scoped="" ref="0x7f37a2e163d0"/>
        <function-ref name="setScale" scoped="" ref="0x7f37a2e12020"/>
        <function-ref name="getScale" scoped="" ref="0x7f37a2e12530"/>
        <function-ref name="reset" scoped="" ref="0x7f37a2e152a0"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2e16da0"/>
        <function-ref name="isOn" scoped="" ref="0x7f37a2e135d0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2e16890"/>
        <function-ref name="start" scoped="" ref="0x7f37a2e15760"/>
        <function-ref name="stop" scoped="" ref="0x7f37a2e15c20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f37a2e0a0f0" loc="63:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x7f37a2e0a0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TThree" ref="0x7f37a40fd7b0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a2e09020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a2e099a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a2e094e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2e09e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f37a2e0ecd0" loc="62:../../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x7f37a2e0ecd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f37a4142d50"/>
            <typename><typedef-ref name="TMicro" ref="0x7f37a4140180"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f37a2e0db60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f37a2e0c550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f37a2e0c090"/>
        <function-ref name="overflow" scoped="" ref="0x7f37a2e0ca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f37a2dfd1e0" loc="47:../../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x7f37a2dfd1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f37a2dfd560"/>
        <function-ref name="offset" scoped="" ref="0x7f37a2dfd6f0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f37a2dfd880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketRSSI" ref="0x7f37a2de0900" loc="47:RssiBaseC.nc">
      <component-ref qname="RssiBaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x7f37a2de0900"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f37a2ddd090"/>
        <function-ref name="get" scoped="" ref="0x7f37a2ddfaf0"/>
        <function-ref name="isSet" scoped="" ref="0x7f37a2ddf5a0"/>
        <function-ref name="set" scoped="" ref="0x7f37a2ddd5e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiMsgIntercept" ref="0x7f37a2de0060" loc="40:RssiBaseC.nc">
      <component-ref qname="RssiBaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiMsgIntercept" scoped="" ref="0x7f37a2de0060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0x7f37a2de03e0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Intercept" loc="15:../../../../tos/interfaces/Intercept.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="forward" ref="0x7f37a404bcf0" loc="31:../../../../tos/interfaces/Intercept.nc">
        <documentation loc="16:../../../../tos/interfaces/Intercept.nc">
          <short>&#10; Signals that a message has been received, which is supposed to be&#10; forwarded to another destination.</short>
          <long>&#10; Signals that a message has been received, which is supposed to be&#10; forwarded to another destination. &#10;&#10; @param 'message_t* ONE msg' The complete message received.&#10;&#10; @param 'void* COUNT(len) payload' The payload portion of the packet for this&#10; protocol layer.&#10;&#10; @param len The length of the payload buffer.&#10;&#10; @return TRUE indicates the packet should be forwarded, FALSE&#10; indicates that it should not be forwarded.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Intercept"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a404b3d0" loc="31:../../../../tos/interfaces/Intercept.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f37a404b720" loc="31:../../../../tos/interfaces/Intercept.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a404ba50" loc="31:../../../../tos/interfaces/Intercept.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f37a4041020" loc="62:../../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f37a4046b60" loc="60:../../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x7f37a403ab70" loc="60:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x7f37a403a8f0" loc="60:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x7f37a403c020" loc="31:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x7f37a403caa0" loc="39:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7f37a403c820" loc="39:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x7f37a403b5e0" loc="46:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x7f37a403b360" loc="46:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x7f37a403a020" loc="53:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:../../../../tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f37a40250e0" loc="44:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f37a4025810" loc="45:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f37a40262b0" loc="42:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f37a4023760" loc="47:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f37a40269b0" loc="43:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f37a4023020" loc="46:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f37a40274c0" loc="40:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f37a4027b90" loc="41:../../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f37a41c8190" loc="57:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f37a41c6190" loc="72:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f37a41c8900" loc="65:../../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f37a41be670" loc="67:../../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f37a41bd020" loc="75:../../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f37a40f32b0" loc="85:../../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f37a40f39f0" loc="86:../../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f37a40f6ac0" loc="79:../../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:../../../../tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f37a40d4540" loc="62:../../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f37a416d470"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f37a40d66a0" loc="52:../../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f37a3e69110" loc="113:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f37a3e6ae40" loc="113:../../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f37a3e68600" loc="138:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f37a3e68380" loc="138:../../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f37a3e6a460" loc="104:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f37a3e69960" loc="130:../../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f37a3e5a670" loc="78:../../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
              <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3e66cc0" loc="78:../../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f37a3e5a060" loc="78:../../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a3e5a390" loc="78:../../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f37a3e41560" loc="177:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f37a406adc0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f37a3e412e0" loc="177:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f37a3e4a110" loc="88:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f37a3e4ce50" loc="88:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f37a3e4d550" loc="68:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f37a3e4c040" loc="78:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f37a3e4dd90" loc="78:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f37a3e48b10" loc="121:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f37a3e48530" loc="121:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f37a3e48880" loc="121:../../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f37a3e49600" loc="103:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f37a3e49020" loc="103:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f37a3e49370" loc="103:../../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f37a3e44040" loc="147:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f37a3e46da0" loc="147:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f37a3e433a0" loc="162:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f37a3e44dc0" loc="162:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f37a3e43110" loc="162:../../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f37a406a9e0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f37a3e45da0" loc="136:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f37a3e45b20" loc="136:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f37a3e40a30" loc="187:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f37a406adc0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f37a3e40450" loc="187:../../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f37a3e407a0" loc="187:../../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f37a406adc0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f37a3e3d890" loc="195:../../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f37a406adc0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f37a3e566c0" loc="65:../../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3e56440" loc="65:../../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f37a3e55750" loc="78:../../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3e554d0" loc="78:../../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f37a3e53ab0" loc="126:../../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3e534b0" loc="126:../../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a3e537e0" loc="126:../../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f37a3e51b60" loc="106:../../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f37a3e52bf0" loc="94:../../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3e52630" loc="94:../../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a3e52960" loc="94:../../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f37a3e32190" loc="61:../../../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f37a3e32940" loc="67:../../../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f37a3e31190" loc="72:../../../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f37a3e30120" loc="83:../../../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f37a3e2e890" loc="100:../../../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f37a3e2d0e0" loc="117:../../../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f37a3e31920" loc="77:../../../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f37a3e2dc50" loc="134:../../../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f37a3e2d9d0" loc="134:../../../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f37a3e339d0" loc="56:../../../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f37a3e30900" loc="89:../../../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f37a3e2e0e0" loc="94:../../../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f37a3e645f0" loc="80:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f37a3e6bc40" loc="80:../../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f37a3e64020" loc="80:../../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a3e64350" loc="80:../../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f37a3e5e020" loc="135:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3e5f890" loc="135:../../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a3e5fbc0" loc="135:../../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f37a3e5f020" loc="123:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f37a3e62980" loc="96:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3e62700" loc="96:../../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f37a3e60020" loc="110:../../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3e618e0" loc="110:../../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f37a3e61c30" loc="110:../../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7f37a3d9a440" loc="59:../../../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f37a3d9de00" loc="59:../../../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f37a3d9a1b0" loc="59:../../../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7f37a3d8eb50" loc="65:../../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d8e530" loc="65:../../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7f37a3d8e8c0" loc="65:../../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7f37a3d8cd00" loc="71:../../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d8ca80" loc="71:../../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7f37a3d8fc60" loc="57:../../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7f37a3d8f2a0" loc="52:../../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7f37a3d8f020" loc="52:../../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f37a3d95ad0" loc="59:../../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d95850" loc="59:../../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f37a3d93cd0" loc="71:../../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d93a50" loc="71:../../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f37a3d91020" loc="85:../../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d94ce0" loc="85:../../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7f37a3d85040" loc="65:../../../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d86d90" loc="65:../../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7f37a3d89030" loc="46:../../../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d969e0" loc="46:../../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7f37a3d96d70" loc="46:../../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7f37a3d86020" loc="59:../../../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d88c80" loc="59:../../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7f37a3d88450" loc="53:../../../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d89de0" loc="53:../../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7f37a3d881c0" loc="53:../../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7f37a3d83020" loc="71:../../../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d85d70" loc="71:../../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioChannel" loc="37:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="setChannelDone" ref="0x7f37a3d81af0" loc="50:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="46:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f37a3d812e0" loc="44:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress),&#10; EALREADY if the selected channel is already set, SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f37a3d81060" loc="44:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f37a3d80390" loc="55:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
        <documentation loc="52:../../../../tos/lib/rfxlink/util/RadioChannel.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f37a3d8d500" loc="35:../../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f37a3d8d500"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f37a3d8d740" loc="35:../../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3d8d740"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7f37a3d7c5f0" loc="63:../../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3d8d740"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d7c370" loc="63:../../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f37a3d7b780" loc="70:../../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d7b500" loc="70:../../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7f37a3d7e350" loc="49:../../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d7e0d0" loc="49:../../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f37a3d7aa90" loc="78:../../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3d8d740"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d7a4a0" loc="78:../../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f37a3d7a800" loc="78:../../../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3d8d740"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketField" loc="37:../../../../tos/lib/rfxlink/util/PacketField.nc">
      <parameters>
        <typedef name="value_type" ref="0x7f37a3d658a0" loc="37:../../../../tos/lib/rfxlink/util/PacketField.nc">
          <interfacedef-ref qname="PacketField"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f37a3d658a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="clear" ref="0x7f37a3d60a90" loc="53:../../../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="50:../../../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Clears the isSet flag.</short>
          <long>&#10; Clears the isSet flag.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d60810" loc="53:../../../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f37a3d60020" loc="48:../../../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="44:../../../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns the stored value of this field in the message.</short>
          <long>&#10; Returns the stored value of this field in the message. If the&#10; value is not set, then the returned value is undefined.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f37a3d658a0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d62c90" loc="48:../../../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7f37a3d62490" loc="42:../../../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Returns TRUE if the value is set for this message.</short>
          <long>&#10; Returns TRUE if the value is set for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d62210" loc="42:../../../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f37a3d5f810" loc="59:../../../../tos/lib/rfxlink/util/PacketField.nc">
        <documentation loc="55:../../../../tos/lib/rfxlink/util/PacketField.nc">
          <short>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.</short>
          <long>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f37a3d658a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d5f210" loc="59:../../../../tos/lib/rfxlink/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f37a3d5f580" loc="59:../../../../tos/lib/rfxlink/util/PacketField.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x7f37a3d658a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f37a3d53350" loc="53:../../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f37a3d53350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f37a3d53c70" loc="61:../../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7f37a3d56b00" loc="47:../../../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d56880" loc="47:../../../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f37a3d33bf0" loc="120:../../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f37a3d34be0" loc="97:../../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f37a3d34270" loc="88:../../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f37a3d33420" loc="102:../../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f37a3d328b0" loc="128:../../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Packet" loc="35:../../../../tos/interfaces/Ieee154Packet.nc">
      <function command="" provided="0" name="source" ref="0x7f37a3d2ed40" loc="41:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f37a4075630"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d2eac0" loc="41:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f37a3d318e0" loc="37:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f37a4075630"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f37a3d2e350" loc="39:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f37a4075630"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d2e0d0" loc="39:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f37a3d2b830" loc="45:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f37a4075630"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d2b210" loc="45:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f37a3d2b5a0" loc="45:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f37a4075630"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f37a3d2daf0" loc="43:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f37a4075630"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d2d4d0" loc="43:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f37a3d2d860" loc="43:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f37a4075630"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pan" ref="0x7f37a3d2ac70" loc="49:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f37a4075210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d2a9f0" loc="49:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPan" ref="0x7f37a3d29980" loc="51:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7f37a4075210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d29370" loc="51:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f37a3d296f0" loc="51:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x7f37a4075210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f37a3d2a2a0" loc="47:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d2a020" loc="47:../../../../tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7f37a3d27120" loc="53:../../../../tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f37a4075210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Send" loc="45:../../../../tos/interfaces/Ieee154Send.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f37a3d3b020" loc="67:../../../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="47:../../../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f37a4075630"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f37a3d3d620" loc="67:../../../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f37a4075630"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f37a3d3d9a0" loc="67:../../../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a3d3dcd0" loc="67:../../../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f37a3d38660" loc="122:../../../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="113:../../../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d38060" loc="122:../../../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a3d38390" loc="122:../../../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f37a3d39790" loc="110:../../../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="100:../../../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f37a3d3bde0" loc="83:../../../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="69:../../../../tos/interfaces/Ieee154Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d3bb60" loc="83:../../../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f37a3d3ade0" loc="97:../../../../tos/interfaces/Ieee154Send.nc">
        <documentation loc="85:../../../../tos/interfaces/Ieee154Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3d3a800" loc="97:../../../../tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f37a3d3ab50" loc="97:../../../../tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Tasklet" loc="43:../../../../tos/lib/rfxlink/util/Tasklet.nc">
      <documentation loc="37:../../../../tos/lib/rfxlink/util/Tasklet.nc">
        <short>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled.</short>
        <long>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled. &#10; All state transitions should take place in the run event handler or&#10; in blocks protected by the suspend and resume commands.&#10;</long>
      </documentation>
      <function command="" provided="0" name="schedule" ref="0x7f37a3d0bcc0" loc="59:../../../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="50:../../../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Makes sure that the run event is called at least once more.</short>
          <long>&#10; Makes sure that the run event is called at least once more. If the &#10; run event is currently not executing, then it  is called immediately &#10; and this command returns only after the completion of the run event. &#10; If the run event is currently executed, then this method returns at &#10; once, and makes sure that the run event is called once more when &#10; it is finished. If this method is called from a task, then by the &#10; above rules, the run event will be called from a task as well.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="suspend" ref="0x7f37a3d0a760" loc="72:../../../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="61:../../../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section.</short>
          <long>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section. No long running&#10; computation should be called from the critical session, and&#10; in particular no user event should be fired. This call is only&#10; possible from task context, otherwise we cannot guarantee that&#10; the run event is not currently running. The suspend calls&#10; can be nested. It is very important that the same number of&#10; resume commands must be called in all control paths, e.g. be very&#10; careful with the return and break commands.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resume" ref="0x7f37a3d09120" loc="79:../../../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="74:../../../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; Leaves the critical section.</short>
          <long>&#10; Leaves the critical section. This call is conly possible from &#10; task context. If there were scheduled executions of the run&#10; event, then those will be called before this command returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="run" ref="0x7f37a3d0b560" loc="48:../../../../tos/lib/rfxlink/util/Tasklet.nc">
        <documentation loc="45:../../../../tos/lib/rfxlink/util/Tasklet.nc">
          <short>&#10; This method is executed atomically.</short>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="NeighborhoodFlag" loc="41:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
      <documentation loc="37:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <short>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example).</short>
        <long>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example). &#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f37a3cf29b0" loc="57:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="53:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for the given index.</short>
          <long>&#10; Clears the flag for the given index. The flag is automatically&#10; cleared after the Neighborhood.evicted event is fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f37a3cf2730" loc="57:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearAll" ref="0x7f37a3cf11f0" loc="62:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="59:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for all indices&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f37a3cf3520" loc="46:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="43:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Returns the value of the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f37a3cf32a0" loc="46:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f37a3cf2020" loc="51:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
        <documentation loc="48:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
          <short>&#10; Sets the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f37a3cf3c20" loc="51:../../../../tos/lib/rfxlink/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Neighborhood" loc="43:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
      <documentation loc="38:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
        <short>&#10; Every component maintains its own neighborhood data.</short>
        <long>&#10; Every component maintains its own neighborhood data. The Neighboorhood&#10; component maintains only the nodeids and ages of the neighbors, and&#10; evicts old entries from the table when necessary.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getAge" ref="0x7f37a3cf8500" loc="58:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="52:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the age of the given entry.</short>
          <long>&#10; Returns the age of the given entry. The age is incremented by one&#10; every time a new node is inserted into the neighborhood table that&#10; is not already at the very end. If the age would get too large to&#10; fit into a byte, then it is periodically reset to a smaller value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f37a3cf8280" loc="58:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNode" ref="0x7f37a3cf7a60" loc="72:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="65:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Adds a new node into the neighborhood table.</short>
          <long>&#10; Adds a new node into the neighborhood table. If this node was already&#10; in the table, then it is just brought to the front (its age is reset&#10; to zero). If the node was not in the table, then the oldest is evicted&#10; and its entry is replaced with this node. The index of the entry&#10; is returned in the range [0, NEIGHBORHOOD-1]. &#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f37a3cf77e0" loc="72:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNode" ref="0x7f37a3cf7040" loc="63:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="60:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the node address for the given entry.</short>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f37a3cf8d90" loc="63:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0x7f37a3cf65a0" loc="81:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="74:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; This event is fired when the oldest entry is replaced with a new&#10; node.</short>
          <long>&#10; This event is fired when the oldest entry is replaced with a new&#10; node. The same interface is used by many users, so all of them&#10; will receive this event and can clear the corresponding entry.&#10; After this event is fired, all flags for this entry are cleared&#10; (see the NeighborhoodFlag interface)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f37a3cf6320" loc="81:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIndex" ref="0x7f37a3cf9a20" loc="50:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
        <documentation loc="45:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
          <short>&#10; Returns the index of the neighbor in the table.</short>
          <long>&#10; Returns the index of the neighbor in the table. If the node was not &#10; found in the table, then the value NEIGHBORHOOD is  returned, &#10; otherwise an index in the range [0, NEIGHBORHOOD-1] is returned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f37a3cf97a0" loc="50:../../../../tos/lib/rfxlink/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DummyConfig" loc="35:../../../../tos/lib/rfxlink/layers/DummyConfig.nc">
      <function command="" provided="0" name="nothing" ref="0x7f37a3ca0d60" loc="40:../../../../tos/lib/rfxlink/layers/DummyConfig.nc">
        <documentation loc="37:../../../../tos/lib/rfxlink/layers/DummyConfig.nc">
          <short>&#10; We need to put something here, but this is not going to get called&#10;</short>
        </documentation>
        <interfacedef-ref qname="DummyConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TrafficMonitorConfig" loc="35:../../../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
      <function command="" provided="0" name="getBytes" ref="0x7f37a3ca5020" loc="40:../../../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
        <documentation loc="37:../../../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the number of bytes in this message.</short>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3cacd20" loc="40:../../../../tos/lib/rfxlink/layers/TrafficMonitorConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageConfig" loc="37:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
      <function command="" provided="0" name="group" ref="0x7f37a3c96870" loc="52:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="51:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.group *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f37a406adc0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c965f0" loc="52:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="checkFrame" ref="0x7f37a3c94040" loc="63:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="57:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.</short>
          <long>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.&#10; Return SUCCESS if the frame is now properly set up, &#10; or FAIL of the send operation should be aborted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c95d90" loc="63:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f37a3c98120" loc="46:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="45:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.source *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c99e70" loc="46:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f37a3c9a970" loc="40:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.destination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c9a6f0" loc="40:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f37a3c98e30" loc="49:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="48:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setSource *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c98850" loc="49:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f37a3c98ba0" loc="49:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f37a3c996f0" loc="43:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="42:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setDestination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c99110" loc="43:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f37a3c99460" loc="43:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f37a3c95600" loc="55:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
        <documentation loc="54:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setGroup *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f37a406adc0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c95020" loc="55:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f37a3c95370" loc="55:../../../../tos/lib/rfxlink/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f37a406adc0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlottedCollisionConfig" loc="35:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
      <function command="" provided="0" name="getInitialDelay" ref="0x7f37a3c9f020" loc="42:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="37:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.</short>
          <long>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getScheduleExponent" ref="0x7f37a3c9f980" loc="49:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="44:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Must return a binary exponent so that the collision avoidance layer&#10; can assign slots in the range of [0, 1 &#60;&#60; exponent) of size collision&#10; window.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowLength" ref="0x7f37a3c9cc50" loc="65:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="62:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the size of the collision window for this received message.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c9c9d0" loc="65:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitTime" ref="0x7f37a3c9e510" loc="54:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="51:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command must return the time when the message was transmitted.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c9e290" loc="54:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowStart" ref="0x7f37a3c9c040" loc="60:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
        <documentation loc="56:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.</short>
          <long>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c9eda0" loc="60:../../../../tos/lib/rfxlink/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioAlarm" loc="38:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
      <function event="" provided="0" name="fired" ref="0x7f37a3c721f0" loc="60:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="57:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; This event is fired when the specified timeout period expires.</short>
          <long>&#10; This event is fired when the specified timeout period expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="wait" ref="0x7f37a3c732a0" loc="50:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="47:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Waits till the specified timeout period expires.</short>
          <long>&#10; Waits till the specified timeout period expires. The alarm must be free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7f37a4079180"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="timeout" ref="0x7f37a3c73020" loc="50:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="tradio_size" ref="0x7f37a4079180"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f37a3c73a40" loc="55:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="52:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Cancels the running alarm.</short>
          <long>&#10; Cancels the running alarm. The alarm must be pending.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isFree" ref="0x7f37a3c767a0" loc="45:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="40:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns TRUE if the alarm is free and ready to be used.</short>
          <long>&#10; Returns TRUE if the alarm is free and ready to be used. Once the alarm&#10; is free, it cannot become nonfree in the same tasklet block. Note,&#10; if the alarm is currently set (even if for ourselves) then it is not free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x7f37a3c72a10" loc="65:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
        <documentation loc="62:../../../../tos/lib/rfxlink/util/RadioAlarm.nc">
          <short>&#10; Returns the current time as measured by the radio stack.</short>
          <long>&#10; Returns the current time as measured by the radio stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="tradio_size" ref="0x7f37a4079180"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioPacket" loc="37:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
      <function command="" provided="0" name="clear" ref="0x7f37a3c6a020" loc="72:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="69:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Clears all metadata and sets all default values in the headers.</short>
          <long>&#10; Clears all metadata and sets all default values in the headers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c6cc20" loc="72:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f37a3c6e2a0" loc="51:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="47:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the payload.</short>
          <long>&#10; Returns the length of the payload. The payload starts right&#10; after the header.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c6e020" loc="51:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f37a3c6d950" loc="61:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="58:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the maximum length that can be set for this message.</short>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f37a3c6d120" loc="56:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="53:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Sets the length of the payload.</short>
          <long>&#10; Sets the length of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c6ead0" loc="56:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f37a3c6ee20" loc="56:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7f37a3c70630" loc="45:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; This command returns the length of the header.</short>
          <long>&#10; This command returns the length of the header. The header&#10; starts at the first byte of the message_t structure &#10; (some layers may add dummy bytes to allign the payload to&#10; the msg->data section).&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c703b0" loc="45:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7f37a3c6c430" loc="67:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
        <documentation loc="63:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
          <short>&#10; Returns the length of the metadata section.</short>
          <long>&#10; Returns the length of the metadata section. The metadata section&#10; is at the very end of the message_t structure and grows downwards.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c6c1b0" loc="67:../../../../tos/lib/rfxlink/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RF230DriverConfig" loc="35:../../../../tos/chips/rf230/RF230DriverConfig.nc">
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f37a3cba660" loc="46:../../../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="42:../../../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.</short>
          <long>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x7f37a3cbdde0" loc="40:../../../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="37:../../../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy header to align the payload properly.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3cbdb60" loc="40:../../../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x7f37a3cb92a0" loc="52:../../../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="48:../../../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.</short>
          <long>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3cb9020" loc="52:../../../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerPreloadLength" ref="0x7f37a3cb9b40" loc="59:../../../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="54:../../../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired.</short>
          <long>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired. If the length of the packet is less than this amount, &#10; then that event is fired earlier. The header length must be at least one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresRssiCca" ref="0x7f37a3cb7760" loc="65:../../../../tos/chips/rf230/RF230DriverConfig.nc">
        <documentation loc="61:../../../../tos/chips/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns TRUE if before sending this message we should make sure that&#10; the channel is clear via a very basic (and quick) RSSI check.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3cb74e0" loc="65:../../../../tos/chips/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaConfig" loc="35:../../../../tos/lib/rfxlink/layers/CsmaConfig.nc">
      <function command="" provided="0" name="requiresSoftwareCCA" ref="0x7f37a3ca7780" loc="41:../../../../tos/lib/rfxlink/layers/CsmaConfig.nc">
        <documentation loc="37:../../../../tos/lib/rfxlink/layers/CsmaConfig.nc">
          <short>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.</short>
          <long>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3ca7500" loc="41:../../../../tos/lib/rfxlink/layers/CsmaConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SoftwareAckConfig" loc="37:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
      <function command="" provided="0" name="reportChannelError" ref="0x7f37a3caf8f0" loc="86:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="82:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.</short>
          <long>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckPacket" ref="0x7f37a3caf120" loc="80:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="77:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a3cb0ab0" loc="80:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f37a3cb0e30" loc="80:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7f37a3cb4ad0" loc="55:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="51:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.</short>
          <long>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3cb4850" loc="55:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckPacket" ref="0x7f37a3cb3630" loc="62:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="57:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet is an acknowledgement packet.</short>
          <long>&#10; Returns TRUE if the received packet is an acknowledgement packet.&#10; The AckedSend layer will filter out all received acknowledgement&#10; packets and uses  only the matching one for the acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3cb33b0" loc="62:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckPacket" ref="0x7f37a3cb1630" loc="69:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="64:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The acknowledgement packect was already verified &#10; to be a valid acknowledgement packet via the isAckPacket command.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a3cb1020" loc="69:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f37a3cb13a0" loc="69:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckTimeout" ref="0x7f37a3cb51f0" loc="43:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7f37a3cb4020" loc="49:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="45:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Sets the flag in the message indicating to the receiver whether&#10; the message should be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3cb59e0" loc="49:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f37a3cb5cf0" loc="49:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7f37a3cb02a0" loc="75:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
        <documentation loc="71:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet needs software acknowledgements&#10; to be sent back to the sender.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3cb0020" loc="75:../../../../tos/lib/rfxlink/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154PacketLayer" loc="45:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
      <documentation loc="38:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <short>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses.</short>
        <long>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses. It also &#10; supports 6LowPan interoperability mode, and acknowledgement frames.&#10; Note, that this interface does not support the CRC-16 value, which&#10; should be verified before the data can be trusted.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getDestPan" ref="0x7f37a3c82630" loc="131:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="127:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; returns the destination PAN id, values &#60;= 255 are tinyos groups,&#10; valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c823b0" loc="131:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDSN" ref="0x7f37a3c84d10" loc="120:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="117:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c84a90" loc="120:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFCF" ref="0x7f37a3c8f460" loc="57:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="53:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame control field.</short>
          <long>&#10; Sets the frame control field. This method should not be used, &#10; createDataFrame and createAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c90e30" loc="57:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="fcf" ref="0x7f37a3c8f1d0" loc="57:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckFrame" ref="0x7f37a3c8c630" loc="75:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="71:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c8c3b0" loc="75:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcAddr" ref="0x7f37a3c7d470" loc="156:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="153:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c7ee60" loc="156:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f37a3c7d1e0" loc="156:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createDataFrame" ref="0x7f37a3c8eb10" loc="69:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="65:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create a data frame supported by this interface.</short>
          <long>&#10; Sets the FCF to create a data frame supported by this interface.&#10; You may call setAckRequired and setFramePending commands after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c8e890" loc="69:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDSN" ref="0x7f37a3c83b80" loc="125:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="122:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c835c0" loc="125:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dsn" ref="0x7f37a3c838f0" loc="125:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckReply" ref="0x7f37a3c8a130" loc="88:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="83:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
          <long>&#10; Creates an acknowledgement packet for the given data packet.&#10; This also sets the DSN value. The data message must be a &#10; data frame, the ack message will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a3c8bb00" loc="88:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f37a3c8be80" loc="88:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSrcAddr" ref="0x7f37a3c7e6c0" loc="151:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="148:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c7e440" loc="151:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isDataFrame" ref="0x7f37a3c8e020" loc="63:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="59:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c8fc90" loc="63:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckRequired" ref="0x7f37a3c88b20" loc="99:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="96:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the ACK required field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the ACK required field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c888a0" loc="99:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckReply" ref="0x7f37a3c88020" loc="94:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="90:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The data message must be a data packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a3c8a9e0" loc="94:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f37a3c8ad60" loc="94:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localAddr" ref="0x7f37a3c7ac80" loc="178:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="175:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local address of the node (AM address)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x7f37a4075630"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x7f37a3c7b020" loc="162:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="158:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c7dc70" loc="162:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x7f37a3c7a480" loc="173:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="170:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the local pan id (AM group)&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x7f37a4075210"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestAddr" ref="0x7f37a3c7fc20" loc="146:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="143:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c7f640" loc="146:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f37a3c7f990" loc="146:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckFrame" ref="0x7f37a3c8b2a0" loc="81:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="77:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface.</short>
          <long>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface. You may call setFramePending after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c8b020" loc="81:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFramePending" ref="0x7f37a3c842b0" loc="115:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="112:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame pending field in the FCF.</short>
          <long>&#10; Sets the frame pending field in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c86c40" loc="115:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pending" ref="0x7f37a3c84020" loc="115:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestPan" ref="0x7f37a3c81400" loc="136:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="133:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination PAN id, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c82df0" loc="136:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pan" ref="0x7f37a3c81170" loc="136:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f37a3c79710" loc="185:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="180:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.</short>
          <long>&#10; Returns TRUE if the destionation of this message is either 0xFFFF&#10; or is the local address of the node, and the pan address is the&#10; local one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c79490" loc="185:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x7f37a3c87910" loc="105:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="101:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.</short>
          <long>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c87370" loc="105:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f37a3c87680" loc="105:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFCF" ref="0x7f37a3c90650" loc="51:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="47:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the frame control field.</short>
          <long>&#10; Returns the frame control field. This method should not be used, &#10; isDataFrame and isAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c903d0" loc="51:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x7f37a3c7bb90" loc="168:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="164:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c7b910" loc="168:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestAddr" ref="0x7f37a3c81e80" loc="141:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="138:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c81c00" loc="141:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFramePending" ref="0x7f37a3c86430" loc="110:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
        <documentation loc="107:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the frame pending field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the frame pending field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3c861b0" loc="110:../../../../tos/lib/rfxlink/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UniqueConfig" loc="37:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0x7f37a3caa420" loc="52:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="49:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Sets the sequence number of the packet.</short>
          <long>&#10; Sets the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3cabdf0" loc="52:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="number" ref="0x7f37a3caa190" loc="52:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportChannelError" ref="0x7f37a3caac10" loc="58:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="54:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.</short>
          <long>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0x7f37a3cb6ad0" loc="42:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sequence number of the packet.</short>
          <long>&#10; Returns the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3cb6850" loc="42:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSender" ref="0x7f37a3cab5f0" loc="47:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
        <documentation loc="44:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
          <short>&#10; Returns the sender of the packet.</short>
          <long>&#10; Returns the sender of the packet. &#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3cab370" loc="47:../../../../tos/lib/rfxlink/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RandomCollisionConfig" loc="35:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
      <function command="" provided="0" name="getCongestionBackoff" ref="0x7f37a3ca32a0" loc="46:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="42:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the amount of maximum backoff when there is congestion&#10; (the channel was busy for the first try)&#10;</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3ca3020" loc="46:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInitialBackoff" ref="0x7f37a3ca46c0" loc="40:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="37:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the initial amount of maximum backoff for this message.</short>
          <long>&#10; Returns the initial amount of maximum backoff for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3ca4440" loc="40:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMinimumBackoff" ref="0x7f37a3ca3af0" loc="51:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="48:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the minimum ticks before the message could be sent.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitBarrier" ref="0x7f37a3ca15f0" loc="57:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
        <documentation loc="53:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
          <short>&#10; The provided message was just received, and this command should return &#10; the time till no transmission should be initiated.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3ca1370" loc="57:../../../../tos/lib/rfxlink/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f37a3c07070" loc="56:../../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f37a3c07070"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f37a3c072b0" loc="56:../../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3c072b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f37a3c04e00" loc="109:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3c072b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f37a3c06e40" loc="78:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f37a3c04460" loc="103:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3c072b0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3c072b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f37a3c05e60" loc="103:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3c072b0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f37a3c041d0" loc="103:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3c072b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f37a3c05640" loc="88:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f37a3c02620" loc="116:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3c072b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f37a3c07e10" loc="66:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3c072b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f37a3c07b90" loc="66:../../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3c072b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f37a3c06680" loc="73:../../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareSend" loc="38:../../../../tos/lib/rfxlink/util/BareSend.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f37a3bccaa0" loc="49:../../../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="40:../../../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a task. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3bcc820" loc="49:../../../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f37a3bc7550" loc="67:../../../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="59:../../../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3bc72d0" loc="67:../../../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f37a3bc89e0" loc="57:../../../../tos/lib/rfxlink/util/BareSend.nc">
        <documentation loc="51:../../../../tos/lib/rfxlink/util/BareSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3bc8400" loc="57:../../../../tos/lib/rfxlink/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f37a3bc8750" loc="57:../../../../tos/lib/rfxlink/util/BareSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareReceive" loc="37:../../../../tos/lib/rfxlink/util/BareReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7f37a3bc50b0" loc="44:../../../../tos/lib/rfxlink/util/BareReceive.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/util/BareReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
              <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3bcbd90" loc="44:../../../../tos/lib/rfxlink/util/BareReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7f37a3bb4ba0" loc="50:../../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7f37a3bb3b10" loc="60:../../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7f37a3bb33b0" loc="55:../../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f37a406adc0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7f37a3bb4360" loc="45:../../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f37a406adc0"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7f37a3bb8d00" loc="45:../../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f37a406adc0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7f37a3bb40d0" loc="45:../../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x7f37a40691d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f37a3b0c8e0" loc="53:../../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f37a3b0b270" loc="61:../../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f37a3b07a10" loc="65:../../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f37a3b071f0" loc="59:../../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f37a3b090e0" loc="90:../../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f37a3b09940" loc="98:../../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f37a3afdb50" loc="79:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f37a3b08b00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f37a3afd8d0" loc="79:../../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f37a3b08b00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f37a3b02a80" loc="53:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f37a3aff620" loc="62:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f37a3b08b00"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f37a3aff3a0" loc="62:../../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f37a3b08b00"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f37a3afd020" loc="70:../../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f37a3b08b00"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioReceive" loc="38:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
      <function event="" provided="0" name="receive" ref="0x7f37a3990020" loc="54:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="49:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
              <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3991d30" loc="54:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="header" ref="0x7f37a3991390" loc="47:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
        <documentation loc="40:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
          <short>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed.</short>
          <long>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed. Return FALSE if the message should be discarded.&#10; In particular, the message buffer layer returns FALSE if there is&#10; no space for a new message, so this message will not get acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3991110" loc="47:../../../../tos/lib/rfxlink/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioState" loc="38:../../../../tos/lib/rfxlink/util/RadioState.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="turnOff" ref="0x7f37a3922670" loc="45:../../../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="40:../../../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time.</short>
          <long>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time. The radio cannot send or receive in this state &#10; and releases all access to shared resources (e.g. SPI bus). &#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0x7f37a3921880" loc="57:../../../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="53:../../../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Goes into receive state.</short>
          <long>&#10; Goes into receive state. The radio continuously receive messages &#10; and able to transmit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f37a391f350" loc="64:../../../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="59:../../../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress)&#10; SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f37a391f0d0" loc="64:../../../../tos/lib/rfxlink/util/RadioState.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="done" ref="0x7f37a391fb10" loc="70:../../../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="66:../../../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="standby" ref="0x7f37a3921020" loc="51:../../../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="47:../../../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.</short>
          <long>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f37a391e420" loc="75:../../../../tos/lib/rfxlink/util/RadioState.nc">
        <documentation loc="72:../../../../tos/lib/rfxlink/util/RadioState.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioSend" loc="38:../../../../tos/lib/rfxlink/util/RadioSend.nc">
      <function command="" provided="0" name="send" ref="0x7f37a391c2a0" loc="49:../../../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="40:../../../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a tasklet. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a391c020" loc="49:../../../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="ready" ref="0x7f37a391b700" loc="64:../../../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="59:../../../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; This event is fired when the component is most likely able to accept &#10; a send request.</short>
          <long>&#10; This event is fired when the component is most likely able to accept &#10; a send request. If the send command has returned with a failure, then&#10; this event will be called at least once in the near future.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f37a391ce60" loc="57:../../../../tos/lib/rfxlink/util/RadioSend.nc">
        <documentation loc="51:../../../../tos/lib/rfxlink/util/RadioSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f37a391cbe0" loc="57:../../../../tos/lib/rfxlink/util/RadioSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../../../tos/interfaces/Random.nc">
      <documentation loc="34:../../../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f37a38a5020" loc="52:../../../../tos/interfaces/Random.nc">
        <documentation loc="48:../../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f37a38a6690" loc="46:../../../../tos/interfaces/Random.nc">
        <documentation loc="42:../../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f37a387be30" loc="53:../../../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f37a387be30"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f37a38779a0" loc="64:../../../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f37a387be30"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f37a3877720" loc="64:../../../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f37a387be30"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketFlag" loc="37:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
      <function command="" provided="0" name="clear" ref="0x7f37a3850040" loc="57:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="54:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to FALSE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3851d90" loc="57:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f37a3855e60" loc="42:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="39:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Returns if the flag is set for this message.</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3855be0" loc="42:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setValue" ref="0x7f37a3852bd0" loc="47:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="44:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to the specified value.</short>
          <long>&#10; Sets the flag in this message to the specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3852610" loc="47:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f37a3852940" loc="47:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f37a3851630" loc="52:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
        <documentation loc="49:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to TRUE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a38513b0" loc="52:../../../../tos/lib/rfxlink/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioCCA" loc="38:../../../../tos/lib/rfxlink/util/RadioCCA.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="done" ref="0x7f37a381d460" loc="53:../../../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="47:../../../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Signals the completion of the clear channel assesment send command.</short>
          <long>&#10; Signals the completion of the clear channel assesment send command.&#10; SUCCESS means the channel is clear, EBUSY means the channel is not&#10; clear, and FAIL means that the clear channel assesment could not&#10; be finished or the operation was cancelled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f37a381d1e0" loc="53:../../../../tos/lib/rfxlink/util/RadioCCA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f37a38219c0" loc="45:../../../../tos/lib/rfxlink/util/RadioCCA.nc">
        <documentation loc="40:../../../../tos/lib/rfxlink/util/RadioCCA.nc">
          <short>&#10; Starts the clear channel assesment procedure.</short>
          <long>&#10; Starts the clear channel assesment procedure. Returns EBUSY if the radio&#10; is currently servicing a clear channel assesment, and SUCCESS otherwise.&#10; The check will be performed only in the RX_READY state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f37a37a9350" loc="53:../../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f37a37a9350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f37a37a11f0" loc="136:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f37a37a6a60" loc="83:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f37a37a4820" loc="114:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f37a37a4250" loc="114:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f37a37a4590" loc="114:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f37a37a5a60" loc="98:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f37a37a0270" loc="151:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f37a37a1980" loc="144:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f37a37a5270" loc="92:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f37a37a8020" loc="64:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f37a37a9c40" loc="64:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f37a37a3820" loc="129:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f37a37a3250" loc="129:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f37a37a3590" loc="129:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f37a37a8ae0" loc="73:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f37a37a8860" loc="73:../../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x7f37a4ad9170"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f37a37a6350" loc="78:../../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f37a3792d60" loc="57:../../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f37a3792d60"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f37a378f020" loc="57:../../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a378f020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f37a378f940" loc="64:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a378f020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f37a378ea50" loc="76:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f37a378e1f0" loc="71:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f37a378c1f0" loc="82:../../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="76:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="67:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7f37a3760e50" loc="89:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="88:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7f37a3762c40" loc="85:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="84:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7f37a37648c0" loc="79:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="78:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7f37a3760680" loc="86:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f37a3760400" loc="86:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7f37a3762470" loc="82:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f37a37621f0" loc="82:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7f37a375f890" loc="90:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7f37a375f610" loc="90:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7f37a37630e0" loc="80:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7f37a3763a80" loc="81:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f37a3763800" loc="81:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="51:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
      <documentation loc="45:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="compareBBusy" ref="0x7f37a374e020" loc="92:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="88:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; @return TRUE if OCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer2Asynchronous" ref="0x7f37a3752e50" loc="68:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="65:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 2 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlABusy" ref="0x7f37a3750610" loc="74:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="70:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; @return TRUE if TCCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBBusy" ref="0x7f37a3750e40" loc="80:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="76:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; @return TRUE if TCCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x7f37a374e830" loc="98:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="94:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; @return TRUE if TCNT2 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareABusy" ref="0x7f37a374f6c0" loc="86:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="82:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; @return TRUE if OCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x7f37a3755ba0" loc="57:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="53:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer2 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f37a4127da0"/>
            <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f37a4126230"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x7f37a3752610" loc="63:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="59:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer2 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f37a4127da0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f37a4126230"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x7f37a3752390" loc="63:../../../../tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7f37a4127da0"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x7f37a4126230"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7f37a37653d0" loc="41:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a37653d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x7f37a3758020" loc="74:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f37a375a020" loc="58:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f37a3765d10" loc="48:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a37653d0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f37a375a790" loc="62:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f37a37587e0" loc="80:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f37a375c710" loc="54:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a37653d0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f37a375c490" loc="54:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a37653d0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f37a3759020" loc="65:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f37a3759770" loc="68:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:../../../../tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7f37a3774a20" loc="55:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f37a3774a20"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x7f37a376c2d0" loc="98:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7f37a376d350" loc="87:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f37a3771390" loc="61:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f37a3774a20"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x7f37a376ccb0" loc="104:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x7f37a376ca30" loc="104:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x7f37a376a510" loc="110:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f37a3770c90" loc="75:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f37a3770500" loc="70:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f37a376db10" loc="93:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f37a3771d40" loc="67:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f37a3774a20"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f37a3771ac0" loc="67:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7f37a3774a20"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f37a376e420" loc="78:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f37a376eb70" loc="81:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:../../../../tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f37a3556070" loc="59:../../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f37a3556070"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f37a35562b0" loc="59:../../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a35562b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f37a3556de0" loc="66:../../../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a35562b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f37a3556b60" loc="66:../../../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a35562b0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7f37a3559610" loc="54:../../../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f37a35587d0" loc="66:../../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f37a3558020" loc="61:../../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f37a3559d30" loc="61:../../../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7f37a355dd70" loc="53:../../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7f37a3560020" loc="62:../../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a3563ca0" loc="62:../../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7f37a355f3c0" loc="74:../../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a355f140" loc="74:../../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7f37a3560890" loc="68:../../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f37a355fe50" loc="81:../../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a355fbd0" loc="81:../../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="40:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="34:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7f37a3468350" loc="40:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3468350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x7f37a34602a0" loc="88:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="84:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x7f37a3460020" loc="88:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x7f37a3461020" loc="76:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="72:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f37a3468c90" loc="47:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="43:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3468350"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f37a3463110" loc="60:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="56:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3468350"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f37a3465e10" loc="60:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3468350"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f37a34638c0" loc="64:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f37a34617e0" loc="82:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="78:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f37a3465670" loc="53:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="49:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3468350"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7f37a34653f0" loc="53:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f37a3468350"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f37a3462070" loc="67:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="66:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f37a34627c0" loc="70:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:../../../../tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f37a34453b0" loc="76:../../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f37a3446a00" loc="76:../../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f37a3446d90" loc="76:../../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a3445110" loc="76:../../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f37a3444980" loc="88:../../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f37a3443bd0" loc="88:../../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f37a3444020" loc="88:../../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a3444360" loc="88:../../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f37a34446d0" loc="89:../../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f37a34494c0" loc="45:../../../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f37a3449240" loc="45:../../../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Spi" loc="78:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
      <function command="" provided="0" name="initSlave" ref="0x7f37a342e1f0" loc="86:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="85:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into slave mode.</short>
          <long> Initialize the ATmega128 SPI bus into slave mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPolarity" ref="0x7f37a3424070" loc="126:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpiEnabled" ref="0x7f37a3429a00" loc="117:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPhase" ref="0x7f37a3424a90" loc="128:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sampleOnTrailing" ref="0x7f37a3424810" loc="128:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initMaster" ref="0x7f37a3430a10" loc="83:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="82:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into master mode.</short>
          <long> Initialize the ATmega128 SPI bus into master mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterBit" ref="0x7f37a34265c0" loc="122:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="isMaster" ref="0x7f37a3426340" loc="122:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x7f37a342a0b0" loc="113:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enabled" ref="0x7f37a342bdd0" loc="113:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7f37a342c190" loc="97:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="93:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Read the SPI data register &#10; </short>
          <long> &#10; Read the SPI data register &#10; @return last data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterDoubleSpeed" ref="0x7f37a341e4e0" loc="141:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x7f37a341e260" loc="141:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0x7f37a342a850" loc="114:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClock" ref="0x7f37a3422c10" loc="131:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="speed" ref="0x7f37a3422990" loc="131:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f37a3421b70" loc="136:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPolarity" ref="0x7f37a34258a0" loc="125:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="highWhenIdle" ref="0x7f37a3425620" loc="125:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterDoubleSpeed" ref="0x7f37a3420b10" loc="140:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDataOrder" ref="0x7f37a34273f0" loc="119:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lsbFirst" ref="0x7f37a3427170" loc="119:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f37a342cb70" loc="103:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="99:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Write the SPI data register &#10; </short>
          <long> &#10; Write the SPI data register &#10; @param data   next data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a342c8f0" loc="103:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f37a34292a0" loc="116:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="busOn" ref="0x7f37a3429020" loc="116:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterBitSet" ref="0x7f37a3426e30" loc="123:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPhase" ref="0x7f37a3422270" loc="129:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClock" ref="0x7f37a3421390" loc="132:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0x7f37a3420350" loc="138:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOrderLsbFirst" ref="0x7f37a3427b70" loc="120:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f37a342e980" loc="89:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="88:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Disable and sleep the ATmega128 SPI bus.</short>
          <long> Disable and sleep the ATmega128 SPI bus. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7f37a342b5b0" loc="109:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="105:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
          <short>&#10; Interrupt signalling SPI data cycle is complete.</short>
          <long>&#10; Interrupt signalling SPI data cycle is complete. &#10; @param data   data byte from data register&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a342b330" loc="109:../../../../tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f37a33d0190" loc="95:../../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f37a33d09e0" loc="105:../../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="76:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="67:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControlC" ref="0x7f37a336ca20" loc="81:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7f37a3368020" loc="87:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="86:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x7f37a336fac0" loc="79:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="78:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7f37a3367270" loc="91:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="90:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7f37a3368a10" loc="88:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f37a3368790" loc="88:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x7f37a336bd80" loc="83:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f37a336bb00" loc="83:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7f37a3367c70" loc="92:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7f37a33679f0" loc="92:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x7f37a336c2b0" loc="80:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlC" ref="0x7f37a3369750" loc="84:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f37a33694d0" loc="84:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x7f37a336b3e0" loc="82:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f37a336b160" loc="82:../../../../tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f37a31ac2f0" loc="75:../../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a31afcd0" loc="75:../../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a31ac060" loc="75:../../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f37a31a8890" loc="125:../../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a31a8290" loc="125:../../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a31a85c0" loc="125:../../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f37a31a79b0" loc="112:../../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f37a31ab5f0" loc="89:../../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a31ab370" loc="89:../../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f37a31aaac0" loc="100:../../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a31aa4e0" loc="100:../../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f37a31aa830" loc="100:../../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f37a3147670" loc="31:../../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a3147060" loc="31:../../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f37a31473e0" loc="31:../../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f37a314a820" loc="15:../../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f37a31496d0" loc="23:../../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f37a31490d0" loc="23:../../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f37a4052160"/>
                <typename><typedef-ref name="message_t" ref="0x7f37a40517f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f37a3149440" loc="23:../../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f37a3112760" loc="95:../../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f37a3110020" loc="105:../../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f37a310fe10" loc="54:../../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f37a310f6a0" loc="49:../../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f37a311a770" loc="56:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f37a3119be0" loc="72:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f37a3116840" loc="94:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a31165c0" loc="94:../../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f37a31174a0" loc="79:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f37a3119350" loc="65:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a31190d0" loc="65:../../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f37a31150e0" loc="100:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f37a3117d50" loc="85:../../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f37a3121190" loc="71:../../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f37a3121ac0" loc="81:../../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f37a31227b0" loc="62:../../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f37a3122530" loc="62:../../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f37a3120690" loc="91:../../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f37a3120410" loc="91:../../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f37a311d3e0" loc="62:../../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f37a311c030" loc="69:../../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a311dd80" loc="69:../../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f37a311cb00" loc="80:../../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f37a311c880" loc="80:../../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f37a2fe7c40" loc="48:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f37a2fe7670" loc="48:../../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a2fe79b0" loc="48:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f37a2fe2a70" loc="79:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f37a2fe27f0" loc="79:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f37a2fe0890" loc="90:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f37a2fe02c0" loc="90:../../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a2fe0600" loc="90:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f37a2fe3610" loc="65:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f37a2fdf2c0" loc="99:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f37a2fde820" loc="99:../../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a2fdeb60" loc="99:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f37a2fdf020" loc="99:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f37a2fe2020" loc="72:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f37a2fe5610" loc="57:../../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f37a2fe4bd0" loc="57:../../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f37a2fe5020" loc="57:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x7f37a4b5e610"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f37a2fe5370" loc="57:../../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f37a2fbe5b0" loc="50:../../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f37a2fbe330" loc="50:../../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f37a2fbedf0" loc="59:../../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f37a2fbdcf0" loc="69:../../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f37a2fbd700" loc="69:../../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f37a2fbda60" loc="69:../../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f37a2fbbb50" loc="79:../../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:../../../../tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:../../../../tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f37a2fa8820" loc="44:../../../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f37a2fa9910" loc="42:../../../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x7f37a2fa4110" loc="49:../../../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a2fa5e60" loc="49:../../../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f37a2fa5070" loc="47:../../../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f37a2fac980" loc="40:../../../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f37a2fa9190" loc="41:../../../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f37a2fa80e0" loc="43:../../../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f37a41c1020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x7f37a2fa7020" loc="45:../../../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f37a41f0500"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f37a2fa7950" loc="46:../../../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f37a2fa76d0" loc="46:../../../../tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f37a2fa5790" loc="48:../../../../tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f37a4b5fad0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
